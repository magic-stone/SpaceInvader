#reader(lib"read.ss""wxme")WXME0108 ## 
#|
   This file uses the GRacket editor format.
   Open this file in DrRacket version 6.6 or later to read it.

   Most likely, it was created by saving a program in DrRacket,
   and it probably contains a program with non-text elements
   (such as images or comment boxes).

            http://racket-lang.org/
|#
 32 7 #"wxtext\0"
3 1 6 #"wxtab\0"
1 1 8 #"wximage\0"
2 0 8 #"wxmedia\0"
4 1 34 #"(lib \"syntax-browser.ss\" \"mrlib\")\0"
1 0 36 #"(lib \"cache-image-snip.ss\" \"mrlib\")\0"
1 0 68
(
 #"((lib \"image-core.ss\" \"mrlib\") (lib \"image-core-wxme.rkt\" \"mr"
 #"lib\"))\0"
) 1 0 16 #"drscheme:number\0"
3 0 44 #"(lib \"number-snip.ss\" \"drscheme\" \"private\")\0"
1 0 36 #"(lib \"comment-snip.ss\" \"framework\")\0"
1 0 93
(
 #"((lib \"collapsed-snipclass.ss\" \"framework\") (lib \"collapsed-sni"
 #"pclass-wxme.ss\" \"framework\"))\0"
) 0 0 43 #"(lib \"collapsed-snipclass.ss\" \"framework\")\0"
0 0 19 #"drscheme:sexp-snip\0"
0 0 29 #"drscheme:bindings-snipclass%\0"
1 0 101
(
 #"((lib \"ellipsis-snip.rkt\" \"drracket\" \"private\") (lib \"ellipsi"
 #"s-snip-wxme.rkt\" \"drracket\" \"private\"))\0"
) 2 0 88
(
 #"((lib \"pict-snip.rkt\" \"drracket\" \"private\") (lib \"pict-snip.r"
 #"kt\" \"drracket\" \"private\"))\0"
) 0 0 34 #"(lib \"bullet-snip.rkt\" \"browser\")\0"
0 0 25 #"(lib \"matrix.ss\" \"htdp\")\0"
1 0 22 #"drscheme:lambda-snip%\0"
1 0 29 #"drclickable-string-snipclass\0"
0 0 26 #"drracket:spacer-snipclass\0"
0 0 57
#"(lib \"hrule-snip.rkt\" \"macro-debugger\" \"syntax-browser\")\0"
1 0 26 #"drscheme:pict-value-snip%\0"
0 0 45 #"(lib \"image-snipr.ss\" \"slideshow\" \"private\")\0"
1 0 38 #"(lib \"pict-snipclass.ss\" \"slideshow\")\0"
2 0 55 #"(lib \"vertical-separator-snip.ss\" \"stepper\" \"private\")\0"
1 0 18 #"drscheme:xml-snip\0"
1 0 31 #"(lib \"xml-snipclass.ss\" \"xml\")\0"
1 0 21 #"drscheme:scheme-snip\0"
2 0 34 #"(lib \"scheme-snipclass.ss\" \"xml\")\0"
1 0 10 #"text-box%\0"
1 0 32 #"(lib \"text-snipclass.ss\" \"xml\")\0"
1 0 1 6 #"wxloc\0"
          0 0 167 0 1 #"\0"
0 75 1 #"\0"
0 12 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 0 9
#"Standard\0"
0 75 6 #"Menlo\0"
0 16 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1 1 1 1 1 1 0 0 0 0 0 0 -1 -1 2 24
#"framework:default-color\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 255 255 255 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 15
#"text:ports out\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 255 0 0 0 0 0 -1
-1 2 15 #"text:ports err\0"
0 -1 1 #"\0"
1 0 -1 -1 93 -1 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 17
#"text:ports value\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 27 #"Matching Parenthesis Style\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:symbol\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 38
#"framework:syntax-color:scheme:keyword\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 194 116 31 0 0 0 -1 -1 2
38 #"framework:syntax-color:scheme:comment\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 194 116 31 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:string\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 35
#"framework:syntax-color:scheme:text\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 39
#"framework:syntax-color:scheme:constant\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 49
#"framework:syntax-color:scheme:hash-colon-keyword\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 42
#"framework:syntax-color:scheme:parenthesis\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:error\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:other\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 16
#"Misspelled Text\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 81 112 203 0 0 0 -1 -1 2
38 #"drracket:check-syntax:lexically-bound\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 81 112 203 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 28
#"drracket:check-syntax:set!d\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 37
#"drracket:check-syntax:unused-require\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"drracket:check-syntax:free-variable\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 68 0 203 0 0 0 -1 -1 2 31
#"drracket:check-syntax:imported\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 68 0 203 0 0 0 -1 -1 2 47
#"drracket:check-syntax:my-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 116 0 0 0 0 -1 -1 2 50
#"drracket:check-syntax:their-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 116 0 0 0 0 -1 -1 2 48
#"drracket:check-syntax:unk-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 139 142 28 0 0 0 -1 -1 2
49 #"drracket:check-syntax:both-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 139 142 28 0 0 0 -1 -1 2
26 #"plt:htdp:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 2 27
#"plt:htdp:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 4 1
#"\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 4 #"XML\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 37 #"plt:module-language:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 38
#"plt:module-language:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 4 1
#"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 100 0 0 0 0 -1
-1 0 1 #"\0"
0 75 6 #"Menlo\0"
0.0 12 90 -1 90 -1 3 -1 0 1 0 1 0 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 150 0 150 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 255 0 0 0 0
0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 0 175 0 0
0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 100 0 0 0
0 -1 -1 17 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 -1 -1 24 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 -1 -1 15 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 -1 -1 14 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 -1 -1 44 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 -1 -1 21 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 65 105 225 0
0 0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 -1 -1 46 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 -1 -1 0 1 #"\0"
0 75 1 #"\0"
0.0 10 90 -1 90 -1 3 -1 0 1 0 1 0 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 1 -1 0 1 #"\0"
0 75 12 #"Courier New\0"
0.0 13 90 -1 90 -1 3 -1 0 1 0 1 0 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 1 -1 0 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
0 -1 19 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 -1 -1 0 1 #"\0"
0 -1 1 #"\0"
0.0 13 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 1 #"\0"
0 -1 1 #"\0"
0.0 13 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 0 1 #"\0"
0 75 12 #"Courier New\0"
0.0 10 90 -1 90 -1 3 -1 0 1 0 1 0 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 1 -1 0 1 #"\0"
0 75 6 #"Menlo\0"
0.0 19 90 -1 90 -1 3 -1 0 1 0 1 0 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 0 -1 -1 0 1 #"\0"
0 75 7 #"Monaco\0"
0.0 15 90 -1 90 -1 3 -1 0 1 0 1 0 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 194 158 31 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 211 72 255 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 150 255 0
0 0 -1 -1 0 1 #"\0"
0 75 6 #"Menlo\0"
0.0 17 90 -1 90 -1 3 -1 0 1 0 1 0 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 255 255 255
0 0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 192 46 214 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 57 89 216 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 102 102 255
0 0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 249 148 40 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 51 174 51 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 60 194 57 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 151 69 43 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 255 255 255
0 0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 255 255 255
0 0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 50 163 255 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 255 192 203
0 0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 166 0 255 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 50 205 50 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 240 230 140
0 0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 205 92 92 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 244
232 214 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 90 -1 93 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 6 28 27 0 0
0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 138 71 195 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 191 70 168 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 68 132 165 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 148 136 25 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 3 7 0 0 0
-1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 90 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 255 0 0 0 0
0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 200 0 0 0 0
0 -1 -1 0 1 #"\0"
0 75 7 #"Monaco\0"
0.0 16 90 -1 90 -1 3 -1 0 1 0 1 0 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 1 -1 0 1 #"\0"
0 75 7 #"Monaco\0"
0.0 13 90 -1 90 -1 3 -1 0 1 0 1 0 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 1 -1 0 1 #"\0"
0 75 7 #"Monaco\0"
0.0 14 90 -1 90 -1 3 -1 0 1 0 1 0 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 150 0 150 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 92 93 -1 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 255 0 0 0 0
0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 0 175 0 0
0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 38 38 128 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 194 116 31 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 41 128 38 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 132 60 36 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 255 0 0 0 0
0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 81 112 203 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 178 34 34 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 68 0 203 0 0
0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 116 0 0 0
0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 139 142 28 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 92 -1 93 -1 -1 0 1 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 255 165 0 0
0 0 -1 -1 0 1 #"\0"
0 75 7 #"Monaco\0"
0.0 12 90 -1 90 -1 3 -1 0 1 0 1 0 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 1 -1 0 1 #"\0"
0 75 10 #"Monaco CE\0"
0.0 11 90 -1 90 -1 3 -1 0 1 0 1 0 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 38 38 128 0
0 0 -1 -1 2 40 #"framework:syntax-coloring:scheme:symbol\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 38 38 128 0
0 0 -1 -1 2 41 #"framework:syntax-coloring:scheme:keyword\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 38 38 128 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 194 116 31 0
0 0 -1 -1 2 41 #"framework:syntax-coloring:scheme:comment\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 194 116 31 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 41 128 38 0
0 0 -1 -1 2 40 #"framework:syntax-coloring:scheme:string\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 41 128 38 0
0 0 -1 -1 2 42 #"framework:syntax-coloring:scheme:constant\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 41 128 38 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 132 60 36 0
0 0 -1 -1 2 45 #"framework:syntax-coloring:scheme:parenthesis\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 132 60 36 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 255 0 0 0 0
0 -1 -1 2 39 #"framework:syntax-coloring:scheme:error\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 255 0 0 0 0
0 -1 -1 2 39 #"framework:syntax-coloring:scheme:other\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 14 #"Html Standard\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1 1 1 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 81 112 203 0
0 0 -1 -1 2 49 #"drscheme:check-syntax:lexically-bound-identifier\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 81 112 203 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 68 0 203 0 0
0 -1 -1 2 42 #"drscheme:check-syntax:imported-identifier\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 68 0 203 0 0
0 -1 -1 2 37 #"profj:syntax-coloring:scheme:keyword\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 139 0 139 0
0 0 -1 -1 2 39 #"profj:syntax-coloring:scheme:prim-type\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 139 0 139 0
0 0 -1 -1 2 40 #"profj:syntax-coloring:scheme:identifier\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 38 38 128 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 34 139 34 0
0 0 -1 -1 2 36 #"profj:syntax-coloring:scheme:string\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 34 139 34 0
0 0 -1 -1 2 37 #"profj:syntax-coloring:scheme:literal\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 34 139 34 0
0 0 -1 -1 2 37 #"profj:syntax-coloring:scheme:comment\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 194 116 31 0
0 0 -1 -1 2 35 #"profj:syntax-coloring:scheme:error\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 255 0 0 0 0
0 -1 -1 2 37 #"profj:syntax-coloring:scheme:default\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 39 #"profj:syntax-coloring:scheme:uncovered\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 37 #"profj:syntax-coloring:scheme:covered\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 139 0 139 0
0 0 -1 -1 2 1 #"\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 0 1 #"\0"
0 75 12 #"Courier New\0"
0.0 12 90 -1 90 -1 3 -1 0 1 0 1 0 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255 0
0 0 0 0 1 #"\0"
0 70 1 #"\0"
0.0 0 90 90 90 90 0 0 0 0 0 0 0 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 0 0 0 0
0 0 1 #"\0"
0 75 12 #"Courier New\0"
0.0 12 90 -1 90 -1 3 -1 0 1 0 1 0 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 1 -1 0 1 #"\0"
0 75 6 #"Menlo\0"
0.0 16 90 -1 90 -1 3 -1 0 1 0 1 0 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 1 -1           0 7680 0 4 3 85
(
 #";; The first three lines of this file were inserted by DrRacket. The"
 #"y record metadata"
) 0 0 4 29 1 #"\n"
0 0 4 3 85
(
 #";; about the language level of this file in a form that our tools ca"
 #"n easily process."
) 0 0 4 29 1 #"\n"
0 0 4 3 197
(
 #"#reader(lib \"htdp-intermediate-lambda-reader.ss\" \"lang\")((modnam"
 #"e spaceship-update) (read-case-sensitive #t) (teachpacks ()) (htdp-s"
 #"ettings #(#t constructor repeating-decimal #f #t none #f () #f)))"
) 0 0 4 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 7 #"require"
0 0 24 3 1 #" "
0 0 14 3 11 #"2htdp/image"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 7 #"require"
0 0 24 3 1 #" "
0 0 14 3 14 #"2htdp/universe"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 19 #";;;;Data Definition"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 25 #";; A Score is a NonNegInt"
0 0 24 29 1 #"\n"
0 0 17 3 37 #";; INTERP: represents the total score"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 35 #";; A NumOfLives(NOL) is a NonNegInt"
0 0 24 29 1 #"\n"
0 0 17 3 59
#";; INTERP: represents the number of lives for our spaceship"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 23 #";; A S-Bullet is a Posn"
0 0 24 29 1 #"\n"
0 0 17 3 63
#";; INTERP: represents the spaceship's bullet item on the canvas"
0 0 24 29 1 #"\n"
0 0 17 3 16 #";; Deconstructor"
0 0 24 29 1 #"\n"
0 0 17 3 31 #";; s-bullet-fn: S-Bullet -> ???"
0 0 24 29 1 #"\n"
0 0 17 3 2 #"#;"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 11 #"s-bullet-fn"
0 0 24 3 1 #" "
0 0 14 3 8 #"s-bullet"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 14 3 3 #"..."
0 0 24 3 2 #" ("
0 0 14 3 6 #"posn-x"
0 0 24 3 1 #" "
0 0 14 3 8 #"s-bullet"
0 0 24 3 2 #") "
0 0 14 3 3 #"..."
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 14 3 3 #"..."
0 0 24 3 2 #" ("
0 0 14 3 6 #"posn-y"
0 0 24 3 1 #" "
0 0 14 3 8 #"s-bullet"
0 0 24 3 2 #") "
0 0 14 3 3 #"..."
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 23 #";; A I-Bullet is a Posn"
0 0 24 29 1 #"\n"
0 0 17 3 61
#";; INTERP: represents the invader's bullet item on the canvas"
0 0 24 29 1 #"\n"
0 0 17 3 16 #";; Deconstructor"
0 0 24 29 1 #"\n"
0 0 17 3 31 #";; i-bullet-fn: I-Bullet -> ???"
0 0 24 29 1 #"\n"
0 0 17 3 2 #"#;"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 11 #"i-bullet-fn"
0 0 24 3 1 #" "
0 0 14 3 8 #"i-bullet"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 14 3 3 #"..."
0 0 24 3 2 #" ("
0 0 14 3 6 #"posn-x"
0 0 24 3 1 #" "
0 0 14 3 8 #"i-bullet"
0 0 24 3 2 #") "
0 0 14 3 3 #"..."
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 14 3 3 #"..."
0 0 24 3 2 #" ("
0 0 14 3 6 #"posn-y"
0 0 24 3 1 #" "
0 0 14 3 8 #"i-bullet"
0 0 24 3 2 #") "
0 0 14 3 3 #"..."
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 22 #";; A Invader is a Posn"
0 0 24 29 1 #"\n"
0 0 17 3 52 #";; INTERP: represents the invader item on the canvas"
0 0 24 29 1 #"\n"
0 0 17 3 16 #";; Deconstructor"
0 0 24 29 1 #"\n"
0 0 17 3 29 #";; invader-fn: Invader -> ???"
0 0 24 29 1 #"\n"
0 0 17 3 2 #"#;"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 10 #"invader-fn"
0 0 24 3 1 #" "
0 0 14 3 7 #"invader"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 14 3 3 #"..."
0 0 24 3 2 #" ("
0 0 14 3 6 #"posn-x"
0 0 24 3 1 #" "
0 0 14 3 7 #"invader"
0 0 24 3 2 #") "
0 0 14 3 3 #"..."
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 14 3 3 #"..."
0 0 24 3 2 #" ("
0 0 14 3 6 #"posn-y"
0 0 24 3 1 #" "
0 0 14 3 7 #"invader"
0 0 24 3 2 #") "
0 0 14 3 3 #"..."
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 20 #";; A MShip is one of"
0 0 24 29 1 #"\n"
0 0 17 3 10 #";; - Empty"
0 0 24 29 1 #"\n"
0 0 17 3 9 #";; - Posn"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 56 #";; INTERP: represents the mother ship item on the canvas"
0 0 24 29 1 #"\n"
0 0 17 3 16 #";; Deconstructor"
0 0 24 29 1 #"\n"
0 0 17 3 25 #";; mship-fn: Mship -> ???"
0 0 24 29 1 #"\n"
0 0 17 3 2 #"#;"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 8 #"mship-fn"
0 0 24 3 1 #" "
0 0 14 3 5 #"mship"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"      [("
0 0 14 3 6 #"empty?"
0 0 24 3 1 #" "
0 0 14 3 5 #"mship"
0 0 24 3 2 #") "
0 0 14 3 3 #"..."
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ["
0 0 14 3 4 #"else"
0 0 24 3 1 #" "
0 0 14 3 3 #"..."
0 0 24 3 2 #" ("
0 0 14 3 6 #"posn-x"
0 0 24 3 1 #" "
0 0 14 3 5 #"mship"
0 0 24 3 2 #") "
0 0 14 3 3 #"..."
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 14 3 3 #"..."
0 0 24 3 2 #" ("
0 0 14 3 6 #"posn-y"
0 0 24 3 1 #" "
0 0 14 3 5 #"mship"
0 0 24 3 2 #") "
0 0 14 3 3 #"..."
0 0 24 3 3 #"]))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 21 #";; A LoF<X> is one of"
0 0 24 29 1 #"\n"
0 0 17 3 10 #";; - empty"
0 0 24 29 1 #"\n"
0 0 17 3 20 #";; - (cons X LoF<X>)"
0 0 24 29 1 #"\n"
0 0 17 3 33 #";; INTERP: represents a list of X"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 27 #";;;; Deconstructor Template"
0 0 24 29 1 #"\n"
0 0 17 3 33 #";; lof-fn: LoF<X> [X -> Y] -> ???"
0 0 24 29 1 #"\n"
0 0 17 3 2 #"#;"
0 0 24 3 2 #" ("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 6 #"lof-fn"
0 0 24 3 1 #" "
0 0 14 3 3 #"lof"
0 0 24 3 1 #" "
0 0 14 3 4 #"x-fn"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"       [("
0 0 14 3 6 #"empty?"
0 0 24 3 1 #" "
0 0 14 3 3 #"lof"
0 0 24 3 1 #")"
0 0 14 3 3 #"..."
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"       [("
0 0 14 3 5 #"cons?"
0 0 24 3 1 #" "
0 0 14 3 3 #"lof"
0 0 24 3 1 #")"
0 0 14 3 3 #"..."
0 0 24 3 1 #"("
0 0 14 3 4 #"x-fn"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 3 #"lof"
0 0 24 3 2 #"))"
0 0 14 3 3 #"..."
0 0 24 29 1 #"\n"
0 0 24 3 19 #"                   "
0 0 14 3 3 #"..."
0 0 24 3 1 #"("
0 0 14 3 6 #"lof-fn"
0 0 24 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 24 3 1 #" "
0 0 14 3 3 #"lof"
0 0 24 3 2 #"))"
0 0 14 3 3 #"..."
0 0 24 3 3 #"]))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 31 #";; A AllInvader is LoF<Invader>"
0 0 24 29 1 #"\n"
0 0 17 3 52 #";; INTERP: represents all the invaders in the canvas"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 40 #";; A All-I-Bullets(AIB) is LoF<I-Bullet>"
0 0 24 29 1 #"\n"
0 0 17 3 47 #";; INTERP: represents all the invader's bullets"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 40 #";; A All-S-Bullets(ASB) is LoF<S-Bullet>"
0 0 24 29 1 #"\n"
0 0 17 3 49 #";; INTERP: represents all the spaceship's bullets"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 24 #";; A Spaceship is a Posn"
0 0 24 29 1 #"\n"
0 0 17 3 54 #";; INTERP: represents the spaceship item on the canvas"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 16 #";; Deconstructor"
0 0 24 29 1 #"\n"
0 0 17 3 33 #";; spaceship-fn: Spaceship -> ???"
0 0 24 29 1 #"\n"
0 0 17 3 2 #"#;"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 12 #"spaceship-fn"
0 0 24 3 1 #" "
0 0 14 3 9 #"spaceship"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 14 3 3 #"..."
0 0 24 3 2 #" ("
0 0 14 3 6 #"posn-x"
0 0 24 3 1 #" "
0 0 14 3 9 #"spaceship"
0 0 24 3 2 #") "
0 0 14 3 3 #"..."
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 14 3 3 #"..."
0 0 24 3 2 #" ("
0 0 14 3 6 #"posn-y"
0 0 24 3 1 #" "
0 0 14 3 9 #"spaceship"
0 0 24 3 2 #") "
0 0 14 3 3 #"..."
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 13 #"define-struct"
0 0 24 3 1 #" "
0 0 14 3 5 #"world"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 5 #"mship"
0 0 24 3 1 #" "
0 0 14 3 10 #"allinvader"
0 0 24 3 1 #" "
0 0 14 3 9 #"spaceship"
0 0 24 3 1 #" "
0 0 14 3 3 #"aib"
0 0 24 3 1 #" "
0 0 14 3 3 #"asb"
0 0 24 3 1 #" "
0 0 14 3 5 #"score"
0 0 24 3 1 #" "
0 0 14 3 3 #"nol"
0 0 24 3 1 #" "
0 0 14 3 4 #"time"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 17 3 24 #";; Constructor Template:"
0 0 24 29 1 #"\n"
0 0 17 3 78
(
 #";; A World is a (make-world MShip AllInvader Spaceship AIB ASB Score"
 #" NOL time)"
) 0 0 24 29 1 #"\n"
0 0 17 3 70
(
 #";; INTERP: represents everything in the canvas, which has mother shi"
 #"p,"
) 0 0 24 29 1 #"\n"
0 0 17 3 79
(
 #";;         all invaders, spaceship, all invader bullets, all spacesh"
 #"ip bullets,"
) 0 0 24 29 1 #"\n"
0 0 17 3 72
(
 #";;         score, number of lives and number of ticks that have happ"
 #"ened"
) 0 0 24 29 1 #"\n"
0 0 17 3 16 #";; Deconstructor"
0 0 24 29 1 #"\n"
0 0 17 3 25 #";; world-fn: World -> ???"
0 0 24 29 1 #"\n"
0 0 17 3 2 #"#;"
0 0 24 3 2 #" ("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 8 #"world-fn"
0 0 24 3 1 #" "
0 0 14 3 5 #"world"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"     "
0 0 14 3 3 #"..."
0 0 24 3 1 #"("
0 0 14 3 8 #"mship-fn"
0 0 24 3 2 #" ("
0 0 14 3 11 #"world-mship"
0 0 24 3 1 #" "
0 0 14 3 5 #"world"
0 0 24 3 2 #"))"
0 0 14 3 3 #"..."
0 0 24 29 1 #"\n"
0 0 24 3 5 #"     "
0 0 14 3 3 #"..."
0 0 24 3 1 #"("
0 0 14 3 14 #"allinvaders-fn"
0 0 24 3 2 #" ("
0 0 14 3 16 #"world-allinvader"
0 0 24 3 1 #" "
0 0 14 3 5 #"world"
0 0 24 3 2 #"))"
0 0 14 3 3 #"..."
0 0 24 29 1 #"\n"
0 0 24 3 5 #"     "
0 0 14 3 3 #"..."
0 0 24 3 1 #"("
0 0 14 3 12 #"spaceship-fn"
0 0 24 3 2 #" ("
0 0 14 3 15 #"world-spaceship"
0 0 24 3 1 #" "
0 0 14 3 5 #"world"
0 0 24 3 2 #"))"
0 0 14 3 3 #"..."
0 0 24 29 1 #"\n"
0 0 24 3 5 #"     "
0 0 14 3 3 #"..."
0 0 24 3 1 #"("
0 0 14 3 6 #"aib-fn"
0 0 24 3 2 #" ("
0 0 14 3 9 #"world-aib"
0 0 24 3 1 #" "
0 0 14 3 5 #"world"
0 0 24 3 2 #"))"
0 0 14 3 3 #"..."
0 0 24 29 1 #"\n"
0 0 24 3 5 #"     "
0 0 14 3 3 #"..."
0 0 24 3 1 #"("
0 0 14 3 6 #"asb-fn"
0 0 24 3 2 #" ("
0 0 14 3 9 #"world-asb"
0 0 24 3 1 #" "
0 0 14 3 5 #"world"
0 0 24 3 2 #"))"
0 0 14 3 3 #"..."
0 0 24 29 1 #"\n"
0 0 24 3 5 #"     "
0 0 14 3 3 #"..."
0 0 24 3 1 #"("
0 0 14 3 8 #"score-fn"
0 0 24 3 2 #" ("
0 0 14 3 11 #"world-score"
0 0 24 3 1 #" "
0 0 14 3 5 #"world"
0 0 24 3 2 #"))"
0 0 14 3 3 #"..."
0 0 24 29 1 #"\n"
0 0 24 3 5 #"     "
0 0 14 3 3 #"..."
0 0 24 3 1 #"("
0 0 14 3 6 #"nol-fn"
0 0 24 3 2 #" ("
0 0 14 3 9 #"world-nol"
0 0 24 3 1 #" "
0 0 14 3 5 #"world"
0 0 24 3 2 #"))"
0 0 14 3 3 #"..."
0 0 24 29 1 #"\n"
0 0 24 3 5 #"     "
0 0 14 3 3 #"..."
0 0 24 3 1 #"("
0 0 14 3 7 #"time-fn"
0 0 24 3 2 #" ("
0 0 14 3 10 #"world-time"
0 0 24 3 1 #" "
0 0 14 3 5 #"world"
0 0 24 3 2 #"))"
0 0 14 3 3 #"..."
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 10 #"SCORE-INIT"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 8 #"NOL-INIT"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 2 #") "
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 5 #"WIDTH"
0 0 24 3 1 #" "
0 0 21 3 3 #"450"
0 0 24 3 2 #") "
0 0 17 3 24 #";; scene width in pixels"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 6 #"HEIGHT"
0 0 24 3 1 #" "
0 0 21 3 3 #"450"
0 0 24 3 2 #") "
0 0 17 3 25 #";; scene height in pixels"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 11 #"BULLET-SIDE"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 2 #") "
0 0 17 3 26 #";; bullet radius in pixels"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 12 #"INVADER-SIDE"
0 0 24 3 1 #" "
0 0 21 3 2 #"20"
0 0 24 3 2 #") "
0 0 17 3 25 #";; invader side in pixels"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 10 #"BACKGROUND"
0 0 24 3 2 #" ("
0 0 14 3 11 #"empty-scene"
0 0 24 3 1 #" "
0 0 14 3 5 #"WIDTH"
0 0 24 3 1 #" "
0 0 14 3 6 #"HEIGHT"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 13 #"INVADER-IMAGE"
0 0 24 3 2 #" ("
0 0 14 3 6 #"square"
0 0 24 3 1 #" "
0 0 14 3 12 #"INVADER-SIDE"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 5 #"solid"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 3 #"red"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 11 #"MSHIP-IMAGE"
0 0 24 3 2 #" ("
0 0 14 3 6 #"square"
0 0 24 3 1 #" "
0 0 14 3 12 #"INVADER-SIDE"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 5 #"solid"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 5 #"green"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 7 #"S-WIDTH"
0 0 24 3 1 #" "
0 0 21 3 2 #"30"
0 0 24 3 2 #") "
0 0 17 3 18 #";; spaceship width"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 8 #"S-HEIGHT"
0 0 24 3 1 #" "
0 0 21 3 2 #"16"
0 0 24 3 2 #") "
0 0 17 3 19 #";; spaceship height"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 15 #"SPACESHIP-IMAGE"
0 0 24 3 2 #" ("
0 0 14 3 9 #"rectangle"
0 0 24 3 1 #" "
0 0 14 3 7 #"S-WIDTH"
0 0 24 3 1 #" "
0 0 14 3 8 #"S-HEIGHT"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 5 #"solid"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 5 #"black"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 8 #"S-POSN-X"
0 0 24 3 1 #" "
0 0 21 3 3 #"220"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 8 #"S-POSN-Y"
0 0 24 3 1 #" "
0 0 21 3 3 #"420"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 14 #"SPACESHIP-INIT"
0 0 24 3 2 #" ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 14 3 8 #"S-POSN-X"
0 0 24 3 1 #" "
0 0 14 3 8 #"S-POSN-Y"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 14 #"S-Bullet-IMAGE"
0 0 24 3 2 #" ("
0 0 14 3 6 #"circle"
0 0 24 3 1 #" "
0 0 14 3 11 #"BULLET-SIDE"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 5 #"solid"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 5 #"black"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 14 #"I-Bullet-IMAGE"
0 0 24 3 2 #" ("
0 0 14 3 6 #"circle"
0 0 24 3 1 #" "
0 0 14 3 11 #"BULLET-SIDE"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 5 #"solid"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 3 #"red"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 6 #"ROW0-Y"
0 0 24 3 1 #" "
0 0 21 3 2 #"40"
0 0 24 3 2 #") "
0 0 17 3 31 #";; the posn-y of the mothership"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 6 #"ROW1-Y"
0 0 24 3 1 #" "
0 0 21 3 2 #"70"
0 0 24 3 2 #") "
0 0 17 3 42 #";; the posn-y of the first ROW of invaders"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 6 #"ROW2-Y"
0 0 24 3 1 #" "
0 0 21 3 3 #"100"
0 0 24 3 2 #") "
0 0 17 3 43 #";; the posn-y of the second ROW of invaders"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 6 #"ROW3-Y"
0 0 24 3 1 #" "
0 0 21 3 3 #"130"
0 0 24 3 2 #") "
0 0 17 3 42 #";; the posn-y of the third ROW of invaders"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 6 #"ROW4-Y"
0 0 24 3 1 #" "
0 0 21 3 3 #"160"
0 0 24 3 2 #") "
0 0 17 3 43 #";; the posn-y of the fourth ROW of invaders"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 6 #"COL1-X"
0 0 24 3 1 #" "
0 0 21 3 2 #"40"
0 0 24 3 2 #") "
0 0 17 3 46 #";; the posn-x of the first COLLUMN of invaders"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 6 #"COL2-X"
0 0 24 3 1 #" "
0 0 21 3 2 #"80"
0 0 24 3 2 #") "
0 0 17 3 47 #";; the posn-x of the second COLLUMN of invaders"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 6 #"COL3-X"
0 0 24 3 1 #" "
0 0 21 3 3 #"120"
0 0 24 3 2 #") "
0 0 17 3 46 #";; the posn-x of the third COLLUMN of invaders"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 6 #"COL4-X"
0 0 24 3 1 #" "
0 0 21 3 3 #"160"
0 0 24 3 2 #") "
0 0 17 3 44 #";; the posn-x of the 4th COLLUMN of invaders"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 6 #"COL5-X"
0 0 24 3 1 #" "
0 0 21 3 3 #"200"
0 0 24 3 2 #") "
0 0 17 3 44 #";; the posn-x of the 5th COLLUMN of invaders"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 6 #"COL6-X"
0 0 24 3 1 #" "
0 0 21 3 3 #"240"
0 0 24 3 2 #") "
0 0 17 3 44 #";; the posn-x of the 6th COLLUMN of invaders"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 6 #"COL7-X"
0 0 24 3 1 #" "
0 0 21 3 3 #"280"
0 0 24 3 2 #") "
0 0 17 3 44 #";; the posn-x of the 7th COLLUMN of invaders"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 6 #"COL8-X"
0 0 24 3 1 #" "
0 0 21 3 3 #"320"
0 0 24 3 2 #") "
0 0 17 3 44 #";; the posn-x of the 8th COLLUMN of invaders"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 6 #"COL9-X"
0 0 24 3 1 #" "
0 0 21 3 3 #"360"
0 0 24 3 2 #") "
0 0 17 3 44 #";; the posn-x of the 9th COLLUMN of invaders"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 7 #"COL10-X"
0 0 24 3 1 #" "
0 0 21 3 3 #"400"
0 0 24 3 2 #") "
0 0 17 3 45 #";; the posn-x of the 10th COLLUMN of invaders"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 10 #"MSHIP-INIT"
0 0 24 3 2 #" ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 14 3 6 #"ROW0-Y"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 4 #"LEFT"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"left"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 5 #"RIGHT"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 5 #"right"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 11 #"aib-example"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 21 3 3 #"100"
0 0 24 3 1 #" "
0 0 21 3 3 #"100"
0 0 24 3 3 #") ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 21 3 3 #"150"
0 0 24 3 1 #" "
0 0 21 3 3 #"120"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 28 #"                           ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 21 3 3 #"180"
0 0 24 3 1 #" "
0 0 21 3 3 #"110"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 11 #"asb-example"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 21 3 3 #"300"
0 0 24 3 1 #" "
0 0 21 3 3 #"200"
0 0 24 3 3 #") ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 21 3 3 #"250"
0 0 24 3 1 #" "
0 0 21 3 3 #"170"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 28 #"                           ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 21 3 3 #"270"
0 0 24 3 1 #" "
0 0 21 3 3 #"180"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 15 #"invader-example"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 21 3 2 #"40"
0 0 24 3 1 #" "
0 0 21 3 3 #"110"
0 0 24 3 3 #") ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 21 3 2 #"80"
0 0 24 3 1 #" "
0 0 21 3 3 #"110"
0 0 24 3 3 #") ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 21 3 3 #"120"
0 0 24 3 1 #" "
0 0 21 3 3 #"110"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 21 3 3 #"160"
0 0 24 3 1 #" "
0 0 21 3 3 #"110"
0 0 24 3 3 #") ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 21 3 3 #"200"
0 0 24 3 1 #" "
0 0 21 3 3 #"110"
0 0 24 3 3 #") ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 21 3 3 #"240"
0 0 24 3 1 #" "
0 0 21 3 3 #"110"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 21 3 3 #"280"
0 0 24 3 1 #" "
0 0 21 3 3 #"110"
0 0 24 3 3 #") ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 21 3 3 #"320"
0 0 24 3 1 #" "
0 0 21 3 3 #"110"
0 0 24 3 3 #") ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 21 3 3 #"360"
0 0 24 3 1 #" "
0 0 21 3 3 #"110"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 3 #"All"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 14 3 6 #"COL1-X"
0 0 24 3 1 #" "
0 0 14 3 6 #"ROW1-Y"
0 0 24 3 3 #") ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 14 3 6 #"COL2-X"
0 0 24 3 1 #" "
0 0 14 3 6 #"ROW1-Y"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 14 3 6 #"COL3-X"
0 0 24 3 1 #" "
0 0 14 3 6 #"ROW1-Y"
0 0 24 3 3 #") ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 14 3 6 #"COL4-X"
0 0 24 3 1 #" "
0 0 14 3 6 #"ROW1-Y"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 14 3 6 #"COL5-X"
0 0 24 3 1 #" "
0 0 14 3 6 #"ROW1-Y"
0 0 24 3 3 #") ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 14 3 6 #"COL6-X"
0 0 24 3 1 #" "
0 0 14 3 6 #"ROW1-Y"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 14 3 6 #"COL7-X"
0 0 24 3 1 #" "
0 0 14 3 6 #"ROW1-Y"
0 0 24 3 3 #") ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 14 3 6 #"COL8-X"
0 0 24 3 1 #" "
0 0 14 3 6 #"ROW1-Y"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 14 3 6 #"COL9-X"
0 0 24 3 1 #" "
0 0 14 3 6 #"ROW1-Y"
0 0 24 3 3 #") ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 14 3 7 #"COL10-X"
0 0 24 3 1 #" "
0 0 14 3 6 #"ROW1-Y"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 14 3 6 #"COL1-X"
0 0 24 3 1 #" "
0 0 14 3 6 #"ROW2-Y"
0 0 24 3 3 #") ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 14 3 6 #"COL2-X"
0 0 24 3 1 #" "
0 0 14 3 6 #"ROW2-Y"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 14 3 6 #"COL3-X"
0 0 24 3 1 #" "
0 0 14 3 6 #"ROW2-Y"
0 0 24 3 3 #") ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 14 3 6 #"COL4-X"
0 0 24 3 1 #" "
0 0 14 3 6 #"ROW2-Y"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 14 3 6 #"COL5-X"
0 0 24 3 1 #" "
0 0 14 3 6 #"ROW2-Y"
0 0 24 3 3 #") ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 14 3 6 #"COL6-X"
0 0 24 3 1 #" "
0 0 14 3 6 #"ROW2-Y"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 14 3 6 #"COL7-X"
0 0 24 3 1 #" "
0 0 14 3 6 #"ROW2-Y"
0 0 24 3 3 #") ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 14 3 6 #"COL8-X"
0 0 24 3 1 #" "
0 0 14 3 6 #"ROW2-Y"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 14 3 6 #"COL9-X"
0 0 24 3 1 #" "
0 0 14 3 6 #"ROW2-Y"
0 0 24 3 3 #") ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 14 3 7 #"COL10-X"
0 0 24 3 1 #" "
0 0 14 3 6 #"ROW2-Y"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 14 3 6 #"COL1-X"
0 0 24 3 1 #" "
0 0 14 3 6 #"ROW3-Y"
0 0 24 3 3 #") ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 14 3 6 #"COL2-X"
0 0 24 3 1 #" "
0 0 14 3 6 #"ROW3-Y"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 14 3 6 #"COL3-X"
0 0 24 3 1 #" "
0 0 14 3 6 #"ROW3-Y"
0 0 24 3 3 #") ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 14 3 6 #"COL4-X"
0 0 24 3 1 #" "
0 0 14 3 6 #"ROW3-Y"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 14 3 6 #"COL5-X"
0 0 24 3 1 #" "
0 0 14 3 6 #"ROW3-Y"
0 0 24 3 3 #") ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 14 3 6 #"COL6-X"
0 0 24 3 1 #" "
0 0 14 3 6 #"ROW3-Y"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 14 3 6 #"COL7-X"
0 0 24 3 1 #" "
0 0 14 3 6 #"ROW3-Y"
0 0 24 3 3 #") ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 14 3 6 #"COL8-X"
0 0 24 3 1 #" "
0 0 14 3 6 #"ROW3-Y"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 14 3 6 #"COL9-X"
0 0 24 3 1 #" "
0 0 14 3 6 #"ROW3-Y"
0 0 24 3 3 #") ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 14 3 7 #"COL10-X"
0 0 24 3 1 #" "
0 0 14 3 6 #"ROW3-Y"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 14 3 6 #"COL1-X"
0 0 24 3 1 #" "
0 0 14 3 6 #"ROW4-Y"
0 0 24 3 3 #") ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 14 3 6 #"COL2-X"
0 0 24 3 1 #" "
0 0 14 3 6 #"ROW4-Y"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 14 3 6 #"COL3-X"
0 0 24 3 1 #" "
0 0 14 3 6 #"ROW4-Y"
0 0 24 3 3 #") ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 14 3 6 #"COL4-X"
0 0 24 3 1 #" "
0 0 14 3 6 #"ROW4-Y"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 14 3 6 #"COL5-X"
0 0 24 3 1 #" "
0 0 14 3 6 #"ROW4-Y"
0 0 24 3 3 #") ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 14 3 6 #"COL6-X"
0 0 24 3 1 #" "
0 0 14 3 6 #"ROW4-Y"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 14 3 6 #"COL7-X"
0 0 24 3 1 #" "
0 0 14 3 6 #"ROW4-Y"
0 0 24 3 3 #") ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 14 3 6 #"COL8-X"
0 0 24 3 1 #" "
0 0 14 3 6 #"ROW4-Y"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 14 3 6 #"COL9-X"
0 0 24 3 1 #" "
0 0 14 3 6 #"ROW4-Y"
0 0 24 3 3 #") ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 14 3 7 #"COL10-X"
0 0 24 3 1 #" "
0 0 14 3 6 #"ROW4-Y"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 25 #";; A Direction is one of "
0 0 24 29 1 #"\n"
0 0 17 3 9 #";; - LEFT"
0 0 24 29 1 #"\n"
0 0 17 3 10 #";; - RIGHT"
0 0 24 29 1 #"\n"
0 0 17 3 48 #";; INTERP: represents the spaceship's direction "
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 16 #";; Deconstructor"
0 0 24 29 1 #"\n"
0 0 17 3 33 #";; direction-fn: Direction -> ???"
0 0 24 29 1 #"\n"
0 0 17 3 2 #"#;"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 12 #"direction-fn"
0 0 24 3 1 #" "
0 0 14 3 9 #"direction"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"      [("
0 0 14 3 8 #"symbol=?"
0 0 24 3 1 #" "
0 0 14 3 4 #"LEFT"
0 0 24 3 1 #" "
0 0 14 3 9 #"direction"
0 0 24 3 2 #") "
0 0 14 3 3 #"..."
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"      [("
0 0 14 3 8 #"symbol=?"
0 0 24 3 1 #" "
0 0 14 3 5 #"RIGHT"
0 0 24 3 1 #" "
0 0 14 3 9 #"direction"
0 0 24 3 2 #") "
0 0 14 3 3 #"..."
0 0 24 3 3 #"]))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 14 #";;;; Signature"
0 0 24 29 1 #"\n"
0 0 17 3 46 #";; spaceship-hit-side?: Spaceship -> Spaceship"
0 0 24 29 1 #"\n"
0 0 17 3 12 #";;;; Purpose"
0 0 24 29 1 #"\n"
0 0 17 3 21 #";; GIVEN: a spaceship"
0 0 24 29 1 #"\n"
0 0 17 3 72
(
 #";; RETURN: the updated spaceship: if the spaceship hit the left or r"
 #"ight"
) 0 0 24 29 1 #"\n"
0 0 17 3 64
#";;         side of the canvas, stop it at the left or right side"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 13 #";;;; Examples"
0 0 24 29 1 #"\n"
0 0 17 3 77
(
 #";; (spaceship-hit-side? (make-posn 438 S-POSN-Y)) => (make-posn 435 "
 #"S-POSN-Y)"
) 0 0 24 29 1 #"\n"
0 0 17 3 75
(
 #";; (spaceship-hit-side? (make-posn 13 S-POSN-Y)) => (make-posn 15 S-"
 #"POSN-Y)"
) 0 0 24 29 1 #"\n"
0 0 17 3 77
(
 #";; (spaceship-hit-side? (make-posn 200 S-POSN-Y)) => (make-posn 200 "
 #"S-POSN-Y)"
) 0 0 24 29 1 #"\n"
0 0 17 3 77
(
 #";; (spaceship-hit-side? (make-posn 434 S-POSN-Y)) => (make-posn 434 "
 #"S-POSN-Y)"
) 0 0 24 29 1 #"\n"
0 0 17 3 75
(
 #";; (spaceship-hit-side? (make-posn 17 S-POSN-Y)) => (make-posn 17 S-"
 #"POSN-Y)"
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 24 #";;;; Function Definition"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 19 #"spaceship-hit-side?"
0 0 24 3 1 #" "
0 0 14 3 9 #"spaceship"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [("
0 0 14 3 1 #">"
0 0 24 3 2 #" ("
0 0 14 3 6 #"posn-x"
0 0 24 3 1 #" "
0 0 14 3 9 #"spaceship"
0 0 24 3 3 #") ("
0 0 14 3 1 #"-"
0 0 24 3 1 #" "
0 0 14 3 5 #"WIDTH"
0 0 24 3 2 #" ("
0 0 14 3 1 #"/"
0 0 24 3 1 #" "
0 0 14 3 7 #"S-WIDTH"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 14 3 9 #"make-posn"
0 0 24 3 2 #" ("
0 0 14 3 1 #"-"
0 0 24 3 1 #" "
0 0 14 3 5 #"WIDTH"
0 0 24 3 2 #" ("
0 0 14 3 1 #"/"
0 0 24 3 1 #" "
0 0 14 3 7 #"S-WIDTH"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 4 #")) ("
0 0 14 3 6 #"posn-y"
0 0 24 3 1 #" "
0 0 14 3 9 #"spaceship"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [("
0 0 14 3 1 #"<"
0 0 24 3 2 #" ("
0 0 14 3 6 #"posn-x"
0 0 24 3 1 #" "
0 0 14 3 9 #"spaceship"
0 0 24 3 3 #") ("
0 0 14 3 1 #"/"
0 0 24 3 1 #" "
0 0 14 3 7 #"S-WIDTH"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 14 3 9 #"make-posn"
0 0 24 3 2 #" ("
0 0 14 3 1 #"/"
0 0 24 3 1 #" "
0 0 14 3 7 #"S-WIDTH"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 3 #") ("
0 0 14 3 6 #"posn-y"
0 0 24 3 1 #" "
0 0 14 3 9 #"spaceship"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ["
0 0 14 3 4 #"else"
0 0 24 3 1 #" "
0 0 14 3 9 #"spaceship"
0 0 24 3 3 #"]))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 10 #";;;; Tests"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 19 #"spaceship-hit-side?"
0 0 24 3 2 #" ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 21 3 3 #"438"
0 0 24 3 1 #" "
0 0 14 3 8 #"S-POSN-Y"
0 0 24 3 3 #")) "
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 21 3 3 #"435"
0 0 24 3 1 #" "
0 0 14 3 8 #"S-POSN-Y"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 19 #"spaceship-hit-side?"
0 0 24 3 2 #" ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 21 3 2 #"13"
0 0 24 3 1 #" "
0 0 14 3 8 #"S-POSN-Y"
0 0 24 3 3 #")) "
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 21 3 2 #"15"
0 0 24 3 1 #" "
0 0 14 3 8 #"S-POSN-Y"
0 0 24 3 3 #")) "
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 19 #"spaceship-hit-side?"
0 0 24 3 2 #" ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 21 3 3 #"200"
0 0 24 3 1 #" "
0 0 14 3 8 #"S-POSN-Y"
0 0 24 3 3 #")) "
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 21 3 3 #"200"
0 0 24 3 1 #" "
0 0 14 3 8 #"S-POSN-Y"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 19 #"spaceship-hit-side?"
0 0 24 3 2 #" ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 21 3 3 #"434"
0 0 24 3 1 #" "
0 0 14 3 8 #"S-POSN-Y"
0 0 24 3 3 #")) "
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 21 3 3 #"434"
0 0 24 3 1 #" "
0 0 14 3 8 #"S-POSN-Y"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 19 #"spaceship-hit-side?"
0 0 24 3 2 #" ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 21 3 2 #"17"
0 0 24 3 1 #" "
0 0 14 3 8 #"S-POSN-Y"
0 0 24 3 3 #")) "
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 21 3 2 #"17"
0 0 24 3 1 #" "
0 0 14 3 8 #"S-POSN-Y"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 14 #";;;; Signature"
0 0 24 29 1 #"\n"
0 0 17 3 51 #";; spaceship-move: Spaceship Direction -> Spaceship"
0 0 24 29 1 #"\n"
0 0 17 3 12 #";;;; Purpose"
0 0 24 29 1 #"\n"
0 0 17 3 37 #";; GIVEN: a spaceship and a direction"
0 0 24 29 1 #"\n"
0 0 17 3 53 #";; RETURN: the updated spaceship after moving 6px the"
0 0 24 29 1 #"\n"
0 0 17 3 32 #";;         appropriate direction"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 13 #";;;; Examples"
0 0 24 29 1 #"\n"
0 0 17 3 63
#";; (spaceship-move (make-posn 50 50) LEFT) => (make-posn 40 50)"
0 0 24 29 1 #"\n"
0 0 17 3 68
#";; (spaceship-move (make-posn 100 100) RIGHT) => (make-posn 110 100)"
0 0 24 29 1 #"\n"
0 0 17 3 68
#";; (spaceship-move (make-posn 430 380) RIGHT) => (make-posn 435 380)"
0 0 24 29 1 #"\n"
0 0 17 3 65
#";; (spaceship-move (make-posn 10 380) LEFT) => (make-posn 15 380)"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 24 #";;;; Function Definition"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 14 #"spaceship-move"
0 0 24 3 1 #" "
0 0 14 3 9 #"spaceship"
0 0 24 3 1 #" "
0 0 14 3 3 #"dir"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [("
0 0 14 3 8 #"symbol=?"
0 0 24 3 1 #" "
0 0 14 3 4 #"LEFT"
0 0 24 3 1 #" "
0 0 14 3 3 #"dir"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 14 3 19 #"spaceship-hit-side?"
0 0 24 3 2 #" ("
0 0 14 3 9 #"make-posn"
0 0 24 3 2 #" ("
0 0 14 3 1 #"-"
0 0 24 3 2 #" ("
0 0 14 3 6 #"posn-x"
0 0 24 3 1 #" "
0 0 14 3 9 #"spaceship"
0 0 24 3 2 #") "
0 0 21 3 2 #"10"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 37 #"                                    ("
0 0 14 3 6 #"posn-y"
0 0 24 3 1 #" "
0 0 14 3 9 #"spaceship"
0 0 24 3 4 #")))]"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [("
0 0 14 3 8 #"symbol=?"
0 0 24 3 1 #" "
0 0 14 3 5 #"RIGHT"
0 0 24 3 1 #" "
0 0 14 3 3 #"dir"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 14 3 19 #"spaceship-hit-side?"
0 0 24 3 2 #" ("
0 0 14 3 9 #"make-posn"
0 0 24 3 2 #" ("
0 0 14 3 1 #"+"
0 0 24 3 2 #" ("
0 0 14 3 6 #"posn-x"
0 0 24 3 1 #" "
0 0 14 3 9 #"spaceship"
0 0 24 3 2 #") "
0 0 21 3 2 #"10"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 38 #"                                     ("
0 0 14 3 6 #"posn-y"
0 0 24 3 1 #" "
0 0 14 3 9 #"spaceship"
0 0 24 3 6 #")))]))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 10 #";;;; Tests"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 14 #"spaceship-move"
0 0 24 3 2 #" ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 21 3 2 #"50"
0 0 24 3 1 #" "
0 0 21 3 2 #"50"
0 0 24 3 2 #") "
0 0 14 3 4 #"LEFT"
0 0 24 3 3 #") ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 21 3 2 #"40"
0 0 24 3 1 #" "
0 0 21 3 2 #"50"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 14 #"spaceship-move"
0 0 24 3 2 #" ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 21 3 3 #"100"
0 0 24 3 1 #" "
0 0 21 3 3 #"100"
0 0 24 3 2 #") "
0 0 14 3 5 #"RIGHT"
0 0 24 3 3 #") ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 21 3 3 #"110"
0 0 24 3 1 #" "
0 0 21 3 3 #"100"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 14 #"spaceship-move"
0 0 24 3 2 #" ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 21 3 3 #"430"
0 0 24 3 1 #" "
0 0 21 3 3 #"380"
0 0 24 3 2 #") "
0 0 14 3 5 #"RIGHT"
0 0 24 3 3 #") ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 21 3 3 #"435"
0 0 24 3 1 #" "
0 0 21 3 3 #"380"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 14 #"spaceship-move"
0 0 24 3 2 #" ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 21 3 2 #"10"
0 0 24 3 1 #" "
0 0 21 3 3 #"380"
0 0 24 3 2 #") "
0 0 14 3 4 #"LEFT"
0 0 24 3 3 #") ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 21 3 2 #"15"
0 0 24 3 1 #" "
0 0 21 3 3 #"380"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 14 #";;;; Signature"
0 0 24 29 1 #"\n"
0 0 17 3 34 #";; lof-length: LoF<X> -> NonNegInt"
0 0 24 29 1 #"\n"
0 0 17 3 12 #";;;; Purpose"
0 0 24 29 1 #"\n"
0 0 17 3 21 #";; GIVEN: a list of X"
0 0 24 29 1 #"\n"
0 0 17 3 38 #";; RETURN: the number of X in the list"
0 0 24 29 1 #"\n"
0 0 17 3 13 #";;;; Examples"
0 0 24 29 1 #"\n"
0 0 17 3 32 #";; (lof-length aib-example) => 3"
0 0 24 29 1 #"\n"
0 0 17 3 25 #";; (lof-length All) => 40"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 24 #";;;; Function Definition"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 10 #"lof-length"
0 0 24 3 1 #" "
0 0 14 3 3 #"lof"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [("
0 0 14 3 6 #"empty?"
0 0 24 3 1 #" "
0 0 14 3 3 #"lof"
0 0 24 3 2 #") "
0 0 21 3 1 #"0"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ["
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 2 #" ("
0 0 14 3 10 #"lof-length"
0 0 24 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 24 3 1 #" "
0 0 14 3 3 #"lof"
0 0 24 3 6 #")))]))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 10 #";;;; Tests"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 10 #"lof-length"
0 0 24 3 1 #" "
0 0 14 3 11 #"aib-example"
0 0 24 3 2 #") "
0 0 21 3 1 #"3"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 10 #"lof-length"
0 0 24 3 1 #" "
0 0 14 3 3 #"All"
0 0 24 3 2 #") "
0 0 21 3 2 #"40"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 14 #";;;; Signature"
0 0 24 29 1 #"\n"
0 0 17 3 39 #";; spaceship-fire: Spaceship ASB -> ASB"
0 0 24 29 1 #"\n"
0 0 17 3 12 #";;;; Purpose"
0 0 24 29 1 #"\n"
0 0 17 3 53 #";; GIVEN: a spaceship and a list of spaceship bullets"
0 0 24 29 1 #"\n"
0 0 17 3 73
(
 #";; RETURN: an updated list of spaceship bullets with one more bullet"
 #" from"
) 0 0 24 29 1 #"\n"
0 0 17 3 73
(
 #";;         the spaceship, the maxium number of bullets in the canvas"
 #" is 3"
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 13 #";;;; Examples"
0 0 24 29 1 #"\n"
0 0 17 3 38 #";; (spaceship-fire (make-posn 200 380)"
0 0 24 29 1 #"\n"
0 0 17 3 64
#";;                (list (make-posn 300 300) (make-posn 270 270))"
0 0 24 29 1 #"\n"
0 0 17 3 71
(
 #";; => (list (make-posn 300 300) (make-posn 270 270)(make-posn 200 37"
 #"8))"
) 0 0 24 29 1 #"\n"
0 0 17 3 38 #";; (spaceship-fire (make-posn 300 380)"
0 0 24 29 1 #"\n"
0 0 17 3 74
(
 #";;                (list (make-posn 300 300) (make-posn 270 270) (mak"
 #"e-posn"
) 0 0 24 29 1 #"\n"
0 0 17 3 29 #";;                 100 100)))"
0 0 24 29 1 #"\n"
0 0 17 3 62
#";; => (list (make-posn 300 300) (make-posn 270 270) (make-posn"
0 0 24 29 1 #"\n"
0 0 17 3 28 #";;                 100 100))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 25 #";;;; Function Definitions"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 14 #"spaceship-fire"
0 0 24 3 1 #" "
0 0 14 3 9 #"spaceship"
0 0 24 3 1 #" "
0 0 14 3 3 #"asb"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [("
0 0 14 3 6 #"empty?"
0 0 24 3 1 #" "
0 0 14 3 3 #"asb"
0 0 24 3 3 #") ("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 9 #"make-posn"
0 0 24 3 2 #" ("
0 0 14 3 6 #"posn-x"
0 0 24 3 1 #" "
0 0 14 3 9 #"spaceship"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 31 #"                              ("
0 0 14 3 1 #"-"
0 0 24 3 2 #" ("
0 0 14 3 6 #"posn-y"
0 0 24 3 1 #" "
0 0 14 3 9 #"spaceship"
0 0 24 3 2 #") "
0 0 21 3 1 #"2"
0 0 24 3 3 #")) "
0 0 14 3 5 #"empty"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [("
0 0 14 3 3 #"and"
0 0 24 3 2 #" ("
0 0 14 3 5 #"cons?"
0 0 24 3 1 #" "
0 0 14 3 3 #"asb"
0 0 24 3 3 #") ("
0 0 14 3 1 #"<"
0 0 24 3 2 #" ("
0 0 14 3 10 #"lof-length"
0 0 24 3 1 #" "
0 0 14 3 3 #"asb"
0 0 24 3 2 #") "
0 0 21 3 1 #"3"
0 0 24 3 3 #")) "
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 3 #"asb"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 25 #"                        ("
0 0 14 3 14 #"spaceship-fire"
0 0 24 3 1 #" "
0 0 14 3 9 #"spaceship"
0 0 24 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 24 3 1 #" "
0 0 14 3 3 #"asb"
0 0 24 3 4 #")))]"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ["
0 0 14 3 4 #"else"
0 0 24 3 1 #" "
0 0 14 3 3 #"asb"
0 0 24 3 3 #"]))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 10 #";;;; Tests"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 14 #"spaceship-fire"
0 0 24 3 2 #" ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 21 3 3 #"200"
0 0 24 3 1 #" "
0 0 21 3 3 #"380"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"               ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 21 3 3 #"300"
0 0 24 3 1 #" "
0 0 21 3 3 #"300"
0 0 24 3 3 #") ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 21 3 3 #"270"
0 0 24 3 1 #" "
0 0 21 3 3 #"270"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 21 3 3 #"300"
0 0 24 3 1 #" "
0 0 21 3 3 #"300"
0 0 24 3 3 #") ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 21 3 3 #"270"
0 0 24 3 1 #" "
0 0 21 3 3 #"270"
0 0 24 3 2 #")("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 21 3 3 #"200"
0 0 24 3 1 #" "
0 0 21 3 3 #"378"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 14 #"spaceship-fire"
0 0 24 3 2 #" ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 21 3 3 #"300"
0 0 24 3 1 #" "
0 0 21 3 3 #"380"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 21 3 3 #"300"
0 0 24 3 1 #" "
0 0 21 3 3 #"300"
0 0 24 3 3 #") ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 21 3 3 #"270"
0 0 24 3 1 #" "
0 0 21 3 3 #"270"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 23 #"                      ("
0 0 14 3 9 #"make-posn"
0 0 24 3 2 #"  "
0 0 21 3 3 #"100"
0 0 24 3 1 #" "
0 0 21 3 3 #"100"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 21 3 3 #"300"
0 0 24 3 1 #" "
0 0 21 3 3 #"300"
0 0 24 3 3 #") ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 21 3 3 #"270"
0 0 24 3 1 #" "
0 0 21 3 3 #"270"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 23 #"                      ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 21 3 3 #"100"
0 0 24 3 1 #" "
0 0 21 3 3 #"100"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 14 #";;;; Signature"
0 0 24 29 1 #"\n"
0 0 17 3 58
#";; spaceship-hit-by-bullet?: Spaceship I-Bullet -> Boolean"
0 0 24 29 1 #"\n"
0 0 17 3 12 #";;;; Purpose"
0 0 24 29 1 #"\n"
0 0 17 3 42 #";; GIVEN: a spaceship and a invader bullet"
0 0 24 29 1 #"\n"
0 0 17 3 79
(
 #";; RETURN: true if the invader bullet overlap the spaceship and fals"
 #"e otherwise"
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 13 #";;;; Examples"
0 0 24 29 1 #"\n"
0 0 17 3 29 #";; (spaceship-hit-by-ibullet?"
0 0 24 29 1 #"\n"
0 0 17 3 56 #";;    (make-posn 200 380) (make-posn 183 377)) => #false"
0 0 24 29 1 #"\n"
0 0 17 3 29 #";; (spaceship-hit-by-ibullet?"
0 0 24 29 1 #"\n"
0 0 17 3 55 #";;    (make-posn 200 380) (make-posn 184 377)) => #true"
0 0 24 29 1 #"\n"
0 0 17 3 29 #";; (spaceship-hit-by-ibullet?"
0 0 24 29 1 #"\n"
0 0 17 3 55 #";;    (make-posn 150 380) (make-posn 147 371)) => #true"
0 0 24 29 1 #"\n"
0 0 17 3 29 #";; (spaceship-hit-by-ibullet?"
0 0 24 29 1 #"\n"
0 0 17 3 56 #";;    (make-posn 200 380) (make-posn 210 370)) => #false"
0 0 24 29 1 #"\n"
0 0 17 3 29 #";; (spaceship-hit-by-ibullet?"
0 0 24 29 1 #"\n"
0 0 17 3 56 #";;    (make-posn 200 380) (make-posn 210 390)) => #false"
0 0 24 29 1 #"\n"
0 0 17 3 29 #";; (spaceship-hit-by-ibullet?"
0 0 24 29 1 #"\n"
0 0 17 3 55 #";;    (make-posn 200 380) (make-posn 210 389)) => #true"
0 0 24 29 1 #"\n"
0 0 17 3 29 #";; (spaceship-hit-by-ibullet?"
0 0 24 29 1 #"\n"
0 0 17 3 56 #";;    (make-posn 150 380) (make-posn 167 378)) => #false"
0 0 24 29 1 #"\n"
0 0 17 3 29 #";; (spaceship-hit-by-ibullet?"
0 0 24 29 1 #"\n"
0 0 17 3 55 #";;    (make-posn 150 380) (make-posn 166 378)) => #true"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 24 #";;;; Function Definition"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 25 #"spaceship-hit-by-ibullet?"
0 0 24 3 1 #" "
0 0 14 3 9 #"spaceship"
0 0 24 3 1 #" "
0 0 14 3 7 #"ibullet"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [("
0 0 14 3 2 #"<="
0 0 24 3 2 #" ("
0 0 14 3 6 #"posn-x"
0 0 24 3 1 #" "
0 0 14 3 7 #"ibullet"
0 0 24 3 3 #") ("
0 0 14 3 1 #"-"
0 0 24 3 2 #" ("
0 0 14 3 6 #"posn-x"
0 0 24 3 1 #" "
0 0 14 3 9 #"spaceship"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 30 #"                             ("
0 0 14 3 1 #"+"
0 0 24 3 2 #" ("
0 0 14 3 1 #"/"
0 0 24 3 1 #" "
0 0 14 3 7 #"S-WIDTH"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 2 #") "
0 0 14 3 11 #"BULLET-SIDE"
0 0 24 3 4 #"))) "
0 0 21 3 6 #"#false"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [("
0 0 14 3 2 #">="
0 0 24 3 2 #" ("
0 0 14 3 6 #"posn-x"
0 0 24 3 1 #" "
0 0 14 3 7 #"ibullet"
0 0 24 3 3 #") ("
0 0 14 3 1 #"+"
0 0 24 3 2 #" ("
0 0 14 3 6 #"posn-x"
0 0 24 3 1 #" "
0 0 14 3 9 #"spaceship"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 30 #"                             ("
0 0 14 3 1 #"+"
0 0 24 3 2 #" ("
0 0 14 3 1 #"/"
0 0 24 3 1 #" "
0 0 14 3 7 #"S-WIDTH"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 2 #") "
0 0 14 3 11 #"BULLET-SIDE"
0 0 24 3 4 #"))) "
0 0 21 3 6 #"#false"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [("
0 0 14 3 2 #"<="
0 0 24 3 2 #" ("
0 0 14 3 6 #"posn-y"
0 0 24 3 1 #" "
0 0 14 3 7 #"ibullet"
0 0 24 3 3 #") ("
0 0 14 3 1 #"-"
0 0 24 3 2 #" ("
0 0 14 3 6 #"posn-y"
0 0 24 3 1 #" "
0 0 14 3 9 #"spaceship"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 30 #"                             ("
0 0 14 3 1 #"+"
0 0 24 3 2 #" ("
0 0 14 3 1 #"/"
0 0 24 3 1 #" "
0 0 14 3 8 #"S-HEIGHT"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 2 #") "
0 0 14 3 11 #"BULLET-SIDE"
0 0 24 3 4 #"))) "
0 0 21 3 6 #"#false"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [("
0 0 14 3 2 #">="
0 0 24 3 2 #" ("
0 0 14 3 6 #"posn-y"
0 0 24 3 1 #" "
0 0 14 3 7 #"ibullet"
0 0 24 3 3 #") ("
0 0 14 3 1 #"+"
0 0 24 3 2 #" ("
0 0 14 3 6 #"posn-y"
0 0 24 3 1 #" "
0 0 14 3 9 #"spaceship"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 30 #"                             ("
0 0 14 3 1 #"+"
0 0 24 3 2 #" ("
0 0 14 3 1 #"/"
0 0 24 3 1 #" "
0 0 14 3 8 #"S-HEIGHT"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 2 #") "
0 0 14 3 11 #"BULLET-SIDE"
0 0 24 3 4 #"))) "
0 0 21 3 6 #"#false"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ["
0 0 14 3 4 #"else"
0 0 24 3 1 #" "
0 0 21 3 5 #"#true"
0 0 24 3 3 #"]))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 10 #";;;; Tests"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 29 1 #"\n"
0 0 24 3 2 #" ("
0 0 14 3 25 #"spaceship-hit-by-ibullet?"
0 0 24 3 2 #" ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 21 3 3 #"200"
0 0 24 3 1 #" "
0 0 21 3 3 #"380"
0 0 24 3 3 #") ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 21 3 3 #"183"
0 0 24 3 1 #" "
0 0 21 3 3 #"377"
0 0 24 3 3 #")) "
0 0 21 3 6 #"#false"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 29 1 #"\n"
0 0 24 3 2 #" ("
0 0 14 3 25 #"spaceship-hit-by-ibullet?"
0 0 24 3 2 #" ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 21 3 3 #"200"
0 0 24 3 1 #" "
0 0 21 3 3 #"380"
0 0 24 3 3 #") ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 21 3 3 #"184"
0 0 24 3 1 #" "
0 0 21 3 3 #"377"
0 0 24 3 3 #")) "
0 0 21 3 5 #"#true"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 29 1 #"\n"
0 0 24 3 2 #" ("
0 0 14 3 25 #"spaceship-hit-by-ibullet?"
0 0 24 3 2 #" ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 21 3 3 #"150"
0 0 24 3 1 #" "
0 0 21 3 3 #"380"
0 0 24 3 3 #") ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 21 3 3 #"147"
0 0 24 3 1 #" "
0 0 21 3 3 #"371"
0 0 24 3 3 #")) "
0 0 21 3 5 #"#true"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 29 1 #"\n"
0 0 24 3 2 #" ("
0 0 14 3 25 #"spaceship-hit-by-ibullet?"
0 0 24 3 2 #" ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 21 3 3 #"200"
0 0 24 3 1 #" "
0 0 21 3 3 #"380"
0 0 24 3 3 #") ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 21 3 3 #"210"
0 0 24 3 1 #" "
0 0 21 3 3 #"370"
0 0 24 3 3 #")) "
0 0 21 3 6 #"#false"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 29 1 #"\n"
0 0 24 3 2 #" ("
0 0 14 3 25 #"spaceship-hit-by-ibullet?"
0 0 24 3 2 #" ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 21 3 3 #"200"
0 0 24 3 1 #" "
0 0 21 3 3 #"380"
0 0 24 3 3 #") ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 21 3 3 #"210"
0 0 24 3 1 #" "
0 0 21 3 3 #"390"
0 0 24 3 3 #")) "
0 0 21 3 6 #"#false"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 29 1 #"\n"
0 0 24 3 2 #" ("
0 0 14 3 25 #"spaceship-hit-by-ibullet?"
0 0 24 3 2 #" ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 21 3 3 #"200"
0 0 24 3 1 #" "
0 0 21 3 3 #"380"
0 0 24 3 3 #") ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 21 3 3 #"210"
0 0 24 3 1 #" "
0 0 21 3 3 #"389"
0 0 24 3 3 #")) "
0 0 21 3 5 #"#true"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 29 1 #"\n"
0 0 24 3 2 #" ("
0 0 14 3 25 #"spaceship-hit-by-ibullet?"
0 0 24 3 2 #" ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 21 3 3 #"150"
0 0 24 3 1 #" "
0 0 21 3 3 #"380"
0 0 24 3 3 #") ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 21 3 3 #"167"
0 0 24 3 1 #" "
0 0 21 3 3 #"378"
0 0 24 3 3 #")) "
0 0 21 3 6 #"#false"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 29 1 #"\n"
0 0 24 3 2 #" ("
0 0 14 3 25 #"spaceship-hit-by-ibullet?"
0 0 24 3 2 #" ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 21 3 3 #"150"
0 0 24 3 1 #" "
0 0 21 3 3 #"380"
0 0 24 3 3 #") ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 21 3 3 #"166"
0 0 24 3 1 #" "
0 0 21 3 3 #"378"
0 0 24 3 3 #")) "
0 0 21 3 5 #"#true"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 14 #";;;; Signature"
0 0 24 29 1 #"\n"
0 0 17 3 50 #";; spaceship-hit-by-aib?: Spaceship AIB -> Boolean"
0 0 24 29 1 #"\n"
0 0 17 3 51 #";; GIVEN: a spaceship and a list of invader bullets"
0 0 24 29 1 #"\n"
0 0 17 3 66
#";; RETURN: true if the spaceship hit by one of the invader bullets"
0 0 24 29 1 #"\n"
0 0 17 3 30 #";;         and false otherwise"
0 0 24 29 1 #"\n"
0 0 17 3 11 #";;; Example"
0 0 24 29 1 #"\n"
0 0 17 3 71
(
 #";; (spaceship-hit-by-aib? (make-posn 150 380) (list (make-posn 167 3"
 #"78)"
) 0 0 24 29 1 #"\n"
0 0 17 3 37 #";;    (make-posn 210 390))) => #false"
0 0 24 29 1 #"\n"
0 0 17 3 62
#";; (spaceship-hit-by-aib? (make-posn 150 380) empty) => #false"
0 0 24 29 1 #"\n"
0 0 17 3 71
(
 #";; (spaceship-hit-by-aib? (make-posn 150 380) (list (make-posn 166 3"
 #"78)"
) 0 0 24 29 1 #"\n"
0 0 17 3 36 #";;    (make-posn 210 390))) => #true"
0 0 24 29 1 #"\n"
0 0 17 3 24 #";;;; Function Definition"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 21 #"spaceship-hit-by-aib?"
0 0 24 3 1 #" "
0 0 14 3 9 #"spaceship"
0 0 24 3 1 #" "
0 0 14 3 3 #"aib"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 5 #"ormap"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 8 #"i-bullet"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ("
0 0 14 3 25 #"spaceship-hit-by-ibullet?"
0 0 24 3 1 #" "
0 0 14 3 9 #"spaceship"
0 0 24 3 1 #" "
0 0 14 3 8 #"i-bullet"
0 0 24 3 3 #")) "
0 0 14 3 3 #"aib"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 10 #";;;; Tests"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 21 #"spaceship-hit-by-aib?"
0 0 24 3 2 #" ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 21 3 3 #"150"
0 0 24 3 1 #" "
0 0 21 3 3 #"380"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 21 3 3 #"167"
0 0 24 3 1 #" "
0 0 21 3 3 #"378"
0 0 24 3 3 #") ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 21 3 3 #"210"
0 0 24 3 1 #" "
0 0 21 3 3 #"390"
0 0 24 3 4 #"))) "
0 0 21 3 6 #"#false"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 21 #"spaceship-hit-by-aib?"
0 0 24 3 2 #" ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 21 3 3 #"150"
0 0 24 3 1 #" "
0 0 21 3 3 #"380"
0 0 24 3 2 #") "
0 0 14 3 5 #"empty"
0 0 24 3 2 #") "
0 0 21 3 6 #"#false"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 21 #"spaceship-hit-by-aib?"
0 0 24 3 2 #" ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 21 3 3 #"150"
0 0 24 3 1 #" "
0 0 21 3 3 #"380"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 21 3 3 #"166"
0 0 24 3 1 #" "
0 0 21 3 3 #"378"
0 0 24 3 3 #") ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 21 3 3 #"210"
0 0 24 3 1 #" "
0 0 21 3 3 #"390"
0 0 24 3 4 #"))) "
0 0 21 3 5 #"#true"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 14 #";;;; Signature"
0 0 24 29 1 #"\n"
0 0 17 3 55 #";; invader-hit-by-sbullet?: Invader S-Bullet -> Boolean"
0 0 24 29 1 #"\n"
0 0 17 3 12 #";;;; Purpose"
0 0 24 29 1 #"\n"
0 0 17 3 42 #";; GIVEN: a invader and a spaceship bullet"
0 0 24 29 1 #"\n"
0 0 17 3 67
#";; RETURN: true if the spaceship bullet overlap the invaderunit and"
0 0 24 29 1 #"\n"
0 0 17 3 26 #";;         false otherwise"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 13 #";;;; Examples"
0 0 24 29 1 #"\n"
0 0 17 3 78
(
 #";; (invader-hit-by-sbullet? (make-posn 200 100) (make-posn 188 100))"
 #" => #false"
) 0 0 24 29 1 #"\n"
0 0 17 3 77
(
 #";; (invader-hit-by-sbullet? (make-posn 200 100) (make-posn 189 100))"
 #" => #true"
) 0 0 24 29 1 #"\n"
0 0 17 3 76
(
 #";; (invader-hit-by-sbullet? (make-posn 200 100) (make-posn 210 89)) "
 #"=> #true"
) 0 0 24 29 1 #"\n"
0 0 17 3 77
(
 #";; (invader-hit-by-sbullet? (make-posn 200 100) (make-posn 210 88)) "
 #"=> #false"
) 0 0 24 29 1 #"\n"
0 0 17 3 78
(
 #";; (invader-hit-by-sbullet? (make-posn 200 100) (make-posn 210 112))"
 #" => #false"
) 0 0 24 29 1 #"\n"
0 0 17 3 77
(
 #";; (invader-hit-by-sbullet? (make-posn 200 100) (make-posn 210 111))"
 #" => #true"
) 0 0 24 29 1 #"\n"
0 0 17 3 78
(
 #";; (invader-hit-by-sbullet? (make-posn 200 100) (make-posn 212 110))"
 #" => #false"
) 0 0 24 29 1 #"\n"
0 0 17 3 77
(
 #";; (invader-hit-by-sbullet? (make-posn 200 100) (make-posn 211 110))"
 #" => #true"
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 24 #";;;; Function Definition"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 23 #"invader-hit-by-sbullet?"
0 0 24 3 1 #" "
0 0 14 3 7 #"invader"
0 0 24 3 1 #" "
0 0 14 3 7 #"sbullet"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [("
0 0 14 3 2 #"<="
0 0 24 3 2 #" ("
0 0 14 3 6 #"posn-x"
0 0 24 3 1 #" "
0 0 14 3 7 #"sbullet"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 14 3 1 #"-"
0 0 24 3 2 #" ("
0 0 14 3 6 #"posn-x"
0 0 24 3 1 #" "
0 0 14 3 7 #"invader"
0 0 24 3 3 #") ("
0 0 14 3 1 #"+"
0 0 24 3 2 #" ("
0 0 14 3 1 #"/"
0 0 24 3 1 #" "
0 0 14 3 12 #"INVADER-SIDE"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 2 #") "
0 0 14 3 11 #"BULLET-SIDE"
0 0 24 3 4 #"))) "
0 0 21 3 6 #"#false"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [("
0 0 14 3 2 #">="
0 0 24 3 2 #" ("
0 0 14 3 6 #"posn-x"
0 0 24 3 1 #" "
0 0 14 3 7 #"sbullet"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 14 3 1 #"+"
0 0 24 3 2 #" ("
0 0 14 3 6 #"posn-x"
0 0 24 3 1 #" "
0 0 14 3 7 #"invader"
0 0 24 3 3 #") ("
0 0 14 3 1 #"+"
0 0 24 3 2 #" ("
0 0 14 3 1 #"/"
0 0 24 3 1 #" "
0 0 14 3 12 #"INVADER-SIDE"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 2 #") "
0 0 14 3 11 #"BULLET-SIDE"
0 0 24 3 4 #"))) "
0 0 21 3 6 #"#false"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [("
0 0 14 3 2 #"<="
0 0 24 3 2 #" ("
0 0 14 3 6 #"posn-y"
0 0 24 3 1 #" "
0 0 14 3 7 #"sbullet"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 14 3 1 #"-"
0 0 24 3 2 #" ("
0 0 14 3 6 #"posn-y"
0 0 24 3 1 #" "
0 0 14 3 7 #"invader"
0 0 24 3 3 #") ("
0 0 14 3 1 #"+"
0 0 24 3 2 #" ("
0 0 14 3 1 #"/"
0 0 24 3 1 #" "
0 0 14 3 12 #"INVADER-SIDE"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 2 #") "
0 0 14 3 11 #"BULLET-SIDE"
0 0 24 3 4 #"))) "
0 0 21 3 6 #"#false"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [("
0 0 14 3 2 #">="
0 0 24 3 2 #" ("
0 0 14 3 6 #"posn-y"
0 0 24 3 1 #" "
0 0 14 3 7 #"sbullet"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 14 3 1 #"+"
0 0 24 3 2 #" ("
0 0 14 3 6 #"posn-y"
0 0 24 3 1 #" "
0 0 14 3 7 #"invader"
0 0 24 3 3 #") ("
0 0 14 3 1 #"+"
0 0 24 3 2 #" ("
0 0 14 3 1 #"/"
0 0 24 3 1 #" "
0 0 14 3 12 #"INVADER-SIDE"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 2 #") "
0 0 14 3 11 #"BULLET-SIDE"
0 0 24 3 4 #"))) "
0 0 21 3 6 #"#false"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ["
0 0 14 3 4 #"else"
0 0 24 3 1 #" "
0 0 21 3 5 #"#true"
0 0 24 3 3 #"]))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 56 #";;> again good job replacing the magic numbers but again"
0 0 24 29 1 #"\n"
0 0 17 3 58
#";;> -1 unnecessary cond, see style guide for more details."
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 10 #";;;; Tests"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 29 1 #"\n"
0 0 24 3 2 #" ("
0 0 14 3 23 #"invader-hit-by-sbullet?"
0 0 24 3 2 #" ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 21 3 3 #"200"
0 0 24 3 1 #" "
0 0 21 3 3 #"100"
0 0 24 3 3 #") ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 21 3 3 #"188"
0 0 24 3 1 #" "
0 0 21 3 3 #"100"
0 0 24 3 3 #")) "
0 0 21 3 6 #"#false"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 29 1 #"\n"
0 0 24 3 2 #" ("
0 0 14 3 23 #"invader-hit-by-sbullet?"
0 0 24 3 2 #" ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 21 3 3 #"200"
0 0 24 3 1 #" "
0 0 21 3 3 #"100"
0 0 24 3 3 #") ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 21 3 3 #"189"
0 0 24 3 1 #" "
0 0 21 3 3 #"100"
0 0 24 3 3 #")) "
0 0 21 3 5 #"#true"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 29 1 #"\n"
0 0 24 3 2 #" ("
0 0 14 3 23 #"invader-hit-by-sbullet?"
0 0 24 3 2 #" ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 21 3 3 #"200"
0 0 24 3 1 #" "
0 0 21 3 3 #"100"
0 0 24 3 3 #") ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 21 3 3 #"210"
0 0 24 3 1 #" "
0 0 21 3 2 #"89"
0 0 24 3 3 #")) "
0 0 21 3 5 #"#true"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 29 1 #"\n"
0 0 24 3 2 #" ("
0 0 14 3 23 #"invader-hit-by-sbullet?"
0 0 24 3 2 #" ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 21 3 3 #"200"
0 0 24 3 1 #" "
0 0 21 3 3 #"100"
0 0 24 3 3 #") ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 21 3 3 #"210"
0 0 24 3 1 #" "
0 0 21 3 2 #"88"
0 0 24 3 3 #")) "
0 0 21 3 6 #"#false"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 29 1 #"\n"
0 0 24 3 2 #" ("
0 0 14 3 23 #"invader-hit-by-sbullet?"
0 0 24 3 2 #" ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 21 3 3 #"200"
0 0 24 3 1 #" "
0 0 21 3 3 #"100"
0 0 24 3 3 #") ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 21 3 3 #"210"
0 0 24 3 1 #" "
0 0 21 3 3 #"112"
0 0 24 3 3 #")) "
0 0 21 3 6 #"#false"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 29 1 #"\n"
0 0 24 3 2 #" ("
0 0 14 3 23 #"invader-hit-by-sbullet?"
0 0 24 3 2 #" ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 21 3 3 #"200"
0 0 24 3 1 #" "
0 0 21 3 3 #"100"
0 0 24 3 3 #") ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 21 3 3 #"210"
0 0 24 3 1 #" "
0 0 21 3 3 #"111"
0 0 24 3 3 #")) "
0 0 21 3 5 #"#true"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 29 1 #"\n"
0 0 24 3 2 #" ("
0 0 14 3 23 #"invader-hit-by-sbullet?"
0 0 24 3 2 #" ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 21 3 3 #"200"
0 0 24 3 1 #" "
0 0 21 3 3 #"100"
0 0 24 3 3 #") ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 21 3 3 #"212"
0 0 24 3 1 #" "
0 0 21 3 3 #"110"
0 0 24 3 3 #")) "
0 0 21 3 6 #"#false"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 29 1 #"\n"
0 0 24 3 2 #" ("
0 0 14 3 23 #"invader-hit-by-sbullet?"
0 0 24 3 2 #" ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 21 3 3 #"200"
0 0 24 3 1 #" "
0 0 21 3 3 #"100"
0 0 24 3 3 #") ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 21 3 3 #"211"
0 0 24 3 1 #" "
0 0 21 3 3 #"110"
0 0 24 3 3 #")) "
0 0 21 3 5 #"#true"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 14 #";;;; Signature"
0 0 24 29 1 #"\n"
0 0 17 3 46 #";; invader-hit-by-asb?: invader ASB -> Boolean"
0 0 24 29 1 #"\n"
0 0 17 3 12 #";;;; Purpose"
0 0 24 29 1 #"\n"
0 0 17 3 51 #";; GIVEN: a invader and a list of spaceship bullets"
0 0 24 29 1 #"\n"
0 0 17 3 66
#";; RETURN: true if the invader hit by one of the spaceship bullets"
0 0 24 29 1 #"\n"
0 0 17 3 30 #";;         and false otherwise"
0 0 24 29 1 #"\n"
0 0 17 3 12 #";;;; Example"
0 0 24 29 1 #"\n"
0 0 17 3 70
(
 #";; (invader-hit-by-losb? (make-posn 200 100) (list (make-posn 212 11"
 #"0)"
) 0 0 24 29 1 #"\n"
0 0 17 3 37 #";;    (make-posn 230 300))) => #false"
0 0 24 29 1 #"\n"
0 0 17 3 61
#";; (invader-hit-by-losb? (make-posn 200 100) empty) => #false"
0 0 24 29 1 #"\n"
0 0 17 3 70
(
 #";; (invader-hit-by-losb? (make-posn 200 100) (list (make-posn 211 11"
 #"0)"
) 0 0 24 29 1 #"\n"
0 0 17 3 36 #";;    (make-posn 230 300))) => #true"
0 0 24 29 1 #"\n"
0 0 17 3 24 #";;;; Function Definition"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 19 #"invader-hit-by-asb?"
0 0 24 3 1 #" "
0 0 14 3 7 #"invader"
0 0 24 3 1 #" "
0 0 14 3 3 #"asb"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 5 #"ormap"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 8 #"s-bullet"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ("
0 0 14 3 23 #"invader-hit-by-sbullet?"
0 0 24 3 1 #" "
0 0 14 3 7 #"invader"
0 0 24 3 1 #" "
0 0 14 3 8 #"s-bullet"
0 0 24 3 3 #")) "
0 0 14 3 3 #"asb"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 10 #";;;; Tests"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 19 #"invader-hit-by-asb?"
0 0 24 3 2 #" ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 21 3 3 #"200"
0 0 24 3 1 #" "
0 0 21 3 3 #"100"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"               ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 21 3 3 #"212"
0 0 24 3 1 #" "
0 0 21 3 3 #"110"
0 0 24 3 3 #") ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 21 3 3 #"230"
0 0 24 3 1 #" "
0 0 21 3 3 #"300"
0 0 24 3 4 #"))) "
0 0 21 3 6 #"#false"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 19 #"invader-hit-by-asb?"
0 0 24 3 2 #" ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 21 3 3 #"200"
0 0 24 3 1 #" "
0 0 21 3 3 #"100"
0 0 24 3 2 #") "
0 0 14 3 5 #"empty"
0 0 24 3 2 #") "
0 0 21 3 6 #"#false"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 19 #"invader-hit-by-asb?"
0 0 24 3 2 #" ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 21 3 3 #"200"
0 0 24 3 1 #" "
0 0 21 3 3 #"100"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"               ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 21 3 3 #"211"
0 0 24 3 1 #" "
0 0 21 3 3 #"110"
0 0 24 3 3 #") ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 21 3 3 #"230"
0 0 24 3 1 #" "
0 0 21 3 3 #"300"
0 0 24 3 4 #"))) "
0 0 21 3 5 #"#true"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 14 #";;;; Signature"
0 0 24 29 1 #"\n"
0 0 17 3 35 #";; s-bullet-hit: ASB invader -> ASB"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 12 #";;;; Purpose"
0 0 24 29 1 #"\n"
0 0 17 3 56 #";; GIVEN: a list of spaceship bullets and an invaderunit"
0 0 24 29 1 #"\n"
0 0 17 3 78
(
 #";; RETURN: the updated list of spaceship bullets that deletes the bu"
 #"llet which"
) 0 0 24 29 1 #"\n"
0 0 17 3 31 #";;         hits the invaderunit"
0 0 24 29 1 #"\n"
0 0 17 3 13 #";;;; Examples"
0 0 24 29 1 #"\n"
0 0 17 3 52 #";; (s-bullet-hit empty (make-posn 200 110)) => empty"
0 0 24 29 1 #"\n"
0 0 17 3 16 #";; (s-bullet-hit"
0 0 24 29 1 #"\n"
0 0 17 3 73
(
 #";;     (list (make-posn 211 110) (make-posn 168 320) (make-posn 300 "
 #"300))"
) 0 0 24 29 1 #"\n"
0 0 17 3 77
(
 #";;     (make-posn 200 110)) => (list (make-posn 168 320) (make-posn "
 #"300 300))"
) 0 0 24 29 1 #"\n"
0 0 17 3 16 #";; (s-bullet-hit"
0 0 24 29 1 #"\n"
0 0 17 3 73
(
 #";;     (list (make-posn 212 110) (make-posn 168 320) (make-posn 300 "
 #"300))"
) 0 0 24 29 1 #"\n"
0 0 17 3 30 #";;     (make-posn 200 110)) =>"
0 0 24 29 1 #"\n"
0 0 17 3 73
(
 #";;     (list (make-posn 212 110) (make-posn 168 320) (make-posn 300 "
 #"300))"
) 0 0 24 29 1 #"\n"
0 0 17 3 16 #";; (s-bullet-hit"
0 0 24 29 1 #"\n"
0 0 17 3 73
(
 #";;     (list (make-posn 168 320) (make-posn 211 110) (make-posn 300 "
 #"300))"
) 0 0 24 29 1 #"\n"
0 0 17 3 77
(
 #";;     (make-posn 200 110)) => (list (make-posn 168 320) (make-posn "
 #"300 300))"
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 24 #";;;; Function Definition"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 12 #"s-bullet-hit"
0 0 24 3 1 #" "
0 0 14 3 3 #"asb"
0 0 24 3 1 #" "
0 0 14 3 7 #"invader"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 6 #"filter"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 8 #"s-bullet"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 14 3 3 #"not"
0 0 24 3 2 #" ("
0 0 14 3 23 #"invader-hit-by-sbullet?"
0 0 24 3 1 #" "
0 0 14 3 7 #"invader"
0 0 24 3 1 #" "
0 0 14 3 8 #"s-bullet"
0 0 24 3 4 #"))) "
0 0 14 3 3 #"asb"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 10 #";;;; Tests"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 12 #"s-bullet-hit"
0 0 24 3 1 #" "
0 0 14 3 5 #"empty"
0 0 24 3 2 #" ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 21 3 3 #"200"
0 0 24 3 1 #" "
0 0 21 3 3 #"110"
0 0 24 3 3 #")) "
0 0 14 3 5 #"empty"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 12 #"s-bullet-hit"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 21 3 3 #"211"
0 0 24 3 1 #" "
0 0 21 3 3 #"110"
0 0 24 3 3 #") ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 21 3 3 #"168"
0 0 24 3 1 #" "
0 0 21 3 3 #"320"
0 0 24 3 3 #") ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 21 3 3 #"300"
0 0 24 3 1 #" "
0 0 21 3 3 #"300"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 21 3 3 #"200"
0 0 24 3 1 #" "
0 0 21 3 3 #"110"
0 0 24 3 4 #")) ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 21 3 3 #"168"
0 0 24 3 1 #" "
0 0 21 3 3 #"320"
0 0 24 3 3 #") ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 21 3 3 #"300"
0 0 24 3 1 #" "
0 0 21 3 3 #"300"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 12 #"s-bullet-hit"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 21 3 3 #"212"
0 0 24 3 1 #" "
0 0 21 3 3 #"110"
0 0 24 3 3 #") ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 21 3 3 #"168"
0 0 24 3 1 #" "
0 0 21 3 3 #"320"
0 0 24 3 3 #") ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 21 3 3 #"300"
0 0 24 3 1 #" "
0 0 21 3 3 #"300"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 21 3 3 #"200"
0 0 24 3 1 #" "
0 0 21 3 3 #"110"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 21 3 3 #"212"
0 0 24 3 1 #" "
0 0 21 3 3 #"110"
0 0 24 3 3 #") ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 21 3 3 #"168"
0 0 24 3 1 #" "
0 0 21 3 3 #"320"
0 0 24 3 3 #") ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 21 3 3 #"300"
0 0 24 3 1 #" "
0 0 21 3 3 #"300"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 12 #"s-bullet-hit"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 21 3 3 #"168"
0 0 24 3 1 #" "
0 0 21 3 3 #"320"
0 0 24 3 3 #") ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 21 3 3 #"211"
0 0 24 3 1 #" "
0 0 21 3 3 #"110"
0 0 24 3 3 #") ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 21 3 3 #"300"
0 0 24 3 1 #" "
0 0 21 3 3 #"300"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 21 3 3 #"200"
0 0 24 3 1 #" "
0 0 21 3 3 #"110"
0 0 24 3 4 #")) ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 21 3 3 #"168"
0 0 24 3 1 #" "
0 0 21 3 3 #"320"
0 0 24 3 3 #") ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 21 3 3 #"300"
0 0 24 3 1 #" "
0 0 21 3 3 #"300"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 14 #";;;; Signature"
0 0 24 29 1 #"\n"
0 0 17 3 52 #";; s-bullet-hit-all?: s-bullet AllInvader -> Boolean"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 25 #";;> S-Bullet or s-bullet?"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 12 #";;;; Purpose"
0 0 24 29 1 #"\n"
0 0 17 3 45 #";; GIVEN: a spaceship bullet and all invaders"
0 0 24 29 1 #"\n"
0 0 17 3 62
#";; RETURN: #true if one of the invaders is hit by the s-bullet"
0 0 24 29 1 #"\n"
0 0 17 3 35 #";;         #false no invader is hit"
0 0 24 29 1 #"\n"
0 0 17 3 13 #";;;; Examples"
0 0 24 29 1 #"\n"
0 0 17 3 40 #";; (s-bullet-hit-all? (make-posn 40 40) "
0 0 24 29 1 #"\n"
0 0 17 3 74
(
 #";;                  (list (make-posn 40 40) (make-posn 200 200))) =>"
 #" #true"
) 0 0 24 29 1 #"\n"
0 0 17 3 39 #";; (s-bullet-hit-all? (make-posn 40 40)"
0 0 24 29 1 #"\n"
0 0 17 3 77
(
 #";;                  (list (make-posn 100 100) (make-posn 200 200))) "
 #"=> #false"
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 24 #";;;; Function Definition"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 17 #"s-bullet-hit-all?"
0 0 24 3 1 #" "
0 0 14 3 8 #"s-bullet"
0 0 24 3 1 #" "
0 0 14 3 3 #"all"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 5 #"ormap"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 7 #"invader"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 14 3 23 #"invader-hit-by-sbullet?"
0 0 24 3 1 #" "
0 0 14 3 7 #"invader"
0 0 24 3 1 #" "
0 0 14 3 8 #"s-bullet"
0 0 24 3 3 #")) "
0 0 14 3 3 #"all"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 17 3 10 #";;;; Tests"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 17 #"s-bullet-hit-all?"
0 0 24 3 2 #" ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 21 3 2 #"40"
0 0 24 3 1 #" "
0 0 21 3 2 #"40"
0 0 24 3 2 #") "
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                 ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 21 3 2 #"40"
0 0 24 3 1 #" "
0 0 21 3 2 #"40"
0 0 24 3 3 #") ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 21 3 3 #"200"
0 0 24 3 1 #" "
0 0 21 3 3 #"200"
0 0 24 3 4 #"))) "
0 0 21 3 5 #"#true"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 17 #"s-bullet-hit-all?"
0 0 24 3 2 #" ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 21 3 2 #"40"
0 0 24 3 1 #" "
0 0 21 3 2 #"40"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                 ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 21 3 3 #"100"
0 0 24 3 1 #" "
0 0 21 3 3 #"100"
0 0 24 3 3 #") ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 21 3 3 #"200"
0 0 24 3 1 #" "
0 0 21 3 3 #"200"
0 0 24 3 4 #"))) "
0 0 21 3 6 #"#false"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 14 #";;;; Signature"
0 0 24 29 1 #"\n"
0 0 17 3 42 #";; s-bullet-hit-all: ASB AllInvader -> ASB"
0 0 24 29 1 #"\n"
0 0 17 3 12 #";;;; Purpose"
0 0 24 29 1 #"\n"
0 0 17 3 54 #";; GIVEN: a list of spaceship bullets and all invaders"
0 0 24 29 1 #"\n"
0 0 17 3 78
(
 #";; RETURN: the updated list of spaceship bullets that deletes the bu"
 #"llet which"
) 0 0 24 29 1 #"\n"
0 0 17 3 24 #";;         hits invaders"
0 0 24 29 1 #"\n"
0 0 17 3 13 #";;;; Examples"
0 0 24 29 1 #"\n"
0 0 17 3 40 #";; (s-bullet-hit-all empty All) => empty"
0 0 24 29 1 #"\n"
0 0 17 3 70
(
 #";; (s-bullet-hit-all (list (make-posn 40 40) (make-posn 100 100)) Al"
 #"l)"
) 0 0 24 29 1 #"\n"
0 0 17 3 40 #";;         => (list (make-posn 100 100))"
0 0 24 29 1 #"\n"
0 0 17 3 24 #";;;; Funciton Definition"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 16 #"s-bullet-hit-all"
0 0 24 3 1 #" "
0 0 14 3 3 #"asb"
0 0 24 3 1 #" "
0 0 14 3 10 #"allinvader"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 6 #"filter"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 8 #"s-bullet"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 14 3 3 #"not"
0 0 24 3 2 #" ("
0 0 14 3 17 #"s-bullet-hit-all?"
0 0 24 3 1 #" "
0 0 14 3 8 #"s-bullet"
0 0 24 3 1 #" "
0 0 14 3 10 #"allinvader"
0 0 24 3 4 #"))) "
0 0 14 3 3 #"asb"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 24 29 1 #"\n"
0 0 17 3 10 #";;;; Tests"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 16 #"s-bullet-hit-all"
0 0 24 3 1 #" "
0 0 14 3 5 #"empty"
0 0 24 3 1 #" "
0 0 14 3 3 #"All"
0 0 24 3 2 #") "
0 0 14 3 5 #"empty"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 16 #"s-bullet-hit-all"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 21 3 2 #"40"
0 0 24 3 1 #" "
0 0 21 3 2 #"40"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 44 #"                                           ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 21 3 3 #"100"
0 0 24 3 1 #" "
0 0 21 3 3 #"100"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 33 #"                                ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 21 3 2 #"40"
0 0 24 3 1 #" "
0 0 21 3 2 #"40"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 39 #"                                      ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 21 3 3 #"100"
0 0 24 3 1 #" "
0 0 21 3 3 #"120"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 21 3 3 #"100"
0 0 24 3 1 #" "
0 0 21 3 3 #"100"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 14 #";;;; Signature"
0 0 24 29 1 #"\n"
0 0 17 3 39 #";; invader-draw: Invader Image -> Image"
0 0 24 29 1 #"\n"
0 0 17 3 12 #";;;; Purpose"
0 0 24 29 1 #"\n"
0 0 17 3 33 #";; GIVEN: an invader and an image"
0 0 24 29 1 #"\n"
0 0 17 3 64
#";; RETURN: a new image with the invader drawn on the given image"
0 0 24 29 1 #"\n"
0 0 17 3 13 #";;;; Examples"
0 0 24 29 1 #"\n"
0 0 17 3 49 #";;(invader-draw (make-posn 140 20) BACKGROUND) =>"
0 0 24 29 1 #"\n"
0 6           4 67 855
(
 #"(#(struct:crop (#(struct:point 0 0) #(struct:point 450 0) #(struct:p"
 #"oint 450 450) #(struct:point 0 450)) #(struct:overlay #(struct:polyg"
 #"on (#(struct:pulled-point 0 0 130 10 0 0) #(struct:pulled-point 0 0 "
 #"150 10 0 0) #(struct:pulled-point 0 0 150 30 0 0) #(struct:pulled-po"
 #"int 0 0 130 30 0 0)) 255 \"red\") #(struct:crop (#(struct:point 0 0)"
 #" #(struct:point 450 0) #(struct:point 450 450) #(struct:point 0 450)"
 #") #(struct:overlay #(struct:polygon (#(struct:pulled-point 0 0 0 0 0"
 #" 0) #(struct:pulled-point 0 0 450 0 0 0) #(struct:pulled-point 0 0 4"
 #"50 450 0 0) #(struct:pulled-point 0 0 0 450 0 0)) outline #(struct:p"
 #"en \"black\" 2 solid round round)) #(struct:polygon (#(struct:pulled"
 #"-point 0 0 0 0 0 0) #(struct:pulled-point 0 0 450 0 0 0) #(struct:pu"
 #"lled-point 0 0 450 450 0 0) #(struct:pulled-point 0 0 0 450 0 0)) 25"
 #"5 \"white\"))))) #(struct:bb 450 450 450) #f)"
) 0 0 24 29 1 #"\n"
0 0 17 3 50 #";;(invader-draw (make-posn 300 200) BACKGROUND) =>"
0 0 24 29 1 #"\n"
0 6           4 67 1067
(
 #"(#(struct:crop (#(struct:point 0 0) #(struct:point 450 0) #(struct:p"
 #"oint 450 450) #(struct:point 0 450)) #(struct:translate 0 0 #(struct"
 #":overlay #(struct:translate 290 190 #(struct:translate 0 0 #(struct:"
 #"polygon (#(struct:pulled-point 0 0 0 0 0 0) #(struct:pulled-point 0 "
 #"0 20 0 0 0) #(struct:pulled-point 0 0 20 20 0 0) #(struct:pulled-poi"
 #"nt 0 0 0 20 0 0)) 255 \"red\"))) #(struct:translate 0 0 #(struct:cro"
 #"p (#(struct:point 0 0) #(struct:point 450 0) #(struct:point 450 450)"
 #" #(struct:point 0 450)) #(struct:translate 0 0 #(struct:overlay #(st"
 #"ruct:translate 0 0 #(struct:translate 0 0 #(struct:polygon (#(struct"
 #":pulled-point 0 0 0 0 0 0) #(struct:pulled-point 0 0 450 0 0 0) #(st"
 #"ruct:pulled-point 0 0 450 450 0 0) #(struct:pulled-point 0 0 0 450 0"
 #" 0)) outline #(struct:pen \"black\" 2 solid round round)))) #(struct"
 #":translate 0 0 #(struct:translate 0 0 #(struct:polygon (#(struct:pul"
 #"led-point 0 0 0 0 0 0) #(struct:pulled-point 0 0 450 0 0 0) #(struct"
 #":pulled-point 0 0 450 450 0 0) #(struct:pulled-point 0 0 0 450 0 0))"
 #" 255 \"white\")))))))))) #(struct:bb 450 450 450) #f)"
) 0 0 24 29 1 #"\n"
0 0 17 3 24 #";;;; Function Definition"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 12 #"invader-draw"
0 0 24 3 1 #" "
0 0 14 3 7 #"invader"
0 0 24 3 1 #" "
0 0 14 3 3 #"img"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 11 #"place-image"
0 0 24 3 1 #" "
0 0 14 3 13 #"INVADER-IMAGE"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"               ("
0 0 14 3 6 #"posn-x"
0 0 24 3 1 #" "
0 0 14 3 7 #"invader"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"               ("
0 0 14 3 6 #"posn-y"
0 0 24 3 1 #" "
0 0 14 3 7 #"invader"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"               "
0 0 14 3 3 #"img"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 17 3 10 #";;;; Tests"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 12 #"invader-draw"
0 0 24 3 2 #" ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 21 3 3 #"140"
0 0 24 3 1 #" "
0 0 21 3 2 #"20"
0 0 24 3 2 #") "
0 0 14 3 10 #"BACKGROUND"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"              "
0 6           4 67 855
(
 #"(#(struct:crop (#(struct:point 0 0) #(struct:point 450 0) #(struct:p"
 #"oint 450 450) #(struct:point 0 450)) #(struct:overlay #(struct:polyg"
 #"on (#(struct:pulled-point 0 0 130 10 0 0) #(struct:pulled-point 0 0 "
 #"150 10 0 0) #(struct:pulled-point 0 0 150 30 0 0) #(struct:pulled-po"
 #"int 0 0 130 30 0 0)) 255 \"red\") #(struct:crop (#(struct:point 0 0)"
 #" #(struct:point 450 0) #(struct:point 450 450) #(struct:point 0 450)"
 #") #(struct:overlay #(struct:polygon (#(struct:pulled-point 0 0 0 0 0"
 #" 0) #(struct:pulled-point 0 0 450 0 0 0) #(struct:pulled-point 0 0 4"
 #"50 450 0 0) #(struct:pulled-point 0 0 0 450 0 0)) outline #(struct:p"
 #"en \"black\" 2 solid round round)) #(struct:polygon (#(struct:pulled"
 #"-point 0 0 0 0 0 0) #(struct:pulled-point 0 0 450 0 0 0) #(struct:pu"
 #"lled-point 0 0 450 450 0 0) #(struct:pulled-point 0 0 0 450 0 0)) 25"
 #"5 \"white\"))))) #(struct:bb 450 450 450) #f)"
) 0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 12 #"invader-draw"
0 0 24 3 2 #" ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 21 3 3 #"300"
0 0 24 3 1 #" "
0 0 21 3 3 #"200"
0 0 24 3 2 #") "
0 0 14 3 10 #"BACKGROUND"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"              "
0 6           4 67 1067
(
 #"(#(struct:crop (#(struct:point 0 0) #(struct:point 450 0) #(struct:p"
 #"oint 450 450) #(struct:point 0 450)) #(struct:translate 0 0 #(struct"
 #":overlay #(struct:translate 290 190 #(struct:translate 0 0 #(struct:"
 #"polygon (#(struct:pulled-point 0 0 0 0 0 0) #(struct:pulled-point 0 "
 #"0 20 0 0 0) #(struct:pulled-point 0 0 20 20 0 0) #(struct:pulled-poi"
 #"nt 0 0 0 20 0 0)) 255 \"red\"))) #(struct:translate 0 0 #(struct:cro"
 #"p (#(struct:point 0 0) #(struct:point 450 0) #(struct:point 450 450)"
 #" #(struct:point 0 450)) #(struct:translate 0 0 #(struct:overlay #(st"
 #"ruct:translate 0 0 #(struct:translate 0 0 #(struct:polygon (#(struct"
 #":pulled-point 0 0 0 0 0 0) #(struct:pulled-point 0 0 450 0 0 0) #(st"
 #"ruct:pulled-point 0 0 450 450 0 0) #(struct:pulled-point 0 0 0 450 0"
 #" 0)) outline #(struct:pen \"black\" 2 solid round round)))) #(struct"
 #":translate 0 0 #(struct:translate 0 0 #(struct:polygon (#(struct:pul"
 #"led-point 0 0 0 0 0 0) #(struct:pulled-point 0 0 450 0 0 0) #(struct"
 #":pulled-point 0 0 450 450 0 0) #(struct:pulled-point 0 0 0 450 0 0))"
 #" 255 \"white\")))))))))) #(struct:bb 450 450 450) #f)"
) 0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 14 #";;;; Signature"
0 0 24 29 1 #"\n"
0 0 17 3 35 #";; mship-draw: MShip Image -> Image"
0 0 24 29 1 #"\n"
0 0 17 3 12 #";;;; Purpose"
0 0 24 29 1 #"\n"
0 0 17 3 30 #";; GIVEN: a mship and an image"
0 0 24 29 1 #"\n"
0 0 17 3 62
#";; RETURN: a new image with the mship drawn on the given image"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 13 #";;;; Examples"
0 0 24 29 1 #"\n"
0 0 17 3 48 #";; (mship-draw (make-posn 40 100) BACKGROUND) =>"
0 0 24 29 1 #"\n"
0 0 17 3 3 #";; "
0 6           4 17 947
(
 #"(#(struct:crop (#(struct:point 0 0) #(struct:point 450 0) #(struct:p"
 #"oint 450 450) #(struct:point 0 450)) #(struct:translate 0 0 #(struct"
 #":overlay #(struct:translate 30 90 #(struct:translate 0 0 #(struct:po"
 #"lygon (#(struct:pulled-point 0 0 0 0 0 0) #(struct:pulled-point 0 0 "
 #"20 0 0 0) #(struct:pulled-point 0 0 20 20 0 0) #(struct:pulled-point"
 #" 0 0 0 20 0 0)) 255 \"green\"))) #(struct:translate 0 0 #(struct:cro"
 #"p (#(struct:point 0 0) #(struct:point 450 0) #(struct:point 450 450)"
 #" #(struct:point 0 450)) #(struct:overlay #(struct:polygon (#(struct:"
 #"pulled-point 0 0 0 0 0 0) #(struct:pulled-point 0 0 450 0 0 0) #(str"
 #"uct:pulled-point 0 0 450 450 0 0) #(struct:pulled-point 0 0 0 450 0 "
 #"0)) outline #(struct:pen \"black\" 2 solid round round)) #(struct:po"
 #"lygon (#(struct:pulled-point 0 0 0 0 0 0) #(struct:pulled-point 0 0 "
 #"450 0 0 0) #(struct:pulled-point 0 0 450 450 0 0) #(struct:pulled-po"
 #"int 0 0 0 450 0 0)) 255 \"white\"))))))) #(struct:bb 450 450 450) #f"
 #")"
) 0 0 24 29 1 #"\n"
0 0 17 3 34 #";;(mship-draw empty BACKGROUND) =>"
0 0 24 29 1 #"\n"
0 0 17 3 2 #";;"
0 6           4 17 550
(
 #"(#(struct:crop (#(struct:point 0 0) #(struct:point 450 0) #(struct:p"
 #"oint 450 450) #(struct:point 0 450)) #(struct:overlay #(struct:polyg"
 #"on (#(struct:pulled-point 0 0 0 0 0 0) #(struct:pulled-point 0 0 450"
 #" 0 0 0) #(struct:pulled-point 0 0 450 450 0 0) #(struct:pulled-point"
 #" 0 0 0 450 0 0)) outline #(struct:pen \"black\" 2 solid round round)"
 #") #(struct:polygon (#(struct:pulled-point 0 0 0 0 0 0) #(struct:pull"
 #"ed-point 0 0 450 0 0 0) #(struct:pulled-point 0 0 450 450 0 0) #(str"
 #"uct:pulled-point 0 0 0 450 0 0)) 255 \"white\"))) #(struct:bb 450 45"
 #"0 450) #f)"
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 24 #";;;; Function Definition"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 10 #"mship-draw"
0 0 24 3 1 #" "
0 0 14 3 5 #"mship"
0 0 24 3 1 #" "
0 0 14 3 3 #"img"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [("
0 0 14 3 6 #"empty?"
0 0 24 3 1 #" "
0 0 14 3 5 #"mship"
0 0 24 3 2 #") "
0 0 14 3 3 #"img"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ["
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 11 #"place-image"
0 0 24 3 1 #" "
0 0 14 3 11 #"MSHIP-IMAGE"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"               ("
0 0 14 3 6 #"posn-x"
0 0 24 3 1 #" "
0 0 14 3 5 #"mship"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"               ("
0 0 14 3 6 #"posn-y"
0 0 24 3 1 #" "
0 0 14 3 5 #"mship"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"               "
0 0 14 3 3 #"img"
0 0 24 3 4 #")]))"
0 0 24 29 1 #"\n"
0 0 17 3 10 #";;;; Tests"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 10 #"mship-draw"
0 0 24 3 2 #" ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 21 3 2 #"40"
0 0 24 3 1 #" "
0 0 21 3 3 #"100"
0 0 24 3 2 #") "
0 0 14 3 10 #"BACKGROUND"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"   "
0 6           4 67 947
(
 #"(#(struct:crop (#(struct:point 0 0) #(struct:point 450 0) #(struct:p"
 #"oint 450 450) #(struct:point 0 450)) #(struct:translate 0 0 #(struct"
 #":overlay #(struct:translate 30 90 #(struct:translate 0 0 #(struct:po"
 #"lygon (#(struct:pulled-point 0 0 0 0 0 0) #(struct:pulled-point 0 0 "
 #"20 0 0 0) #(struct:pulled-point 0 0 20 20 0 0) #(struct:pulled-point"
 #" 0 0 0 20 0 0)) 255 \"green\"))) #(struct:translate 0 0 #(struct:cro"
 #"p (#(struct:point 0 0) #(struct:point 450 0) #(struct:point 450 450)"
 #" #(struct:point 0 450)) #(struct:overlay #(struct:polygon (#(struct:"
 #"pulled-point 0 0 0 0 0 0) #(struct:pulled-point 0 0 450 0 0 0) #(str"
 #"uct:pulled-point 0 0 450 450 0 0) #(struct:pulled-point 0 0 0 450 0 "
 #"0)) outline #(struct:pen \"black\" 2 solid round round)) #(struct:po"
 #"lygon (#(struct:pulled-point 0 0 0 0 0 0) #(struct:pulled-point 0 0 "
 #"450 0 0 0) #(struct:pulled-point 0 0 450 450 0 0) #(struct:pulled-po"
 #"int 0 0 0 450 0 0)) 255 \"white\"))))))) #(struct:bb 450 450 450) #f"
 #")"
) 0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 10 #"mship-draw"
0 0 24 3 1 #" "
0 0 14 3 5 #"empty"
0 0 24 3 1 #" "
0 0 14 3 10 #"BACKGROUND"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"   "
0 6           4 67 550
(
 #"(#(struct:crop (#(struct:point 0 0) #(struct:point 450 0) #(struct:p"
 #"oint 450 450) #(struct:point 0 450)) #(struct:overlay #(struct:polyg"
 #"on (#(struct:pulled-point 0 0 0 0 0 0) #(struct:pulled-point 0 0 450"
 #" 0 0 0) #(struct:pulled-point 0 0 450 450 0 0) #(struct:pulled-point"
 #" 0 0 0 450 0 0)) outline #(struct:pen \"black\" 2 solid round round)"
 #") #(struct:polygon (#(struct:pulled-point 0 0 0 0 0 0) #(struct:pull"
 #"ed-point 0 0 450 0 0 0) #(struct:pulled-point 0 0 450 450 0 0) #(str"
 #"uct:pulled-point 0 0 0 450 0 0)) 255 \"white\"))) #(struct:bb 450 45"
 #"0 450) #f)"
) 0 0 24 3 6 #")     "
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 14 #";;;; Signature"
0 0 24 29 1 #"\n"
0 0 17 3 45 #";; allinvader-draw: AllInvader Image -> Image"
0 0 24 29 1 #"\n"
0 0 17 3 12 #";;;; Purpose"
0 0 24 29 1 #"\n"
0 0 17 3 35 #";; GIVEN: all invaders and an image"
0 0 24 29 1 #"\n"
0 0 17 3 65
#";; RETURN: a new image with all invaders drawn on the given image"
0 0 24 29 1 #"\n"
0 0 17 3 12 #";;;; Example"
0 0 24 29 1 #"\n"
0 0 17 3 38 #";; (allinvader-draw All BACKGROUND) =>"
0 0 24 29 1 #"\n"
0 6           4 67 16522
(
 #"(#(struct:crop (#(struct:point 0 0) #(struct:point 450 0) #(struct:p"
 #"oint 450 450) #(struct:point 0 450)) #(struct:translate 0 0 #(struct"
 #":overlay #(struct:translate 30 60 #(struct:translate 0 0 #(struct:po"
 #"lygon (#(struct:pulled-point 0 0 0 0 0 0) #(struct:pulled-point 0 0 "
 #"20 0 0 0) #(struct:pulled-point 0 0 20 20 0 0) #(struct:pulled-point"
 #" 0 0 0 20 0 0)) 255 \"red\"))) #(struct:translate 0 0 #(struct:crop "
 #"(#(struct:point 0 0) #(struct:point 450 0) #(struct:point 450 450) #"
 #"(struct:point 0 450)) #(struct:translate 0 0 #(struct:overlay #(stru"
 #"ct:translate 70 60 #(struct:translate 0 0 #(struct:polygon (#(struct"
 #":pulled-point 0 0 0 0 0 0) #(struct:pulled-point 0 0 20 0 0 0) #(str"
 #"uct:pulled-point 0 0 20 20 0 0) #(struct:pulled-point 0 0 0 20 0 0))"
 #" 255 \"red\"))) #(struct:translate 0 0 #(struct:crop (#(struct:point"
 #" 0 0) #(struct:point 450 0) #(struct:point 450 450) #(struct:point 0"
 #" 450)) #(struct:translate 0 0 #(struct:overlay #(struct:translate 11"
 #"0 60 #(struct:translate 0 0 #(struct:polygon (#(struct:pulled-point "
 #"0 0 0 0 0 0) #(struct:pulled-point 0 0 20 0 0 0) #(struct:pulled-poi"
 #"nt 0 0 20 20 0 0) #(struct:pulled-point 0 0 0 20 0 0)) 255 \"red\"))"
 #") #(struct:translate 0 0 #(struct:crop (#(struct:point 0 0) #(struct"
 #":point 450 0) #(struct:point 450 450) #(struct:point 0 450)) #(struc"
 #"t:translate 0 0 #(struct:overlay #(struct:translate 150 60 #(struct:"
 #"translate 0 0 #(struct:polygon (#(struct:pulled-point 0 0 0 0 0 0) #"
 #"(struct:pulled-point 0 0 20 0 0 0) #(struct:pulled-point 0 0 20 20 0"
 #" 0) #(struct:pulled-point 0 0 0 20 0 0)) 255 \"red\"))) #(struct:tra"
 #"nslate 0 0 #(struct:crop (#(struct:point 0 0) #(struct:point 450 0) "
 #"#(struct:point 450 450) #(struct:point 0 450)) #(struct:translate 0 "
 #"0 #(struct:overlay #(struct:translate 190 60 #(struct:translate 0 0 "
 #"#(struct:polygon (#(struct:pulled-point 0 0 0 0 0 0) #(struct:pulled"
 #"-point 0 0 20 0 0 0) #(struct:pulled-point 0 0 20 20 0 0) #(struct:p"
 #"ulled-point 0 0 0 20 0 0)) 255 \"red\"))) #(struct:translate 0 0 #(s"
 #"truct:crop (#(struct:point 0 0) #(struct:point 450 0) #(struct:point"
 #" 450 450) #(struct:point 0 450)) #(struct:translate 0 0 #(struct:ove"
 #"rlay #(struct:translate 230 60 #(struct:translate 0 0 #(struct:polyg"
 #"on (#(struct:pulled-point 0 0 0 0 0 0) #(struct:pulled-point 0 0 20 "
 #"0 0 0) #(struct:pulled-point 0 0 20 20 0 0) #(struct:pulled-point 0 "
 #"0 0 20 0 0)) 255 \"red\"))) #(struct:translate 0 0 #(struct:crop (#("
 #"struct:point 0 0) #(struct:point 450 0) #(struct:point 450 450) #(st"
 #"ruct:point 0 450)) #(struct:translate 0 0 #(struct:overlay #(struct:"
 #"translate 270 60 #(struct:translate 0 0 #(struct:polygon (#(struct:p"
 #"ulled-point 0 0 0 0 0 0) #(struct:pulled-point 0 0 20 0 0 0) #(struc"
 #"t:pulled-point 0 0 20 20 0 0) #(struct:pulled-point 0 0 0 20 0 0)) 2"
 #"55 \"red\"))) #(struct:translate 0 0 #(struct:crop (#(struct:point 0"
 #" 0) #(struct:point 450 0) #(struct:point 450 450) #(struct:point 0 4"
 #"50)) #(struct:translate 0 0 #(struct:overlay #(struct:translate 310 "
 #"60 #(struct:translate 0 0 #(struct:polygon (#(struct:pulled-point 0 "
 #"0 0 0 0 0) #(struct:pulled-point 0 0 20 0 0 0) #(struct:pulled-point"
 #" 0 0 20 20 0 0) #(struct:pulled-point 0 0 0 20 0 0)) 255 \"red\"))) "
 #"#(struct:translate 0 0 #(struct:crop (#(struct:point 0 0) #(struct:p"
 #"oint 450 0) #(struct:point 450 450) #(struct:point 0 450)) #(struct:"
 #"translate 0 0 #(struct:overlay #(struct:translate 350 60 #(struct:tr"
 #"anslate 0 0 #(struct:polygon (#(struct:pulled-point 0 0 0 0 0 0) #(s"
 #"truct:pulled-point 0 0 20 0 0 0) #(struct:pulled-point 0 0 20 20 0 0"
 #") #(struct:pulled-point 0 0 0 20 0 0)) 255 \"red\"))) #(struct:trans"
 #"late 0 0 #(struct:crop (#(struct:point 0 0) #(struct:point 450 0) #("
 #"struct:point 450 450) #(struct:point 0 450)) #(struct:translate 0 0 "
 #"#(struct:overlay #(struct:translate 390 60 #(struct:translate 0 0 #("
 #"struct:polygon (#(struct:pulled-point 0 0 0 0 0 0) #(struct:pulled-p"
 #"oint 0 0 20 0 0 0) #(struct:pulled-point 0 0 20 20 0 0) #(struct:pul"
 #"led-point 0 0 0 20 0 0)) 255 \"red\"))) #(struct:translate 0 0 #(str"
 #"uct:crop (#(struct:point 0 0) #(struct:point 450 0) #(struct:point 4"
 #"50 450) #(struct:point 0 450)) #(struct:translate 0 0 #(struct:overl"
 #"ay #(struct:translate 30 90 #(struct:translate 0 0 #(struct:polygon "
 #"(#(struct:pulled-point 0 0 0 0 0 0) #(struct:pulled-point 0 0 20 0 0"
 #" 0) #(struct:pulled-point 0 0 20 20 0 0) #(struct:pulled-point 0 0 0"
 #" 20 0 0)) 255 \"red\"))) #(struct:translate 0 0 #(struct:crop (#(str"
 #"uct:point 0 0) #(struct:point 450 0) #(struct:point 450 450) #(struc"
 #"t:point 0 450)) #(struct:translate 0 0 #(struct:overlay #(struct:tra"
 #"nslate 70 90 #(struct:translate 0 0 #(struct:polygon (#(struct:pulle"
 #"d-point 0 0 0 0 0 0) #(struct:pulled-point 0 0 20 0 0 0) #(struct:pu"
 #"lled-point 0 0 20 20 0 0) #(struct"
 #":pulled-point 0 0 0 20 0 0)) 255 \"red\"))) #(struct:translate 0 0 #"
 #"(struct:crop (#(struct:point 0 0) #(struct:point 450 0) #(struct:poi"
 #"nt 450 450) #(struct:point 0 450)) #(struct:translate 0 0 #(struct:o"
 #"verlay #(struct:translate 110 90 #(struct:translate 0 0 #(struct:pol"
 #"ygon (#(struct:pulled-point 0 0 0 0 0 0) #(struct:pulled-point 0 0 2"
 #"0 0 0 0) #(struct:pulled-point 0 0 20 20 0 0) #(struct:pulled-point "
 #"0 0 0 20 0 0)) 255 \"red\"))) #(struct:translate 0 0 #(struct:crop ("
 #"#(struct:point 0 0) #(struct:point 450 0) #(struct:point 450 450) #("
 #"struct:point 0 450)) #(struct:translate 0 0 #(struct:overlay #(struc"
 #"t:translate 150 90 #(struct:translate 0 0 #(struct:polygon (#(struct"
 #":pulled-point 0 0 0 0 0 0) #(struct:pulled-point 0 0 20 0 0 0) #(str"
 #"uct:pulled-point 0 0 20 20 0 0) #(struct:pulled-point 0 0 0 20 0 0))"
 #" 255 \"red\"))) #(struct:translate 0 0 #(struct:crop (#(struct:point"
 #" 0 0) #(struct:point 450 0) #(struct:point 450 450) #(struct:point 0"
 #" 450)) #(struct:translate 0 0 #(struct:overlay #(struct:translate 19"
 #"0 90 #(struct:translate 0 0 #(struct:polygon (#(struct:pulled-point "
 #"0 0 0 0 0 0) #(struct:pulled-point 0 0 20 0 0 0) #(struct:pulled-poi"
 #"nt 0 0 20 20 0 0) #(struct:pulled-point 0 0 0 20 0 0)) 255 \"red\"))"
 #") #(struct:translate 0 0 #(struct:crop (#(struct:point 0 0) #(struct"
 #":point 450 0) #(struct:point 450 450) #(struct:point 0 450)) #(struc"
 #"t:translate 0 0 #(struct:overlay #(struct:translate 230 90 #(struct:"
 #"translate 0 0 #(struct:polygon (#(struct:pulled-point 0 0 0 0 0 0) #"
 #"(struct:pulled-point 0 0 20 0 0 0) #(struct:pulled-point 0 0 20 20 0"
 #" 0) #(struct:pulled-point 0 0 0 20 0 0)) 255 \"red\"))) #(struct:tra"
 #"nslate 0 0 #(struct:crop (#(struct:point 0 0) #(struct:point 450 0) "
 #"#(struct:point 450 450) #(struct:point 0 450)) #(struct:translate 0 "
 #"0 #(struct:overlay #(struct:translate 270 90 #(struct:translate 0 0 "
 #"#(struct:polygon (#(struct:pulled-point 0 0 0 0 0 0) #(struct:pulled"
 #"-point 0 0 20 0 0 0) #(struct:pulled-point 0 0 20 20 0 0) #(struct:p"
 #"ulled-point 0 0 0 20 0 0)) 255 \"red\"))) #(struct:translate 0 0 #(s"
 #"truct:crop (#(struct:point 0 0) #(struct:point 450 0) #(struct:point"
 #" 450 450) #(struct:point 0 450)) #(struct:translate 0 0 #(struct:ove"
 #"rlay #(struct:translate 310 90 #(struct:translate 0 0 #(struct:polyg"
 #"on (#(struct:pulled-point 0 0 0 0 0 0) #(struct:pulled-point 0 0 20 "
 #"0 0 0) #(struct:pulled-point 0 0 20 20 0 0) #(struct:pulled-point 0 "
 #"0 0 20 0 0)) 255 \"red\"))) #(struct:translate 0 0 #(struct:crop (#("
 #"struct:point 0 0) #(struct:point 450 0) #(struct:point 450 450) #(st"
 #"ruct:point 0 450)) #(struct:translate 0 0 #(struct:overlay #(struct:"
 #"translate 350 90 #(struct:translate 0 0 #(struct:polygon (#(struct:p"
 #"ulled-point 0 0 0 0 0 0) #(struct:pulled-point 0 0 20 0 0 0) #(struc"
 #"t:pulled-point 0 0 20 20 0 0) #(struct:pulled-point 0 0 0 20 0 0)) 2"
 #"55 \"red\"))) #(struct:translate 0 0 #(struct:crop (#(struct:point 0"
 #" 0) #(struct:point 450 0) #(struct:point 450 450) #(struct:point 0 4"
 #"50)) #(struct:translate 0 0 #(struct:overlay #(struct:translate 390 "
 #"90 #(struct:translate 0 0 #(struct:polygon (#(struct:pulled-point 0 "
 #"0 0 0 0 0) #(struct:pulled-point 0 0 20 0 0 0) #(struct:pulled-point"
 #" 0 0 20 20 0 0) #(struct:pulled-point 0 0 0 20 0 0)) 255 \"red\"))) "
 #"#(struct:translate 0 0 #(struct:crop (#(struct:point 0 0) #(struct:p"
 #"oint 450 0) #(struct:point 450 450) #(struct:point 0 450)) #(struct:"
 #"translate 0 0 #(struct:overlay #(struct:translate 30 120 #(struct:tr"
 #"anslate 0 0 #(struct:polygon (#(struct:pulled-point 0 0 0 0 0 0) #(s"
 #"truct:pulled-point 0 0 20 0 0 0) #(struct:pulled-point 0 0 20 20 0 0"
 #") #(struct:pulled-point 0 0 0 20 0 0)) 255 \"red\"))) #(struct:trans"
 #"late 0 0 #(struct:crop (#(struct:point 0 0) #(struct:point 450 0) #("
 #"struct:point 450 450) #(struct:point 0 450)) #(struct:translate 0 0 "
 #"#(struct:overlay #(struct:translate 70 120 #(struct:translate 0 0 #("
 #"struct:polygon (#(struct:pulled-point 0 0 0 0 0 0) #(struct:pulled-p"
 #"oint 0 0 20 0 0 0) #(struct:pulled-point 0 0 20 20 0 0) #(struct:pul"
 #"led-point 0 0 0 20 0 0)) 255 \"red\"))) #(struct:translate 0 0 #(str"
 #"uct:crop (#(struct:point 0 0) #(struct:point 450 0) #(struct:point 4"
 #"50 450) #(struct:point 0 450)) #(struct:translate 0 0 #(struct:overl"
 #"ay #(struct:translate 110 120 #(struct:translate 0 0 #(struct:polygo"
 #"n (#(struct:pulled-point 0 0 0 0 0 0) #(struct:pulled-point 0 0 20 0"
 #" 0 0) #(struct:pulled-point 0 0 20 20 0 0) #(struct:pulled-point 0 0"
 #" 0 20 0 0)) 255 \"red\"))) #(struct:translate 0 0 #(struct:crop (#(s"
 #"truct:point 0 0) #(struct:point 450 0) #(struct:point 450 450) #(str"
 #"uct:point 0 450)) #(struct:translate 0 0 #(struct:overlay #(struct:t"
 #"ranslate 150 120 #(struct:translate 0 0 #(struct:polygon (#(struct:p"
 #"ulled-point 0 0 0 0 0 0) #(struct:pulled-point 0 0 20 0 0 0) #(struc"
 #"t:pulled-point 0 0 20 20 0 0) #(struct:pulled-point 0 0 0 20 0 0)) 2"
 #"55 \"red\"))) #(struct:translate 0 0 #(struct:crop (#(struct:point 0"
 #" 0) #(struct:point 450 0) #(struct:point 450 450) #(struct:point 0 4"
 #"50)) #(struct:translate 0 0 #(struct:overlay #(struct:translate 190 "
 #"120 #(struct:translate 0 0 #(struct:polygon (#(struct:pulled-point 0"
 #" 0 0 0 0 0) #(struct:pulled-point 0 0 20 0 0 0) #(struct:pulled-poin"
 #"t 0 0 20 20 0 0) #(struct:pulled-point 0 0 0 20 0 0)) 255 \"red\")))"
 #" #(struct:translate 0 0 #(struct:crop (#(struct:point 0 0) #(struct:"
 #"point 450 0) #(struct:point 450 450) #(struct:point 0 450)) #(struct"
 #":translate 0 0 #(struct:overlay #(struct:translate 230 120 #(struct:"
 #"translate 0 0 #(struct:polygon (#(struct:pulled-point 0 0 0 0 0 0) #"
 #"(struct:pulled-point 0 0 20 0 0 0) #(struct:pulled-point 0 0 20 20 0"
 #" 0) #(struct:pulled-point 0 0 0 20 0 0)) 255 \"red\"))) #(struct:tra"
 #"nslate 0 0 #(struct:crop (#(struct:point 0 0) #(struct:point 450 0) "
 #"#(struct:point 450 450) #(struct:point 0 450)) #(struct:translate 0 "
 #"0 #(struct:overlay #(struct:translate 270 120 #(struct:translate 0 0"
 #" #(struct:polygon (#(struct:pulled-point 0 0 0 0 0 0) #(struct:pulle"
 #"d-point 0 0 20 0 0 0) #(struct:pulled-point 0 0 20 20 0 0) #(struct:"
 #"pulled-point 0 0 0 20 0 0)) 255 \"red\"))) #(struct:translate 0 0 #("
 #"struct:crop (#(struct:point 0 0) #(struct:point 450 0) #(struct:poin"
 #"t 450 450) #(struct:point 0 450)) #(struct:translate 0 0 #(struct:ov"
 #"erlay #(struct:translate 310 120 #(struct:translate 0 0 #(struct:pol"
 #"ygon (#(struct:pulled-point 0 0 0 0 0 0) #(struct:pulled-point 0 0 2"
 #"0 0 0 0) #(struct:pulled-point 0 0 20 20 0 0) #(struct:pulled-point "
 #"0 0 0 20 0 0)) 255 \"red\"))) #(struct:translate 0 0 #(struct:crop ("
 #"#(struct:point 0 0) #(struct:point 450 0) #(struct:point 450 450) #("
 #"struct:point 0 450)) #(struct:translate 0 0 #(struct:overlay #(struc"
 #"t:translate 350 120 #(struct:translate 0 0 #(struct:polygon (#(struc"
 #"t:pulled-point 0 0 0 0 0 0) #(struct:pulled-point 0 0 20 0 0 0) #(st"
 #"ruct:pulled-point 0 0 20 20 0 0) #(struct:pulled-point 0 0 0 20 0 0)"
 #") 255 \"red\"))) #(struct:translate 0 0 #(struct:crop (#(struct:poin"
 #"t 0 0) #(struct:point 450 0) #(struct:point 450 450) #(struct:point "
 #"0 450)) #(struct:translate 0 0 #(struct:overlay #(struct:translate 3"
 #"90 120 #(struct:translate 0 0 #(struct:polygon (#(struct:pulled-poin"
 #"t 0 0 0 0 0 0) #(struct:pulled-point 0 0 20 0 0 0) #(struct:pulled-p"
 #"oint 0 0 20 20 0 0) #(struct:pulled-point 0 0 0 20 0 0)) 255 \"red\""
 #"))) #(struct:translate 0 0 #(struct:crop (#(struct:point 0 0) #(stru"
 #"ct:point 450 0) #(struct:point 450 450) #(struct:point 0 450)) #(str"
 #"uct:translate 0 0 #(struct:overlay #(struct:translate 30 150 #(struc"
 #"t:translate 0 0 #(struct:polygon (#(struct:pulled-point 0 0 0 0 0 0)"
 #" #(struct:pulled-point 0 0 20 0 0 0) #(struct:pulled-point 0 0 20 20"
 #" 0 0) #(struct:pulled-point 0 0 0 20 0 0)) 255 \"red\"))) #(struct:t"
 #"ranslate 0 0 #(struct:crop (#(struct:point 0 0) #(struct:point 450 0"
 #") #(struct:point 450 450) #(struct:point 0 450)) #(struct:translate "
 #"0 0 #(struct:overlay #(struct:translate 70 150 #(struct:translate 0 "
 #"0 #(struct:polygon (#(struct:pulled-point 0 0 0 0 0 0) #(struct:pull"
 #"ed-point 0 0 20 0 0 0) #(struct:pulled-point 0 0 20 20 0 0) #(struct"
 #":pulled-point 0 0 0 20 0 0)) 255 \"red\"))) #(struct:translate 0 0 #"
 #"(struct:crop (#(struct:point 0 0) #(struct:point 450 0) #(struct:poi"
 #"nt 450 450) #(struct:point 0 450)) #(struct:translate 0 0 #(struct:o"
 #"verlay #(struct:translate 110 150 #(struct:translate 0 0 #(struct:po"
 #"lygon (#(struct:pulled-point 0 0 0 0 0 0) #(struct:pulled-point 0 0 "
 #"20 0 0 0) #(struct:pulled-point 0 0 20 20 0 0) #(struct:pulled-point"
 #" 0 0 0 20 0 0)) 255 \"red\"))) #(struct:translate 0 0 #(struct:crop "
 #"(#(struct:point 0 0) #(struct:point 450 0) #(struct:point 450 450) #"
 #"(struct:point 0 450)) #(struct:translate 0 0 #(struct:overlay #(stru"
 #"ct:translate 150 150 #(struct:translate 0 0 #(struct:polygon (#(stru"
 #"ct:pulled-point 0 0 0 0 0 0) #(struct:pulled-point 0 0 20 0 0 0) #(s"
 #"truct:pulled-point 0 0 20 20 0 0) #(struct:pulled-point 0 0 0 20 0 0"
 #")) 255 \"red\"))) #(struct:translate 0 0 #(struct:crop (#(struct:poi"
 #"nt 0 0) #(struct:point 450 0) #(struct:point 450 450) #(struct:point"
 #" 0 450)) #(struct:translate 0 0 #(struct:overlay #(struct:translate "
 #"190 150 #(struct:translate 0 0 #(struct:polygon (#(struct:pulled-poi"
 #"nt 0 0 0 0 0 0) #(struct:pulled-point 0 0 20 0 0 0) #(struct:pulled-"
 #"point 0 0 20 20 0 0) #(struct:pul"
 #"led-point 0 0 0 20 0 0)) 255 \"red\"))) #(struct:translate 0 0 #(str"
 #"uct:crop (#(struct:point 0 0) #(struct:point 450 0) #(struct:point 4"
 #"50 450) #(struct:point 0 450)) #(struct:translate 0 0 #(struct:overl"
 #"ay #(struct:translate 230 150 #(struct:translate 0 0 #(struct:polygo"
 #"n (#(struct:pulled-point 0 0 0 0 0 0) #(struct:pulled-point 0 0 20 0"
 #" 0 0) #(struct:pulled-point 0 0 20 20 0 0) #(struct:pulled-point 0 0"
 #" 0 20 0 0)) 255 \"red\"))) #(struct:translate 0 0 #(struct:crop (#(s"
 #"truct:point 0 0) #(struct:point 450 0) #(struct:point 450 450) #(str"
 #"uct:point 0 450)) #(struct:translate 0 0 #(struct:overlay #(struct:t"
 #"ranslate 270 150 #(struct:translate 0 0 #(struct:polygon (#(struct:p"
 #"ulled-point 0 0 0 0 0 0) #(struct:pulled-point 0 0 20 0 0 0) #(struc"
 #"t:pulled-point 0 0 20 20 0 0) #(struct:pulled-point 0 0 0 20 0 0)) 2"
 #"55 \"red\"))) #(struct:translate 0 0 #(struct:crop (#(struct:point 0"
 #" 0) #(struct:point 450 0) #(struct:point 450 450) #(struct:point 0 4"
 #"50)) #(struct:translate 0 0 #(struct:overlay #(struct:translate 310 "
 #"150 #(struct:translate 0 0 #(struct:polygon (#(struct:pulled-point 0"
 #" 0 0 0 0 0) #(struct:pulled-point 0 0 20 0 0 0) #(struct:pulled-poin"
 #"t 0 0 20 20 0 0) #(struct:pulled-point 0 0 0 20 0 0)) 255 \"red\")))"
 #" #(struct:translate 0 0 #(struct:crop (#(struct:point 0 0) #(struct:"
 #"point 450 0) #(struct:point 450 450) #(struct:point 0 450)) #(struct"
 #":translate 0 0 #(struct:overlay #(struct:translate 350 150 #(struct:"
 #"translate 0 0 #(struct:polygon (#(struct:pulled-point 0 0 0 0 0 0) #"
 #"(struct:pulled-point 0 0 20 0 0 0) #(struct:pulled-point 0 0 20 20 0"
 #" 0) #(struct:pulled-point 0 0 0 20 0 0)) 255 \"red\"))) #(struct:tra"
 #"nslate 0 0 #(struct:crop (#(struct:point 0 0) #(struct:point 450 0) "
 #"#(struct:point 450 450) #(struct:point 0 450)) #(struct:translate 0 "
 #"0 #(struct:overlay #(struct:translate 390 150 #(struct:translate 0 0"
 #" #(struct:polygon (#(struct:pulled-point 0 0 0 0 0 0) #(struct:pulle"
 #"d-point 0 0 20 0 0 0) #(struct:pulled-point 0 0 20 20 0 0) #(struct:"
 #"pulled-point 0 0 0 20 0 0)) 255 \"red\"))) #(struct:translate 0 0 #("
 #"struct:crop (#(struct:point 0 0) #(struct:point 450 0) #(struct:poin"
 #"t 450 450) #(struct:point 0 450)) #(struct:translate 0 0 #(struct:ov"
 #"erlay #(struct:translate 0 0 #(struct:translate 0 0 #(struct:polygon"
 #" (#(struct:pulled-point 0 0 0 0 0 0) #(struct:pulled-point 0 0 450 0"
 #" 0 0) #(struct:pulled-point 0 0 450 450 0 0) #(struct:pulled-point 0"
 #" 0 0 450 0 0)) outline #(struct:pen \"black\" 2 solid round round)))"
 #") #(struct:translate 0 0 #(struct:translate 0 0 #(struct:polygon (#("
 #"struct:pulled-point 0 0 0 0 0 0) #(struct:pulled-point 0 0 450 0 0 0"
 #") #(struct:pulled-point 0 0 450 450 0 0) #(struct:pulled-point 0 0 0"
 #" 450 0 0)) 255 \"white\"))))))))))))))))))))))))))))))))))))))))))))"
 #"))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))"
 #")))))))))))))))))))))))))))))))))))))))))))))))))))))) #(struct:bb 4"
 #"50 450 450) #f)"
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 24 #";;;; Function Definition"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 15 #"allinvader-draw"
0 0 24 3 1 #" "
0 0 14 3 3 #"all"
0 0 24 3 1 #" "
0 0 14 3 3 #"img"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 5 #"foldr"
0 0 24 3 1 #" "
0 0 14 3 12 #"invader-draw"
0 0 24 3 1 #" "
0 0 14 3 3 #"img"
0 0 24 3 1 #" "
0 0 14 3 3 #"all"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 10 #";;;; Tests"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 15 #"allinvader-draw"
0 0 24 3 1 #" "
0 0 14 3 3 #"All"
0 0 24 3 1 #" "
0 0 14 3 10 #"BACKGROUND"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 6           4 67 16522
(
 #"(#(struct:crop (#(struct:point 0 0) #(struct:point 450 0) #(struct:p"
 #"oint 450 450) #(struct:point 0 450)) #(struct:translate 0 0 #(struct"
 #":overlay #(struct:translate 30 60 #(struct:translate 0 0 #(struct:po"
 #"lygon (#(struct:pulled-point 0 0 0 0 0 0) #(struct:pulled-point 0 0 "
 #"20 0 0 0) #(struct:pulled-point 0 0 20 20 0 0) #(struct:pulled-point"
 #" 0 0 0 20 0 0)) 255 \"red\"))) #(struct:translate 0 0 #(struct:crop "
 #"(#(struct:point 0 0) #(struct:point 450 0) #(struct:point 450 450) #"
 #"(struct:point 0 450)) #(struct:translate 0 0 #(struct:overlay #(stru"
 #"ct:translate 70 60 #(struct:translate 0 0 #(struct:polygon (#(struct"
 #":pulled-point 0 0 0 0 0 0) #(struct:pulled-point 0 0 20 0 0 0) #(str"
 #"uct:pulled-point 0 0 20 20 0 0) #(struct:pulled-point 0 0 0 20 0 0))"
 #" 255 \"red\"))) #(struct:translate 0 0 #(struct:crop (#(struct:point"
 #" 0 0) #(struct:point 450 0) #(struct:point 450 450) #(struct:point 0"
 #" 450)) #(struct:translate 0 0 #(struct:overlay #(struct:translate 11"
 #"0 60 #(struct:translate 0 0 #(struct:polygon (#(struct:pulled-point "
 #"0 0 0 0 0 0) #(struct:pulled-point 0 0 20 0 0 0) #(struct:pulled-poi"
 #"nt 0 0 20 20 0 0) #(struct:pulled-point 0 0 0 20 0 0)) 255 \"red\"))"
 #") #(struct:translate 0 0 #(struct:crop (#(struct:point 0 0) #(struct"
 #":point 450 0) #(struct:point 450 450) #(struct:point 0 450)) #(struc"
 #"t:translate 0 0 #(struct:overlay #(struct:translate 150 60 #(struct:"
 #"translate 0 0 #(struct:polygon (#(struct:pulled-point 0 0 0 0 0 0) #"
 #"(struct:pulled-point 0 0 20 0 0 0) #(struct:pulled-point 0 0 20 20 0"
 #" 0) #(struct:pulled-point 0 0 0 20 0 0)) 255 \"red\"))) #(struct:tra"
 #"nslate 0 0 #(struct:crop (#(struct:point 0 0) #(struct:point 450 0) "
 #"#(struct:point 450 450) #(struct:point 0 450)) #(struct:translate 0 "
 #"0 #(struct:overlay #(struct:translate 190 60 #(struct:translate 0 0 "
 #"#(struct:polygon (#(struct:pulled-point 0 0 0 0 0 0) #(struct:pulled"
 #"-point 0 0 20 0 0 0) #(struct:pulled-point 0 0 20 20 0 0) #(struct:p"
 #"ulled-point 0 0 0 20 0 0)) 255 \"red\"))) #(struct:translate 0 0 #(s"
 #"truct:crop (#(struct:point 0 0) #(struct:point 450 0) #(struct:point"
 #" 450 450) #(struct:point 0 450)) #(struct:translate 0 0 #(struct:ove"
 #"rlay #(struct:translate 230 60 #(struct:translate 0 0 #(struct:polyg"
 #"on (#(struct:pulled-point 0 0 0 0 0 0) #(struct:pulled-point 0 0 20 "
 #"0 0 0) #(struct:pulled-point 0 0 20 20 0 0) #(struct:pulled-point 0 "
 #"0 0 20 0 0)) 255 \"red\"))) #(struct:translate 0 0 #(struct:crop (#("
 #"struct:point 0 0) #(struct:point 450 0) #(struct:point 450 450) #(st"
 #"ruct:point 0 450)) #(struct:translate 0 0 #(struct:overlay #(struct:"
 #"translate 270 60 #(struct:translate 0 0 #(struct:polygon (#(struct:p"
 #"ulled-point 0 0 0 0 0 0) #(struct:pulled-point 0 0 20 0 0 0) #(struc"
 #"t:pulled-point 0 0 20 20 0 0) #(struct:pulled-point 0 0 0 20 0 0)) 2"
 #"55 \"red\"))) #(struct:translate 0 0 #(struct:crop (#(struct:point 0"
 #" 0) #(struct:point 450 0) #(struct:point 450 450) #(struct:point 0 4"
 #"50)) #(struct:translate 0 0 #(struct:overlay #(struct:translate 310 "
 #"60 #(struct:translate 0 0 #(struct:polygon (#(struct:pulled-point 0 "
 #"0 0 0 0 0) #(struct:pulled-point 0 0 20 0 0 0) #(struct:pulled-point"
 #" 0 0 20 20 0 0) #(struct:pulled-point 0 0 0 20 0 0)) 255 \"red\"))) "
 #"#(struct:translate 0 0 #(struct:crop (#(struct:point 0 0) #(struct:p"
 #"oint 450 0) #(struct:point 450 450) #(struct:point 0 450)) #(struct:"
 #"translate 0 0 #(struct:overlay #(struct:translate 350 60 #(struct:tr"
 #"anslate 0 0 #(struct:polygon (#(struct:pulled-point 0 0 0 0 0 0) #(s"
 #"truct:pulled-point 0 0 20 0 0 0) #(struct:pulled-point 0 0 20 20 0 0"
 #") #(struct:pulled-point 0 0 0 20 0 0)) 255 \"red\"))) #(struct:trans"
 #"late 0 0 #(struct:crop (#(struct:point 0 0) #(struct:point 450 0) #("
 #"struct:point 450 450) #(struct:point 0 450)) #(struct:translate 0 0 "
 #"#(struct:overlay #(struct:translate 390 60 #(struct:translate 0 0 #("
 #"struct:polygon (#(struct:pulled-point 0 0 0 0 0 0) #(struct:pulled-p"
 #"oint 0 0 20 0 0 0) #(struct:pulled-point 0 0 20 20 0 0) #(struct:pul"
 #"led-point 0 0 0 20 0 0)) 255 \"red\"))) #(struct:translate 0 0 #(str"
 #"uct:crop (#(struct:point 0 0) #(struct:point 450 0) #(struct:point 4"
 #"50 450) #(struct:point 0 450)) #(struct:translate 0 0 #(struct:overl"
 #"ay #(struct:translate 30 90 #(struct:translate 0 0 #(struct:polygon "
 #"(#(struct:pulled-point 0 0 0 0 0 0) #(struct:pulled-point 0 0 20 0 0"
 #" 0) #(struct:pulled-point 0 0 20 20 0 0) #(struct:pulled-point 0 0 0"
 #" 20 0 0)) 255 \"red\"))) #(struct:translate 0 0 #(struct:crop (#(str"
 #"uct:point 0 0) #(struct:point 450 0) #(struct:point 450 450) #(struc"
 #"t:point 0 450)) #(struct:translate 0 0 #(struct:overlay #(struct:tra"
 #"nslate 70 90 #(struct:translate 0 0 #(struct:polygon (#(struct:pulle"
 #"d-point 0 0 0 0 0 0) #(struct:pulled-point 0 0 20 0 0 0) #(struct:pu"
 #"lled-point 0 0 20 20 0 0) #(struct"
 #":pulled-point 0 0 0 20 0 0)) 255 \"red\"))) #(struct:translate 0 0 #"
 #"(struct:crop (#(struct:point 0 0) #(struct:point 450 0) #(struct:poi"
 #"nt 450 450) #(struct:point 0 450)) #(struct:translate 0 0 #(struct:o"
 #"verlay #(struct:translate 110 90 #(struct:translate 0 0 #(struct:pol"
 #"ygon (#(struct:pulled-point 0 0 0 0 0 0) #(struct:pulled-point 0 0 2"
 #"0 0 0 0) #(struct:pulled-point 0 0 20 20 0 0) #(struct:pulled-point "
 #"0 0 0 20 0 0)) 255 \"red\"))) #(struct:translate 0 0 #(struct:crop ("
 #"#(struct:point 0 0) #(struct:point 450 0) #(struct:point 450 450) #("
 #"struct:point 0 450)) #(struct:translate 0 0 #(struct:overlay #(struc"
 #"t:translate 150 90 #(struct:translate 0 0 #(struct:polygon (#(struct"
 #":pulled-point 0 0 0 0 0 0) #(struct:pulled-point 0 0 20 0 0 0) #(str"
 #"uct:pulled-point 0 0 20 20 0 0) #(struct:pulled-point 0 0 0 20 0 0))"
 #" 255 \"red\"))) #(struct:translate 0 0 #(struct:crop (#(struct:point"
 #" 0 0) #(struct:point 450 0) #(struct:point 450 450) #(struct:point 0"
 #" 450)) #(struct:translate 0 0 #(struct:overlay #(struct:translate 19"
 #"0 90 #(struct:translate 0 0 #(struct:polygon (#(struct:pulled-point "
 #"0 0 0 0 0 0) #(struct:pulled-point 0 0 20 0 0 0) #(struct:pulled-poi"
 #"nt 0 0 20 20 0 0) #(struct:pulled-point 0 0 0 20 0 0)) 255 \"red\"))"
 #") #(struct:translate 0 0 #(struct:crop (#(struct:point 0 0) #(struct"
 #":point 450 0) #(struct:point 450 450) #(struct:point 0 450)) #(struc"
 #"t:translate 0 0 #(struct:overlay #(struct:translate 230 90 #(struct:"
 #"translate 0 0 #(struct:polygon (#(struct:pulled-point 0 0 0 0 0 0) #"
 #"(struct:pulled-point 0 0 20 0 0 0) #(struct:pulled-point 0 0 20 20 0"
 #" 0) #(struct:pulled-point 0 0 0 20 0 0)) 255 \"red\"))) #(struct:tra"
 #"nslate 0 0 #(struct:crop (#(struct:point 0 0) #(struct:point 450 0) "
 #"#(struct:point 450 450) #(struct:point 0 450)) #(struct:translate 0 "
 #"0 #(struct:overlay #(struct:translate 270 90 #(struct:translate 0 0 "
 #"#(struct:polygon (#(struct:pulled-point 0 0 0 0 0 0) #(struct:pulled"
 #"-point 0 0 20 0 0 0) #(struct:pulled-point 0 0 20 20 0 0) #(struct:p"
 #"ulled-point 0 0 0 20 0 0)) 255 \"red\"))) #(struct:translate 0 0 #(s"
 #"truct:crop (#(struct:point 0 0) #(struct:point 450 0) #(struct:point"
 #" 450 450) #(struct:point 0 450)) #(struct:translate 0 0 #(struct:ove"
 #"rlay #(struct:translate 310 90 #(struct:translate 0 0 #(struct:polyg"
 #"on (#(struct:pulled-point 0 0 0 0 0 0) #(struct:pulled-point 0 0 20 "
 #"0 0 0) #(struct:pulled-point 0 0 20 20 0 0) #(struct:pulled-point 0 "
 #"0 0 20 0 0)) 255 \"red\"))) #(struct:translate 0 0 #(struct:crop (#("
 #"struct:point 0 0) #(struct:point 450 0) #(struct:point 450 450) #(st"
 #"ruct:point 0 450)) #(struct:translate 0 0 #(struct:overlay #(struct:"
 #"translate 350 90 #(struct:translate 0 0 #(struct:polygon (#(struct:p"
 #"ulled-point 0 0 0 0 0 0) #(struct:pulled-point 0 0 20 0 0 0) #(struc"
 #"t:pulled-point 0 0 20 20 0 0) #(struct:pulled-point 0 0 0 20 0 0)) 2"
 #"55 \"red\"))) #(struct:translate 0 0 #(struct:crop (#(struct:point 0"
 #" 0) #(struct:point 450 0) #(struct:point 450 450) #(struct:point 0 4"
 #"50)) #(struct:translate 0 0 #(struct:overlay #(struct:translate 390 "
 #"90 #(struct:translate 0 0 #(struct:polygon (#(struct:pulled-point 0 "
 #"0 0 0 0 0) #(struct:pulled-point 0 0 20 0 0 0) #(struct:pulled-point"
 #" 0 0 20 20 0 0) #(struct:pulled-point 0 0 0 20 0 0)) 255 \"red\"))) "
 #"#(struct:translate 0 0 #(struct:crop (#(struct:point 0 0) #(struct:p"
 #"oint 450 0) #(struct:point 450 450) #(struct:point 0 450)) #(struct:"
 #"translate 0 0 #(struct:overlay #(struct:translate 30 120 #(struct:tr"
 #"anslate 0 0 #(struct:polygon (#(struct:pulled-point 0 0 0 0 0 0) #(s"
 #"truct:pulled-point 0 0 20 0 0 0) #(struct:pulled-point 0 0 20 20 0 0"
 #") #(struct:pulled-point 0 0 0 20 0 0)) 255 \"red\"))) #(struct:trans"
 #"late 0 0 #(struct:crop (#(struct:point 0 0) #(struct:point 450 0) #("
 #"struct:point 450 450) #(struct:point 0 450)) #(struct:translate 0 0 "
 #"#(struct:overlay #(struct:translate 70 120 #(struct:translate 0 0 #("
 #"struct:polygon (#(struct:pulled-point 0 0 0 0 0 0) #(struct:pulled-p"
 #"oint 0 0 20 0 0 0) #(struct:pulled-point 0 0 20 20 0 0) #(struct:pul"
 #"led-point 0 0 0 20 0 0)) 255 \"red\"))) #(struct:translate 0 0 #(str"
 #"uct:crop (#(struct:point 0 0) #(struct:point 450 0) #(struct:point 4"
 #"50 450) #(struct:point 0 450)) #(struct:translate 0 0 #(struct:overl"
 #"ay #(struct:translate 110 120 #(struct:translate 0 0 #(struct:polygo"
 #"n (#(struct:pulled-point 0 0 0 0 0 0) #(struct:pulled-point 0 0 20 0"
 #" 0 0) #(struct:pulled-point 0 0 20 20 0 0) #(struct:pulled-point 0 0"
 #" 0 20 0 0)) 255 \"red\"))) #(struct:translate 0 0 #(struct:crop (#(s"
 #"truct:point 0 0) #(struct:point 450 0) #(struct:point 450 450) #(str"
 #"uct:point 0 450)) #(struct:translate 0 0 #(struct:overlay #(struct:t"
 #"ranslate 150 120 #(struct:translate 0 0 #(struct:polygon (#(struct:p"
 #"ulled-point 0 0 0 0 0 0) #(struct:pulled-point 0 0 20 0 0 0) #(struc"
 #"t:pulled-point 0 0 20 20 0 0) #(struct:pulled-point 0 0 0 20 0 0)) 2"
 #"55 \"red\"))) #(struct:translate 0 0 #(struct:crop (#(struct:point 0"
 #" 0) #(struct:point 450 0) #(struct:point 450 450) #(struct:point 0 4"
 #"50)) #(struct:translate 0 0 #(struct:overlay #(struct:translate 190 "
 #"120 #(struct:translate 0 0 #(struct:polygon (#(struct:pulled-point 0"
 #" 0 0 0 0 0) #(struct:pulled-point 0 0 20 0 0 0) #(struct:pulled-poin"
 #"t 0 0 20 20 0 0) #(struct:pulled-point 0 0 0 20 0 0)) 255 \"red\")))"
 #" #(struct:translate 0 0 #(struct:crop (#(struct:point 0 0) #(struct:"
 #"point 450 0) #(struct:point 450 450) #(struct:point 0 450)) #(struct"
 #":translate 0 0 #(struct:overlay #(struct:translate 230 120 #(struct:"
 #"translate 0 0 #(struct:polygon (#(struct:pulled-point 0 0 0 0 0 0) #"
 #"(struct:pulled-point 0 0 20 0 0 0) #(struct:pulled-point 0 0 20 20 0"
 #" 0) #(struct:pulled-point 0 0 0 20 0 0)) 255 \"red\"))) #(struct:tra"
 #"nslate 0 0 #(struct:crop (#(struct:point 0 0) #(struct:point 450 0) "
 #"#(struct:point 450 450) #(struct:point 0 450)) #(struct:translate 0 "
 #"0 #(struct:overlay #(struct:translate 270 120 #(struct:translate 0 0"
 #" #(struct:polygon (#(struct:pulled-point 0 0 0 0 0 0) #(struct:pulle"
 #"d-point 0 0 20 0 0 0) #(struct:pulled-point 0 0 20 20 0 0) #(struct:"
 #"pulled-point 0 0 0 20 0 0)) 255 \"red\"))) #(struct:translate 0 0 #("
 #"struct:crop (#(struct:point 0 0) #(struct:point 450 0) #(struct:poin"
 #"t 450 450) #(struct:point 0 450)) #(struct:translate 0 0 #(struct:ov"
 #"erlay #(struct:translate 310 120 #(struct:translate 0 0 #(struct:pol"
 #"ygon (#(struct:pulled-point 0 0 0 0 0 0) #(struct:pulled-point 0 0 2"
 #"0 0 0 0) #(struct:pulled-point 0 0 20 20 0 0) #(struct:pulled-point "
 #"0 0 0 20 0 0)) 255 \"red\"))) #(struct:translate 0 0 #(struct:crop ("
 #"#(struct:point 0 0) #(struct:point 450 0) #(struct:point 450 450) #("
 #"struct:point 0 450)) #(struct:translate 0 0 #(struct:overlay #(struc"
 #"t:translate 350 120 #(struct:translate 0 0 #(struct:polygon (#(struc"
 #"t:pulled-point 0 0 0 0 0 0) #(struct:pulled-point 0 0 20 0 0 0) #(st"
 #"ruct:pulled-point 0 0 20 20 0 0) #(struct:pulled-point 0 0 0 20 0 0)"
 #") 255 \"red\"))) #(struct:translate 0 0 #(struct:crop (#(struct:poin"
 #"t 0 0) #(struct:point 450 0) #(struct:point 450 450) #(struct:point "
 #"0 450)) #(struct:translate 0 0 #(struct:overlay #(struct:translate 3"
 #"90 120 #(struct:translate 0 0 #(struct:polygon (#(struct:pulled-poin"
 #"t 0 0 0 0 0 0) #(struct:pulled-point 0 0 20 0 0 0) #(struct:pulled-p"
 #"oint 0 0 20 20 0 0) #(struct:pulled-point 0 0 0 20 0 0)) 255 \"red\""
 #"))) #(struct:translate 0 0 #(struct:crop (#(struct:point 0 0) #(stru"
 #"ct:point 450 0) #(struct:point 450 450) #(struct:point 0 450)) #(str"
 #"uct:translate 0 0 #(struct:overlay #(struct:translate 30 150 #(struc"
 #"t:translate 0 0 #(struct:polygon (#(struct:pulled-point 0 0 0 0 0 0)"
 #" #(struct:pulled-point 0 0 20 0 0 0) #(struct:pulled-point 0 0 20 20"
 #" 0 0) #(struct:pulled-point 0 0 0 20 0 0)) 255 \"red\"))) #(struct:t"
 #"ranslate 0 0 #(struct:crop (#(struct:point 0 0) #(struct:point 450 0"
 #") #(struct:point 450 450) #(struct:point 0 450)) #(struct:translate "
 #"0 0 #(struct:overlay #(struct:translate 70 150 #(struct:translate 0 "
 #"0 #(struct:polygon (#(struct:pulled-point 0 0 0 0 0 0) #(struct:pull"
 #"ed-point 0 0 20 0 0 0) #(struct:pulled-point 0 0 20 20 0 0) #(struct"
 #":pulled-point 0 0 0 20 0 0)) 255 \"red\"))) #(struct:translate 0 0 #"
 #"(struct:crop (#(struct:point 0 0) #(struct:point 450 0) #(struct:poi"
 #"nt 450 450) #(struct:point 0 450)) #(struct:translate 0 0 #(struct:o"
 #"verlay #(struct:translate 110 150 #(struct:translate 0 0 #(struct:po"
 #"lygon (#(struct:pulled-point 0 0 0 0 0 0) #(struct:pulled-point 0 0 "
 #"20 0 0 0) #(struct:pulled-point 0 0 20 20 0 0) #(struct:pulled-point"
 #" 0 0 0 20 0 0)) 255 \"red\"))) #(struct:translate 0 0 #(struct:crop "
 #"(#(struct:point 0 0) #(struct:point 450 0) #(struct:point 450 450) #"
 #"(struct:point 0 450)) #(struct:translate 0 0 #(struct:overlay #(stru"
 #"ct:translate 150 150 #(struct:translate 0 0 #(struct:polygon (#(stru"
 #"ct:pulled-point 0 0 0 0 0 0) #(struct:pulled-point 0 0 20 0 0 0) #(s"
 #"truct:pulled-point 0 0 20 20 0 0) #(struct:pulled-point 0 0 0 20 0 0"
 #")) 255 \"red\"))) #(struct:translate 0 0 #(struct:crop (#(struct:poi"
 #"nt 0 0) #(struct:point 450 0) #(struct:point 450 450) #(struct:point"
 #" 0 450)) #(struct:translate 0 0 #(struct:overlay #(struct:translate "
 #"190 150 #(struct:translate 0 0 #(struct:polygon (#(struct:pulled-poi"
 #"nt 0 0 0 0 0 0) #(struct:pulled-point 0 0 20 0 0 0) #(struct:pulled-"
 #"point 0 0 20 20 0 0) #(struct:pul"
 #"led-point 0 0 0 20 0 0)) 255 \"red\"))) #(struct:translate 0 0 #(str"
 #"uct:crop (#(struct:point 0 0) #(struct:point 450 0) #(struct:point 4"
 #"50 450) #(struct:point 0 450)) #(struct:translate 0 0 #(struct:overl"
 #"ay #(struct:translate 230 150 #(struct:translate 0 0 #(struct:polygo"
 #"n (#(struct:pulled-point 0 0 0 0 0 0) #(struct:pulled-point 0 0 20 0"
 #" 0 0) #(struct:pulled-point 0 0 20 20 0 0) #(struct:pulled-point 0 0"
 #" 0 20 0 0)) 255 \"red\"))) #(struct:translate 0 0 #(struct:crop (#(s"
 #"truct:point 0 0) #(struct:point 450 0) #(struct:point 450 450) #(str"
 #"uct:point 0 450)) #(struct:translate 0 0 #(struct:overlay #(struct:t"
 #"ranslate 270 150 #(struct:translate 0 0 #(struct:polygon (#(struct:p"
 #"ulled-point 0 0 0 0 0 0) #(struct:pulled-point 0 0 20 0 0 0) #(struc"
 #"t:pulled-point 0 0 20 20 0 0) #(struct:pulled-point 0 0 0 20 0 0)) 2"
 #"55 \"red\"))) #(struct:translate 0 0 #(struct:crop (#(struct:point 0"
 #" 0) #(struct:point 450 0) #(struct:point 450 450) #(struct:point 0 4"
 #"50)) #(struct:translate 0 0 #(struct:overlay #(struct:translate 310 "
 #"150 #(struct:translate 0 0 #(struct:polygon (#(struct:pulled-point 0"
 #" 0 0 0 0 0) #(struct:pulled-point 0 0 20 0 0 0) #(struct:pulled-poin"
 #"t 0 0 20 20 0 0) #(struct:pulled-point 0 0 0 20 0 0)) 255 \"red\")))"
 #" #(struct:translate 0 0 #(struct:crop (#(struct:point 0 0) #(struct:"
 #"point 450 0) #(struct:point 450 450) #(struct:point 0 450)) #(struct"
 #":translate 0 0 #(struct:overlay #(struct:translate 350 150 #(struct:"
 #"translate 0 0 #(struct:polygon (#(struct:pulled-point 0 0 0 0 0 0) #"
 #"(struct:pulled-point 0 0 20 0 0 0) #(struct:pulled-point 0 0 20 20 0"
 #" 0) #(struct:pulled-point 0 0 0 20 0 0)) 255 \"red\"))) #(struct:tra"
 #"nslate 0 0 #(struct:crop (#(struct:point 0 0) #(struct:point 450 0) "
 #"#(struct:point 450 450) #(struct:point 0 450)) #(struct:translate 0 "
 #"0 #(struct:overlay #(struct:translate 390 150 #(struct:translate 0 0"
 #" #(struct:polygon (#(struct:pulled-point 0 0 0 0 0 0) #(struct:pulle"
 #"d-point 0 0 20 0 0 0) #(struct:pulled-point 0 0 20 20 0 0) #(struct:"
 #"pulled-point 0 0 0 20 0 0)) 255 \"red\"))) #(struct:translate 0 0 #("
 #"struct:crop (#(struct:point 0 0) #(struct:point 450 0) #(struct:poin"
 #"t 450 450) #(struct:point 0 450)) #(struct:translate 0 0 #(struct:ov"
 #"erlay #(struct:translate 0 0 #(struct:translate 0 0 #(struct:polygon"
 #" (#(struct:pulled-point 0 0 0 0 0 0) #(struct:pulled-point 0 0 450 0"
 #" 0 0) #(struct:pulled-point 0 0 450 450 0 0) #(struct:pulled-point 0"
 #" 0 0 450 0 0)) outline #(struct:pen \"black\" 2 solid round round)))"
 #") #(struct:translate 0 0 #(struct:translate 0 0 #(struct:polygon (#("
 #"struct:pulled-point 0 0 0 0 0 0) #(struct:pulled-point 0 0 450 0 0 0"
 #") #(struct:pulled-point 0 0 450 450 0 0) #(struct:pulled-point 0 0 0"
 #" 450 0 0)) 255 \"white\"))))))))))))))))))))))))))))))))))))))))))))"
 #"))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))"
 #")))))))))))))))))))))))))))))))))))))))))))))))))))))) #(struct:bb 4"
 #"50 450 450) #f)"
) 0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 14 #";;;; Signature"
0 0 24 29 1 #"\n"
0 0 17 3 43 #";; spaceship-draw: Spaceship Image -> Image"
0 0 24 29 1 #"\n"
0 0 17 3 12 #";;;; Purpose"
0 0 24 29 1 #"\n"
0 0 17 3 34 #";; GIVEN: a spaceship and an image"
0 0 24 29 1 #"\n"
0 0 17 3 66
#";; RETURN: a new image with the spaceship drawn on the given image"
0 0 24 29 1 #"\n"
0 0 17 3 13 #";;;; Examples"
0 0 24 29 1 #"\n"
0 0 17 3 53 #";; (spaceship-draw (make-posn 200 380) BACKGROUND) =>"
0 0 24 29 1 #"\n"
0 6           4 67 1069
(
 #"(#(struct:crop (#(struct:point 0 0) #(struct:point 450 0) #(struct:p"
 #"oint 450 450) #(struct:point 0 450)) #(struct:translate 0 0 #(struct"
 #":overlay #(struct:translate 185 372 #(struct:translate 0 0 #(struct:"
 #"polygon (#(struct:pulled-point 0 0 0 0 0 0) #(struct:pulled-point 0 "
 #"0 30 0 0 0) #(struct:pulled-point 0 0 30 16 0 0) #(struct:pulled-poi"
 #"nt 0 0 0 16 0 0)) 255 \"black\"))) #(struct:translate 0 0 #(struct:c"
 #"rop (#(struct:point 0 0) #(struct:point 450 0) #(struct:point 450 45"
 #"0) #(struct:point 0 450)) #(struct:translate 0 0 #(struct:overlay #("
 #"struct:translate 0 0 #(struct:translate 0 0 #(struct:polygon (#(stru"
 #"ct:pulled-point 0 0 0 0 0 0) #(struct:pulled-point 0 0 450 0 0 0) #("
 #"struct:pulled-point 0 0 450 450 0 0) #(struct:pulled-point 0 0 0 450"
 #" 0 0)) outline #(struct:pen \"black\" 2 solid round round)))) #(stru"
 #"ct:translate 0 0 #(struct:translate 0 0 #(struct:polygon (#(struct:p"
 #"ulled-point 0 0 0 0 0 0) #(struct:pulled-point 0 0 450 0 0 0) #(stru"
 #"ct:pulled-point 0 0 450 450 0 0) #(struct:pulled-point 0 0 0 450 0 0"
 #")) 255 \"white\")))))))))) #(struct:bb 450 450 450) #f)"
) 0 0 24 29 1 #"\n"
0 0 17 3 53 #";; (spaceship-draw (make-posn 150 380) BACKGROUND) =>"
0 0 24 29 1 #"\n"
0 6           4 67 1069
(
 #"(#(struct:crop (#(struct:point 0 0) #(struct:point 450 0) #(struct:p"
 #"oint 450 450) #(struct:point 0 450)) #(struct:translate 0 0 #(struct"
 #":overlay #(struct:translate 135 372 #(struct:translate 0 0 #(struct:"
 #"polygon (#(struct:pulled-point 0 0 0 0 0 0) #(struct:pulled-point 0 "
 #"0 30 0 0 0) #(struct:pulled-point 0 0 30 16 0 0) #(struct:pulled-poi"
 #"nt 0 0 0 16 0 0)) 255 \"black\"))) #(struct:translate 0 0 #(struct:c"
 #"rop (#(struct:point 0 0) #(struct:point 450 0) #(struct:point 450 45"
 #"0) #(struct:point 0 450)) #(struct:translate 0 0 #(struct:overlay #("
 #"struct:translate 0 0 #(struct:translate 0 0 #(struct:polygon (#(stru"
 #"ct:pulled-point 0 0 0 0 0 0) #(struct:pulled-point 0 0 450 0 0 0) #("
 #"struct:pulled-point 0 0 450 450 0 0) #(struct:pulled-point 0 0 0 450"
 #" 0 0)) outline #(struct:pen \"black\" 2 solid round round)))) #(stru"
 #"ct:translate 0 0 #(struct:translate 0 0 #(struct:polygon (#(struct:p"
 #"ulled-point 0 0 0 0 0 0) #(struct:pulled-point 0 0 450 0 0 0) #(stru"
 #"ct:pulled-point 0 0 450 450 0 0) #(struct:pulled-point 0 0 0 450 0 0"
 #")) 255 \"white\")))))))))) #(struct:bb 450 450 450) #f)"
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 24 #";;;; Function Definition"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 14 #"spaceship-draw"
0 0 24 3 1 #" "
0 0 14 3 9 #"spaceship"
0 0 24 3 1 #" "
0 0 14 3 3 #"img"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 11 #"place-image"
0 0 24 3 1 #" "
0 0 14 3 15 #"SPACESHIP-IMAGE"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"               ("
0 0 14 3 6 #"posn-x"
0 0 24 3 1 #" "
0 0 14 3 9 #"spaceship"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"               ("
0 0 14 3 6 #"posn-y"
0 0 24 3 1 #" "
0 0 14 3 9 #"spaceship"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"               "
0 0 14 3 3 #"img"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 10 #";;;; Tests"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 14 #"spaceship-draw"
0 0 24 3 2 #" ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 21 3 3 #"200"
0 0 24 3 1 #" "
0 0 21 3 3 #"380"
0 0 24 3 2 #") "
0 0 14 3 10 #"BACKGROUND"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"              "
0 6           4 67 1069
(
 #"(#(struct:crop (#(struct:point 0 0) #(struct:point 450 0) #(struct:p"
 #"oint 450 450) #(struct:point 0 450)) #(struct:translate 0 0 #(struct"
 #":overlay #(struct:translate 185 372 #(struct:translate 0 0 #(struct:"
 #"polygon (#(struct:pulled-point 0 0 0 0 0 0) #(struct:pulled-point 0 "
 #"0 30 0 0 0) #(struct:pulled-point 0 0 30 16 0 0) #(struct:pulled-poi"
 #"nt 0 0 0 16 0 0)) 255 \"black\"))) #(struct:translate 0 0 #(struct:c"
 #"rop (#(struct:point 0 0) #(struct:point 450 0) #(struct:point 450 45"
 #"0) #(struct:point 0 450)) #(struct:translate 0 0 #(struct:overlay #("
 #"struct:translate 0 0 #(struct:translate 0 0 #(struct:polygon (#(stru"
 #"ct:pulled-point 0 0 0 0 0 0) #(struct:pulled-point 0 0 450 0 0 0) #("
 #"struct:pulled-point 0 0 450 450 0 0) #(struct:pulled-point 0 0 0 450"
 #" 0 0)) outline #(struct:pen \"black\" 2 solid round round)))) #(stru"
 #"ct:translate 0 0 #(struct:translate 0 0 #(struct:polygon (#(struct:p"
 #"ulled-point 0 0 0 0 0 0) #(struct:pulled-point 0 0 450 0 0 0) #(stru"
 #"ct:pulled-point 0 0 450 450 0 0) #(struct:pulled-point 0 0 0 450 0 0"
 #")) 255 \"white\")))))))))) #(struct:bb 450 450 450) #f)"
) 0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 14 #"spaceship-draw"
0 0 24 3 2 #" ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 21 3 3 #"150"
0 0 24 3 1 #" "
0 0 21 3 3 #"380"
0 0 24 3 2 #") "
0 0 14 3 10 #"BACKGROUND"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"              "
0 6           4 67 1069
(
 #"(#(struct:crop (#(struct:point 0 0) #(struct:point 450 0) #(struct:p"
 #"oint 450 450) #(struct:point 0 450)) #(struct:translate 0 0 #(struct"
 #":overlay #(struct:translate 135 372 #(struct:translate 0 0 #(struct:"
 #"polygon (#(struct:pulled-point 0 0 0 0 0 0) #(struct:pulled-point 0 "
 #"0 30 0 0 0) #(struct:pulled-point 0 0 30 16 0 0) #(struct:pulled-poi"
 #"nt 0 0 0 16 0 0)) 255 \"black\"))) #(struct:translate 0 0 #(struct:c"
 #"rop (#(struct:point 0 0) #(struct:point 450 0) #(struct:point 450 45"
 #"0) #(struct:point 0 450)) #(struct:translate 0 0 #(struct:overlay #("
 #"struct:translate 0 0 #(struct:translate 0 0 #(struct:polygon (#(stru"
 #"ct:pulled-point 0 0 0 0 0 0) #(struct:pulled-point 0 0 450 0 0 0) #("
 #"struct:pulled-point 0 0 450 450 0 0) #(struct:pulled-point 0 0 0 450"
 #" 0 0)) outline #(struct:pen \"black\" 2 solid round round)))) #(stru"
 #"ct:translate 0 0 #(struct:translate 0 0 #(struct:polygon (#(struct:p"
 #"ulled-point 0 0 0 0 0 0) #(struct:pulled-point 0 0 450 0 0 0) #(stru"
 #"ct:pulled-point 0 0 450 450 0 0) #(struct:pulled-point 0 0 0 450 0 0"
 #")) 255 \"white\")))))))))) #(struct:bb 450 450 450) #f)"
) 0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 14 #";;;; Signature"
0 0 24 29 1 #"\n"
0 0 17 3 41 #";; i-bullet-draw: I-Bullet Image -> Image"
0 0 24 29 1 #"\n"
0 0 17 3 12 #";;;; Purpose"
0 0 24 29 1 #"\n"
0 0 17 3 40 #";; GIVEN: an invader bullet and an image"
0 0 24 29 1 #"\n"
0 0 17 3 71
(
 #";; RETURN: a new image with the invader bullet drawn on the given im"
 #"age"
) 0 0 24 29 1 #"\n"
0 0 17 3 12 #";;;; Example"
0 0 24 29 1 #"\n"
0 0 17 3 52 #";; (i-bullet-draw (make-posn 200 200) BACKGROUND) =>"
0 0 24 29 1 #"\n"
0 6           4 67 927
(
 #"(#(struct:crop (#(struct:point 0 0) #(struct:point 450 0) #(struct:p"
 #"oint 450 450) #(struct:point 0 450)) #(struct:translate 0 0 #(struct"
 #":overlay #(struct:translate 198 198 #(struct:translate 2 2 #(struct:"
 #"ellipse 4 4 0 255 \"red\"))) #(struct:translate 0 0 #(struct:crop (#"
 #"(struct:point 0 0) #(struct:point 450 0) #(struct:point 450 450) #(s"
 #"truct:point 0 450)) #(struct:translate 0 0 #(struct:overlay #(struct"
 #":translate 0 0 #(struct:translate 0 0 #(struct:polygon (#(struct:pul"
 #"led-point 0 0 0 0 0 0) #(struct:pulled-point 0 0 450 0 0 0) #(struct"
 #":pulled-point 0 0 450 450 0 0) #(struct:pulled-point 0 0 0 450 0 0))"
 #" outline #(struct:pen \"black\" 2 solid round round)))) #(struct:tra"
 #"nslate 0 0 #(struct:translate 0 0 #(struct:polygon (#(struct:pulled-"
 #"point 0 0 0 0 0 0) #(struct:pulled-point 0 0 450 0 0 0) #(struct:pul"
 #"led-point 0 0 450 450 0 0) #(struct:pulled-point 0 0 0 450 0 0)) 255"
 #" \"white\")))))))))) #(struct:bb 450 450 450) #f)"
) 0 0 24 29 1 #"\n"
0 0 17 3 51 #";;(i-bullet-draw (make-posn 300 300) BACKGROUND) =>"
0 0 24 29 1 #"\n"
0 6           4 67 927
(
 #"(#(struct:crop (#(struct:point 0 0) #(struct:point 450 0) #(struct:p"
 #"oint 450 450) #(struct:point 0 450)) #(struct:translate 0 0 #(struct"
 #":overlay #(struct:translate 298 298 #(struct:translate 2 2 #(struct:"
 #"ellipse 4 4 0 255 \"red\"))) #(struct:translate 0 0 #(struct:crop (#"
 #"(struct:point 0 0) #(struct:point 450 0) #(struct:point 450 450) #(s"
 #"truct:point 0 450)) #(struct:translate 0 0 #(struct:overlay #(struct"
 #":translate 0 0 #(struct:translate 0 0 #(struct:polygon (#(struct:pul"
 #"led-point 0 0 0 0 0 0) #(struct:pulled-point 0 0 450 0 0 0) #(struct"
 #":pulled-point 0 0 450 450 0 0) #(struct:pulled-point 0 0 0 450 0 0))"
 #" outline #(struct:pen \"black\" 2 solid round round)))) #(struct:tra"
 #"nslate 0 0 #(struct:translate 0 0 #(struct:polygon (#(struct:pulled-"
 #"point 0 0 0 0 0 0) #(struct:pulled-point 0 0 450 0 0 0) #(struct:pul"
 #"led-point 0 0 450 450 0 0) #(struct:pulled-point 0 0 0 450 0 0)) 255"
 #" \"white\")))))))))) #(struct:bb 450 450 450) #f)"
) 0 0 24 29 1 #"\n"
0 0 17 3 24 #";;;; Function Definition"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 13 #"i-bullet-draw"
0 0 24 3 1 #" "
0 0 14 3 8 #"i-bullet"
0 0 24 3 1 #" "
0 0 14 3 3 #"img"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 11 #"place-image"
0 0 24 3 1 #" "
0 0 14 3 14 #"I-Bullet-IMAGE"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"               ("
0 0 14 3 6 #"posn-x"
0 0 24 3 1 #" "
0 0 14 3 8 #"i-bullet"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"               ("
0 0 14 3 6 #"posn-y"
0 0 24 3 1 #" "
0 0 14 3 8 #"i-bullet"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"               "
0 0 14 3 3 #"img"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 10 #";;;; Tests"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 13 #"i-bullet-draw"
0 0 24 3 2 #" ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 21 3 3 #"200"
0 0 24 3 1 #" "
0 0 21 3 3 #"200"
0 0 24 3 2 #") "
0 0 14 3 10 #"BACKGROUND"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"              "
0 6           4 67 927
(
 #"(#(struct:crop (#(struct:point 0 0) #(struct:point 450 0) #(struct:p"
 #"oint 450 450) #(struct:point 0 450)) #(struct:translate 0 0 #(struct"
 #":overlay #(struct:translate 198 198 #(struct:translate 2 2 #(struct:"
 #"ellipse 4 4 0 255 \"red\"))) #(struct:translate 0 0 #(struct:crop (#"
 #"(struct:point 0 0) #(struct:point 450 0) #(struct:point 450 450) #(s"
 #"truct:point 0 450)) #(struct:translate 0 0 #(struct:overlay #(struct"
 #":translate 0 0 #(struct:translate 0 0 #(struct:polygon (#(struct:pul"
 #"led-point 0 0 0 0 0 0) #(struct:pulled-point 0 0 450 0 0 0) #(struct"
 #":pulled-point 0 0 450 450 0 0) #(struct:pulled-point 0 0 0 450 0 0))"
 #" outline #(struct:pen \"black\" 2 solid round round)))) #(struct:tra"
 #"nslate 0 0 #(struct:translate 0 0 #(struct:polygon (#(struct:pulled-"
 #"point 0 0 0 0 0 0) #(struct:pulled-point 0 0 450 0 0 0) #(struct:pul"
 #"led-point 0 0 450 450 0 0) #(struct:pulled-point 0 0 0 450 0 0)) 255"
 #" \"white\")))))))))) #(struct:bb 450 450 450) #f)"
) 0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 13 #"i-bullet-draw"
0 0 24 3 2 #" ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 21 3 3 #"300"
0 0 24 3 1 #" "
0 0 21 3 3 #"300"
0 0 24 3 2 #") "
0 0 14 3 10 #"BACKGROUND"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"              "
0 6           4 67 927
(
 #"(#(struct:crop (#(struct:point 0 0) #(struct:point 450 0) #(struct:p"
 #"oint 450 450) #(struct:point 0 450)) #(struct:translate 0 0 #(struct"
 #":overlay #(struct:translate 298 298 #(struct:translate 2 2 #(struct:"
 #"ellipse 4 4 0 255 \"red\"))) #(struct:translate 0 0 #(struct:crop (#"
 #"(struct:point 0 0) #(struct:point 450 0) #(struct:point 450 450) #(s"
 #"truct:point 0 450)) #(struct:translate 0 0 #(struct:overlay #(struct"
 #":translate 0 0 #(struct:translate 0 0 #(struct:polygon (#(struct:pul"
 #"led-point 0 0 0 0 0 0) #(struct:pulled-point 0 0 450 0 0 0) #(struct"
 #":pulled-point 0 0 450 450 0 0) #(struct:pulled-point 0 0 0 450 0 0))"
 #" outline #(struct:pen \"black\" 2 solid round round)))) #(struct:tra"
 #"nslate 0 0 #(struct:translate 0 0 #(struct:polygon (#(struct:pulled-"
 #"point 0 0 0 0 0 0) #(struct:pulled-point 0 0 450 0 0 0) #(struct:pul"
 #"led-point 0 0 450 450 0 0) #(struct:pulled-point 0 0 0 450 0 0)) 255"
 #" \"white\")))))))))) #(struct:bb 450 450 450) #f)"
) 0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 14 #";;;; Signature"
0 0 24 29 1 #"\n"
0 0 17 3 31 #";; aib-draw: AIB Image -> Image"
0 0 24 29 1 #"\n"
0 0 17 3 12 #";;;; Purpose"
0 0 24 29 1 #"\n"
0 0 17 3 48 #";; GIVEN: a list of invader bullets and an image"
0 0 24 29 1 #"\n"
0 0 17 3 80
(
 #";; RETURN: a new image with the list of invader bullets drawn on the"
 #" given image"
) 0 0 24 29 1 #"\n"
0 0 17 3 12 #";;;; Example"
0 0 24 29 1 #"\n"
0 0 17 3 33 #";; (aib-draw empty BACKGROUND) =>"
0 0 24 29 1 #"\n"
0 6           4 67 670
(
 #"(#(struct:crop (#(struct:point 0 0) #(struct:point 450 0) #(struct:p"
 #"oint 450 450) #(struct:point 0 450)) #(struct:translate 0 0 #(struct"
 #":overlay #(struct:translate 0 0 #(struct:translate 0 0 #(struct:poly"
 #"gon (#(struct:pulled-point 0 0 0 0 0 0) #(struct:pulled-point 0 0 45"
 #"0 0 0 0) #(struct:pulled-point 0 0 450 450 0 0) #(struct:pulled-poin"
 #"t 0 0 0 450 0 0)) outline #(struct:pen \"black\" 2 solid round round"
 #")))) #(struct:translate 0 0 #(struct:translate 0 0 #(struct:polygon "
 #"(#(struct:pulled-point 0 0 0 0 0 0) #(struct:pulled-point 0 0 450 0 "
 #"0 0) #(struct:pulled-point 0 0 450 450 0 0) #(struct:pulled-point 0 "
 #"0 0 450 0 0)) 255 \"white\")))))) #(struct:bb 450 450 450) #f)"
) 0 0 24 29 1 #"\n"
0 0 17 3 39 #";; (aib-draw (list (make-posn 100 100) "
0 0 24 29 1 #"\n"
0 0 17 3 63
#";;      (make-posn 150 150) (make-posn 200 200)) BACKGROUND) =>"
0 0 24 29 1 #"\n"
0 6           4 67 1439
(
 #"(#(struct:crop (#(struct:point 0 0) #(struct:point 450 0) #(struct:p"
 #"oint 450 450) #(struct:point 0 450)) #(struct:translate 0 0 #(struct"
 #":overlay #(struct:translate 98 98 #(struct:translate 2 2 #(struct:el"
 #"lipse 4 4 0 255 \"red\"))) #(struct:translate 0 0 #(struct:crop (#(s"
 #"truct:point 0 0) #(struct:point 450 0) #(struct:point 450 450) #(str"
 #"uct:point 0 450)) #(struct:translate 0 0 #(struct:overlay #(struct:t"
 #"ranslate 148 148 #(struct:translat"
 #"e 2 2 #(struct:ellipse 4 4 0 255 \"red\"))) #(struct:translate 0 0 #"
 #"(struct:crop (#(struct:point 0 0) #(struct:point 450 0) #(struct:poi"
 #"nt 450 450) #(struct:point 0 450)) #(struct:translate 0 0 #(struct:o"
 #"verlay #(struct:translate 198 198 #(struct:translate 2 2 #(struct:el"
 #"lipse 4 4 0 255 \"red\"))) #(struct:translate 0 0 #(struct:crop (#(s"
 #"truct:point 0 0) #(struct:point 450 0) #(struct:point 450 450) #(str"
 #"uct:point 0 450)) #(struct:translate 0 0 #(struct:overlay #(struct:t"
 #"ranslate 0 0 #(struct:translate 0 0 #(struct:polygon (#(struct:pulle"
 #"d-point 0 0 0 0 0 0) #(struct:pulled-point 0 0 450 0 0 0) #(struct:p"
 #"ulled-point 0 0 450 450 0 0) #(struct:pulled-point 0 0 0 450 0 0)) o"
 #"utline #(struct:pen \"black\" 2 solid round round)))) #(struct:trans"
 #"late 0 0 #(struct:translate 0 0 #(struct:polygon (#(struct:pulled-po"
 #"int 0 0 0 0 0 0) #(struct:pulled-point 0 0 450 0 0 0) #(struct:pulle"
 #"d-point 0 0 450 450 0 0) #(struct:"
 #"pulled-point 0 0 0 450 0 0)) 255 \"white\")))))))))))))))))) #(struc"
 #"t:bb 450 450 450) #f)"
) 0 0 24 29 1 #"\n"
0 0 17 3 24 #";;;; Function Definition"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 8 #"aib-draw"
0 0 24 3 1 #" "
0 0 14 3 3 #"aib"
0 0 24 3 1 #" "
0 0 14 3 3 #"img"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 5 #"foldr"
0 0 24 3 1 #" "
0 0 14 3 13 #"i-bullet-draw"
0 0 24 3 1 #" "
0 0 14 3 3 #"img"
0 0 24 3 1 #" "
0 0 14 3 3 #"aib"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 10 #";;;; Tests"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 8 #"aib-draw"
0 0 24 3 1 #" "
0 0 14 3 5 #"empty"
0 0 24 3 1 #" "
0 0 14 3 10 #"BACKGROUND"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"              "
0 6           4 67 670
(
 #"(#(struct:crop (#(struct:point 0 0) #(struct:point 450 0) #(struct:p"
 #"oint 450 450) #(struct:point 0 450)) #(struct:translate 0 0 #(struct"
 #":overlay #(struct:translate 0 0 #(struct:translate 0 0 #(struct:poly"
 #"gon (#(struct:pulled-point 0 0 0 0 0 0) #(struct:pulled-point 0 0 45"
 #"0 0 0 0) #(struct:pulled-point 0 0 450 450 0 0) #(struct:pulled-poin"
 #"t 0 0 0 450 0 0)) outline #(struct:pen \"black\" 2 solid round round"
 #")))) #(struct:translate 0 0 #(struct:translate 0 0 #(struct:polygon "
 #"(#(struct:pulled-point 0 0 0 0 0 0) #(struct:pulled-point 0 0 450 0 "
 #"0 0) #(struct:pulled-point 0 0 450 450 0 0) #(struct:pulled-point 0 "
 #"0 0 450 0 0)) 255 \"white\")))))) #(struct:bb 450 450 450) #f)"
) 0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 8 #"aib-draw"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 21 3 3 #"100"
0 0 24 3 1 #" "
0 0 21 3 3 #"100"
0 0 24 3 2 #") "
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 21 3 3 #"150"
0 0 24 3 1 #" "
0 0 21 3 3 #"150"
0 0 24 3 3 #") ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 21 3 3 #"200"
0 0 24 3 1 #" "
0 0 21 3 3 #"200"
0 0 24 3 3 #")) "
0 0 14 3 10 #"BACKGROUND"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"              "
0 6           4 67 1439
(
 #"(#(struct:crop (#(struct:point 0 0) #(struct:point 450 0) #(struct:p"
 #"oint 450 450) #(struct:point 0 450)) #(struct:translate 0 0 #(struct"
 #":overlay #(struct:translate 98 98 #(struct:translate 2 2 #(struct:el"
 #"lipse 4 4 0 255 \"red\"))) #(struct:translate 0 0 #(struct:crop (#(s"
 #"truct:point 0 0) #(struct:point 450 0) #(struct:point 450 450) #(str"
 #"uct:point 0 450)) #(struct:translate 0 0 #(struct:overlay #(struct:t"
 #"ranslate 148 148 #(struct:translat"
 #"e 2 2 #(struct:ellipse 4 4 0 255 \"red\"))) #(struct:translate 0 0 #"
 #"(struct:crop (#(struct:point 0 0) #(struct:point 450 0) #(struct:poi"
 #"nt 450 450) #(struct:point 0 450)) #(struct:translate 0 0 #(struct:o"
 #"verlay #(struct:translate 198 198 #(struct:translate 2 2 #(struct:el"
 #"lipse 4 4 0 255 \"red\"))) #(struct:translate 0 0 #(struct:crop (#(s"
 #"truct:point 0 0) #(struct:point 450 0) #(struct:point 450 450) #(str"
 #"uct:point 0 450)) #(struct:translate 0 0 #(struct:overlay #(struct:t"
 #"ranslate 0 0 #(struct:translate 0 0 #(struct:polygon (#(struct:pulle"
 #"d-point 0 0 0 0 0 0) #(struct:pulled-point 0 0 450 0 0 0) #(struct:p"
 #"ulled-point 0 0 450 450 0 0) #(struct:pulled-point 0 0 0 450 0 0)) o"
 #"utline #(struct:pen \"black\" 2 solid round round)))) #(struct:trans"
 #"late 0 0 #(struct:translate 0 0 #(struct:polygon (#(struct:pulled-po"
 #"int 0 0 0 0 0 0) #(struct:pulled-point 0 0 450 0 0 0) #(struct:pulle"
 #"d-point 0 0 450 450 0 0) #(struct:"
 #"pulled-point 0 0 0 450 0 0)) 255 \"white\")))))))))))))))))) #(struc"
 #"t:bb 450 450 450) #f)"
) 0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 14 #";;;; Signature"
0 0 24 29 1 #"\n"
0 0 17 3 41 #";; s-bullet-draw: S-Bullet Image -> Image"
0 0 24 29 1 #"\n"
0 0 17 3 12 #";;;; Purpose"
0 0 24 29 1 #"\n"
0 0 17 3 41 #";; GIVEN: a spaceship bullet and an image"
0 0 24 29 1 #"\n"
0 0 17 3 73
(
 #";; RETURN: a new image with the spaceship bullet drawn on the given "
 #"image"
) 0 0 24 29 1 #"\n"
0 0 17 3 12 #";;;; Example"
0 0 24 29 1 #"\n"
0 0 17 3 52 #";; (s-bullet-draw (make-posn 200 200) BACKGROUND) =>"
0 0 24 29 1 #"\n"
0 6           4 67 737
(
 #"(#(struct:crop (#(struct:point 0 0) #(struct:point 450 0) #(struct:p"
 #"oint 450 450) #(struct:point 0 450)) #(struct:overlay #(struct:trans"
 #"late 200 200 #(struct:ellipse 4 4 0 255 \"black\")) #(struct:crop (#"
 #"(struct:point 0 0) #(struct:point 450 0) #(struct:point 450 450) #(s"
 #"truct:point 0 450)) #(struct:overlay #(struct:polygon (#(struct:pull"
 #"ed-point 0 0 0 0 0 0) #(struct:pulled-point 0 0 450 0 0 0) #(struct:"
 #"pulled-point 0 0 450 450 0 0) #(struct:pulled-point 0 0 0 450 0 0)) "
 #"outline #(struct:pen \"black\" 2 solid round round)) #(struct:polygo"
 #"n (#(struct:pulled-point 0 0 0 0 0 0) #(struct:pulled-point 0 0 450 "
 #"0 0 0) #(struct:pulled-point 0 0 450 450 0 0) #(struct:pulled-point "
 #"0 0 0 450 0 0)) 255 \"white\"))))) #(struct:bb 450 450 450) #f)"
) 0 0 24 29 1 #"\n"
0 0 17 3 51 #";;(s-bullet-draw (make-posn 300 300) BACKGROUND) =>"
0 0 24 29 1 #"\n"
0 6           4 67 737
(
 #"(#(struct:crop (#(struct:point 0 0) #(struct:point 450 0) #(struct:p"
 #"oint 450 450) #(struct:point 0 450)) #(struct:overlay #(struct:trans"
 #"late 300 300 #(struct:ellipse 4 4 0 255 \"black\")) #(struct:crop (#"
 #"(struct:point 0 0) #(struct:point 450 0) #(struct:point 450 450) #(s"
 #"truct:point 0 450)) #(struct:overlay #(struct:polygon (#(struct:pull"
 #"ed-point 0 0 0 0 0 0) #(struct:pulled-point 0 0 450 0 0 0) #(struct:"
 #"pulled-point 0 0 450 450 0 0) #(struct:pulled-point 0 0 0 450 0 0)) "
 #"outline #(struct:pen \"black\" 2 solid round round)) #(struct:polygo"
 #"n (#(struct:pulled-point 0 0 0 0 0 0) #(struct:pulled-point 0 0 450 "
 #"0 0 0) #(struct:pulled-point 0 0 450 450 0 0) #(struct:pulled-point "
 #"0 0 0 450 0 0)) 255 \"white\"))))) #(struct:bb 450 450 450) #f)"
) 0 0 24 29 1 #"\n"
0 0 17 3 24 #";;;; Function Definition"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 13 #"s-bullet-draw"
0 0 24 3 1 #" "
0 0 14 3 8 #"s-bullet"
0 0 24 3 1 #" "
0 0 14 3 3 #"img"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 11 #"place-image"
0 0 24 3 1 #" "
0 0 14 3 14 #"S-Bullet-IMAGE"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"               ("
0 0 14 3 6 #"posn-x"
0 0 24 3 1 #" "
0 0 14 3 8 #"s-bullet"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"               ("
0 0 14 3 6 #"posn-y"
0 0 24 3 1 #" "
0 0 14 3 8 #"s-bullet"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"               "
0 0 14 3 3 #"img"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 10 #";;;; Tests"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 13 #"s-bullet-draw"
0 0 24 3 2 #" ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 21 3 3 #"200"
0 0 24 3 1 #" "
0 0 21 3 3 #"200"
0 0 24 3 2 #") "
0 0 14 3 10 #"BACKGROUND"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"              "
0 6           4 67 737
(
 #"(#(struct:crop (#(struct:point 0 0) #(struct:point 450 0) #(struct:p"
 #"oint 450 450) #(struct:point 0 450)) #(struct:overlay #(struct:trans"
 #"late 200 200 #(struct:ellipse 4 4 0 255 \"black\")) #(struct:crop (#"
 #"(struct:point 0 0) #(struct:point 450 0) #(struct:point 450 450) #(s"
 #"truct:point 0 450)) #(struct:overlay #(struct:polygon (#(struct:pull"
 #"ed-point 0 0 0 0 0 0) #(struct:pulled-point 0 0 450 0 0 0) #(struct:"
 #"pulled-point 0 0 450 450 0 0) #(struct:pulled-point 0 0 0 450 0 0)) "
 #"outline #(struct:pen \"black\" 2 solid round round)) #(struct:polygo"
 #"n (#(struct:pulled-point 0 0 0 0 0 0) #(struct:pulled-point 0 0 450 "
 #"0 0 0) #(struct:pulled-point 0 0 450 450 0 0) #(struct:pulled-point "
 #"0 0 0 450 0 0)) 255 \"white\"))))) #(struct:bb 450 450 450) #f)"
) 0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 13 #"s-bullet-draw"
0 0 24 3 2 #" ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 21 3 3 #"300"
0 0 24 3 1 #" "
0 0 21 3 3 #"300"
0 0 24 3 2 #") "
0 0 14 3 10 #"BACKGROUND"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"              "
0 6           4 67 737
(
 #"(#(struct:crop (#(struct:point 0 0) #(struct:point 450 0) #(struct:p"
 #"oint 450 450) #(struct:point 0 450)) #(struct:overlay #(struct:trans"
 #"late 300 300 #(struct:ellipse 4 4 0 255 \"black\")) #(struct:crop (#"
 #"(struct:point 0 0) #(struct:point 450 0) #(struct:point 450 450) #(s"
 #"truct:point 0 450)) #(struct:overlay #(struct:polygon (#(struct:pull"
 #"ed-point 0 0 0 0 0 0) #(struct:pulled-point 0 0 450 0 0 0) #(struct:"
 #"pulled-point 0 0 450 450 0 0) #(struct:pulled-point 0 0 0 450 0 0)) "
 #"outline #(struct:pen \"black\" 2 solid round round)) #(struct:polygo"
 #"n (#(struct:pulled-point 0 0 0 0 0 0) #(struct:pulled-point 0 0 450 "
 #"0 0 0) #(struct:pulled-point 0 0 450 450 0 0) #(struct:pulled-point "
 #"0 0 0 450 0 0)) 255 \"white\"))))) #(struct:bb 450 450 450) #f)"
) 0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 14 #";;;; Signature"
0 0 24 29 1 #"\n"
0 0 17 3 31 #";; asb-draw: ASB Image -> Image"
0 0 24 29 1 #"\n"
0 0 17 3 12 #";;;; Purpose"
0 0 24 29 1 #"\n"
0 0 17 3 50 #";; GIVEN: a list of spaceship bullets and an image"
0 0 24 29 1 #"\n"
0 0 17 3 49 #";; RETURN: a new image with the list of spaceship"
0 0 24 29 1 #"\n"
0 0 17 3 43 #";;         bullets drawn on the given image"
0 0 24 29 1 #"\n"
0 0 17 3 12 #";;;; Example"
0 0 24 29 1 #"\n"
0 0 17 3 33 #";; (asb-draw empty BACKGROUND) =>"
0 0 24 29 1 #"\n"
0 6           4 67 670
(
 #"(#(struct:crop (#(struct:point 0 0) #(struct:point 450 0) #(struct:p"
 #"oint 450 450) #(struct:point 0 450)) #(struct:translate 0 0 #(struct"
 #":overlay #(struct:translate 0 0 #(struct:translate 0 0 #(struct:poly"
 #"gon (#(struct:pulled-point 0 0 0 0 0 0) #(struct:pulled-point 0 0 45"
 #"0 0 0 0) #(struct:pulled-point 0 0 450 450 0 0) #(struct:pulled-poin"
 #"t 0 0 0 450 0 0)) outline #(struct:pen \"black\" 2 solid round round"
 #")))) #(struct:translate 0 0 #(struct:translate 0 0 #(struct:polygon "
 #"(#(struct:pulled-point 0 0 0 0 0 0) #(struct:pulled-point 0 0 450 0 "
 #"0 0) #(struct:pulled-point 0 0 450 450 0 0) #(struct:pulled-point 0 "
 #"0 0 450 0 0)) 255 \"white\")))))) #(struct:bb 450 450 450) #f)"
) 0 0 24 29 1 #"\n"
0 0 17 3 39 #";; (asb-draw (list (make-posn 100 100) "
0 0 24 29 1 #"\n"
0 0 17 3 63
#";;      (make-posn 150 150) (make-posn 200 200)) BACKGROUND) =>"
0 0 24 29 1 #"\n"
0 6           4 67 1111
(
 #"(#(struct:crop (#(struct:point 0 0) #(struct:point 450 0) #(struct:p"
 #"oint 450 450) #(struct:point 0 450)) #(struct:overlay #(struct:trans"
 #"late 100 100 #(struct:ellipse 4 4 0 255 \"black\")) #(struct:crop (#"
 #"(struct:point 0 0) #(struct:point 450 0) #(struct:point 450 450) #(s"
 #"truct:point 0 450)) #(struct:overlay #(struct:translate 150 150 #(st"
 #"ruct:ellipse 4 4 0 255 \"black\")) #(struct:crop (#(struct:point 0 0"
 #") #(struct:point 450 0) #(struct:point 450 450) #(struct:point 0 450"
 #")) #(struct:overlay #(struct:translate 200 200 #(struct:ellipse 4 4 "
 #"0 255 \"black\")) #(struct:crop (#(struct:point 0 0) #(struct:point "
 #"450 0) #(struct:point 450 450) #(struct:point 0 450)) #(struct:overl"
 #"ay #(struct:polygon (#(struct:pulled-point 0 0 0 0 0 0) #(struct:pul"
 #"led-point 0 0 450 0 0 0) #(struct:pulled-point 0 0 450 450 0 0) #(st"
 #"ruct:pulled-point 0 0 0 450 0 0)) outline #(struct:pen \"black\" 2 s"
 #"olid round round)) #(struct:polygon (#(struct:pulled-point 0 0 0 0 0"
 #" 0) #(struct:pulled-point 0 0 450 0 0 0) #(struct:pulled-point 0 0 4"
 #"50 450 0 0) #(struct:pulled-point 0 0 0 450 0 0)) 255 \"white\")))))"
 #")))) #(struct:bb 450 450 450) #f)"
) 0 0 24 29 1 #"\n"
0 0 17 3 24 #";;;; Function Definition"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 8 #"asb-draw"
0 0 24 3 1 #" "
0 0 14 3 3 #"asb"
0 0 24 3 1 #" "
0 0 14 3 3 #"img"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 5 #"foldr"
0 0 24 3 1 #" "
0 0 14 3 13 #"s-bullet-draw"
0 0 24 3 1 #" "
0 0 14 3 3 #"img"
0 0 24 3 1 #" "
0 0 14 3 3 #"asb"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 10 #";;;; Tests"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 8 #"asb-draw"
0 0 24 3 1 #" "
0 0 14 3 5 #"empty"
0 0 24 3 1 #" "
0 0 14 3 10 #"BACKGROUND"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"              "
0 6           4 67 670
(
 #"(#(struct:crop (#(struct:point 0 0) #(struct:point 450 0) #(struct:p"
 #"oint 450 450) #(struct:point 0 450)) #(struct:translate 0 0 #(struct"
 #":overlay #(struct:translate 0 0 #(struct:translate 0 0 #(struct:poly"
 #"gon (#(struct:pulled-point 0 0 0 0 0 0) #(struct:pulled-point 0 0 45"
 #"0 0 0 0) #(struct:pulled-point 0 0 450 450 0 0) #(struct:pulled-poin"
 #"t 0 0 0 450 0 0)) outline #(struct:pen \"black\" 2 solid round round"
 #")))) #(struct:translate 0 0 #(struct:translate 0 0 #(struct:polygon "
 #"(#(struct:pulled-point 0 0 0 0 0 0) #(struct:pulled-point 0 0 450 0 "
 #"0 0) #(struct:pulled-point 0 0 450 450 0 0) #(struct:pulled-point 0 "
 #"0 0 450 0 0)) 255 \"white\")))))) #(struct:bb 450 450 450) #f)"
) 0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 8 #"asb-draw"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 21 3 3 #"100"
0 0 24 3 1 #" "
0 0 21 3 3 #"100"
0 0 24 3 2 #") "
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 21 3 3 #"150"
0 0 24 3 1 #" "
0 0 21 3 3 #"150"
0 0 24 3 3 #") ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 21 3 3 #"200"
0 0 24 3 1 #" "
0 0 21 3 3 #"200"
0 0 24 3 3 #")) "
0 0 14 3 10 #"BACKGROUND"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"              "
0 6           4 67 1111
(
 #"(#(struct:crop (#(struct:point 0 0) #(struct:point 450 0) #(struct:p"
 #"oint 450 450) #(struct:point 0 450)) #(struct:overlay #(struct:trans"
 #"late 100 100 #(struct:ellipse 4 4 0 255 \"black\")) #(struct:crop (#"
 #"(struct:point 0 0) #(struct:point 450 0) #(struct:point 450 450) #(s"
 #"truct:point 0 450)) #(struct:overlay #(struct:translate 150 150 #(st"
 #"ruct:ellipse 4 4 0 255 \"black\")) #(struct:crop (#(struct:point 0 0"
 #") #(struct:point 450 0) #(struct:point 450 450) #(struct:point 0 450"
 #")) #(struct:overlay #(struct:translate 200 200 #(struct:ellipse 4 4 "
 #"0 255 \"black\")) #(struct:crop (#(struct:point 0 0) #(struct:point "
 #"450 0) #(struct:point 450 450) #(struct:point 0 450)) #(struct:overl"
 #"ay #(struct:polygon (#(struct:pulled-point 0 0 0 0 0 0) #(struct:pul"
 #"led-point 0 0 450 0 0 0) #(struct:pulled-point 0 0 450 450 0 0) #(st"
 #"ruct:pulled-point 0 0 0 450 0 0)) outline #(struct:pen \"black\" 2 s"
 #"olid round round)) #(struct:polygon (#(struct:pulled-point 0 0 0 0 0"
 #" 0) #(struct:pulled-point 0 0 450 0 0 0) #(struct:pulled-point 0 0 4"
 #"50 450 0 0) #(struct:pulled-point 0 0 0 450 0 0)) 255 \"white\")))))"
 #")))) #(struct:bb 450 450 450) #f)"
) 0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 14 #";;;; Signature"
0 0 24 29 1 #"\n"
0 0 17 3 35 #";; score-draw: Score Image -> Image"
0 0 24 29 1 #"\n"
0 0 17 3 12 #";;;; Purpose"
0 0 24 29 1 #"\n"
0 0 17 3 17 #";; GIVEN: a score"
0 0 24 29 1 #"\n"
0 0 17 3 50 #";; RETURN: draw it at the top center of the canvas"
0 0 24 29 1 #"\n"
0 0 17 3 12 #";;;; Example"
0 0 24 29 1 #"\n"
0 0 17 3 33 #";; (score-draw 100 BACKGROUND) =>"
0 0 24 29 1 #"\n"
0 0 17 3 3 #";; "
0 6           4 17 3086
(
 #"(#(struct:crop (#(struct:point 0 0) #(struct:point 450 0) #(struct:p"
 #"oint 450 450) #(struct:point 0 450)) #(struct:translate 0 0 #(struct"
 #":overlay #(struct:translate 154.5 2.0 #(struct:overlay #(struct:tran"
 #"slate 0 0 #(struct:overlay #(struct:translate 0 0 #(struct:overlay #"
 #"(struct:translate 0 0 #(struct:overlay #(struct:translate 0 0 #(stru"
 #"ct:overlay #(struct:translate 0 0 #(struct:overlay #(struct:translat"
 #"e 0 0 #(struct:overlay #(struct:translate 0 0 #(struct:overlay #(str"
 #"uct:translate 0 0 #(struct:overlay #(struct:translate 0 0 #(struct:o"
 #"verlay #(struct:translate 0 0 #(struct:overlay #(struct:translate 0 "
 #"0 #(struct:overlay #(struct:translate 0 0 #(struct:overlay #(struct:"
 #"translate 0 0 #(struct:overlay #(struct:translate 0 0 #(struct:trans"
 #"late 6.0 10.0 #(struct:text \"T\" 0 1 \"black\" 20 #f swiss normal n"
 #"ormal #f))) #(struct:translate 12.0 0.0 #(struct:translate 5.5 10.0 "
 #"#(struct:text \"o\" 0 1 \"black\" 20 #f swiss normal normal #f))))) "
 #"#(struct:translate 23.0 0.0 #(struct:translate 3.0 10.0 #(struct:tex"
 #"t \"t\" 0 1 \"black\" 20 #f swiss normal normal #f))))) #(struct:tra"
 #"nslate 29.0 0.0 #(struct:translate 5.5 10.0 #(struct:text \"a\" 0 1 "
 #"\"black\" 20 #f swiss normal normal #f))))) #(struct:translate 40.0 "
 #"0.0 #(struct:translate 2.0 10.0 #(struct:text \"l\" 0 1 \"black\" 20"
 #" #f swiss normal normal #f))))) #(struct:translate 44.0 0.0 #(struct"
 #":translate 3.0 10.0 #(struct:text \" \" 0 1 \"black\" 20 #f swiss no"
 #"rmal normal #f))))) #(struct:translate 50.0 0.0 #(struct:translate 6"
 #".5 10.0 #(struct:text \"S\" 0 1 \"black\" 20 #f swiss normal normal "
 #"#f))))) #(struct:translate 63.0 0.0 #(struct:translate 5.0 10.0 #(st"
 #"ruct:text \"c\" 0 1 \"black\" 20 #f swiss normal normal #f))))) #(st"
 #"ruct:translate 73.0 0.0 #(struct:translate 5.5 10.0 #(struct:text \""
 #"o\" 0 1 \"black\" 20 #f swiss normal normal #f))))) #(struct:transla"
 #"te 84.0 0.0 #(struct:translate 3.5 10.0 #(struct:text \"r\" 0 1 \"bl"
 #"ack\" 20 #f swiss normal normal #f))))) #(struct:translate 91.0 0.0 "
 #"#(struct:translate 5.5 10.0 #(struct:text \"e\" 0 1 \"black\" 20 #f "
 #"swiss normal normal #f))))) #(struct:translate 102.0 0.0 #(struct:tr"
 #"anslate 3.0 10.0 #(struct:text \":\" 0 1 \"black\" 20 #f swiss norma"
 #"l normal #f))))) #(struct:translate 108.0 0.0 #(struct:translate 5.5"
 #" 10.0 #(struct:text \"1\" 0 1 \"black\" 20 #f swiss normal normal #f"
 #"))))) #(struct:translate 119.0 0.0 #(struct:translate 5.5 10.0 #(str"
 #"uct:text \"0\" 0 1 \"black\" 20 #f swiss normal normal #f))))) #(str"
 #"uct:translate 130.0 0.0 #(struct:translate 5.5 10.0 #(struct:text \""
 #"0\" 0 1 \"black\" 20 #f swiss normal normal #f))))) #(struct:transla"
 #"te 0 0 #(struct:crop (#(struct:point 0 0) #(struct:point 450 0) #(st"
 #"ruct:point 450 450) #(struct:point 0 450)) #(struct:overlay #(struct"
 #":polygon (#(struct:pulled-point 0 0 0 0 0 0) #(struct:pulled-point 0"
 #" 0 450 0 0 0) #(struct:pulled-point 0 0 450 450 0 0) #(struct:pulled"
 #"-point 0 0 0 450 0 0)) outline #(struct:pen \"black\" 2 solid round "
 #"round)) #(struct:polygon (#(struct:pulled-point 0 0 0 0 0 0) #(struc"
 #"t:pulled-point 0 0 450 0 0 0) #(struct:pulled-point 0 0 450 450 0 0)"
 #" #(struct:pulled-point 0 0 0 450 0 0)) 255 \"white\"))))))) #(struct"
 #":bb 450 450 450.0) #f)"
) 0 0 24 29 1 #"\n"
0 0 17 3 24 #";;;; Function Definition"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 10 #"score-draw"
0 0 24 3 1 #" "
0 0 14 3 5 #"score"
0 0 24 3 1 #" "
0 0 14 3 3 #"img"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 11 #"place-image"
0 0 24 3 2 #" ("
0 0 14 3 4 #"text"
0 0 24 3 2 #" ("
0 0 14 3 13 #"string-append"
0 0 24 3 1 #" "
0 0 19 3 14 #"\"Total Score:\""
0 0 24 29 1 #"\n"
0 0 24 3 37 #"                                    ("
0 0 14 3 14 #"number->string"
0 0 24 3 1 #" "
0 0 14 3 5 #"score"
0 0 24 3 3 #")) "
0 0 21 3 2 #"20"
0 0 24 3 1 #" "
0 0 19 3 7 #"\"black\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"               ("
0 0 14 3 1 #"/"
0 0 24 3 1 #" "
0 0 14 3 5 #"WIDTH"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"               "
0 0 21 3 2 #"12"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"               "
0 0 14 3 3 #"img"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 17 3 10 #";;;; Tests"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 10 #"score-draw"
0 0 24 3 1 #" "
0 0 21 3 3 #"100"
0 0 24 3 1 #" "
0 0 14 3 10 #"BACKGROUND"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 6           4 67 3086
(
 #"(#(struct:crop (#(struct:point 0 0) #(struct:point 450 0) #(struct:p"
 #"oint 450 450) #(struct:point 0 450)) #(struct:translate 0 0 #(struct"
 #":overlay #(struct:translate 154.5 2.0 #(struct:overlay #(struct:tran"
 #"slate 0 0 #(struct:overlay #(struct:translate 0 0 #(struct:overlay #"
 #"(struct:translate 0 0 #(struct:overlay #(struct:translate 0 0 #(stru"
 #"ct:overlay #(struct:translate 0 0 #(struct:overlay #(struct:translat"
 #"e 0 0 #(struct:overlay #(struct:translate 0 0 #(struct:overlay #(str"
 #"uct:translate 0 0 #(struct:overlay #(struct:translate 0 0 #(struct:o"
 #"verlay #(struct:translate 0 0 #(struct:overlay #(struct:translate 0 "
 #"0 #(struct:overlay #(struct:translate 0 0 #(struct:overlay #(struct:"
 #"translate 0 0 #(struct:overlay #(struct:translate 0 0 #(struct:trans"
 #"late 6.0 10.0 #(struct:text \"T\" 0 1 \"black\" 20 #f swiss normal n"
 #"ormal #f))) #(struct:translate 12.0 0.0 #(struct:translate 5.5 10.0 "
 #"#(struct:text \"o\" 0 1 \"black\" 20 #f swiss normal normal #f))))) "
 #"#(struct:translate 23.0 0.0 #(struct:translate 3.0 10.0 #(struct:tex"
 #"t \"t\" 0 1 \"black\" 20 #f swiss normal normal #f))))) #(struct:tra"
 #"nslate 29.0 0.0 #(struct:translate 5.5 10.0 #(struct:text \"a\" 0 1 "
 #"\"black\" 20 #f swiss normal normal #f))))) #(struct:translate 40.0 "
 #"0.0 #(struct:translate 2.0 10.0 #(struct:text \"l\" 0 1 \"black\" 20"
 #" #f swiss normal normal #f))))) #(struct:translate 44.0 0.0 #(struct"
 #":translate 3.0 10.0 #(struct:text \" \" 0 1 \"black\" 20 #f swiss no"
 #"rmal normal #f))))) #(struct:translate 50.0 0.0 #(struct:translate 6"
 #".5 10.0 #(struct:text \"S\" 0 1 \"black\" 20 #f swiss normal normal "
 #"#f))))) #(struct:translate 63.0 0.0 #(struct:translate 5.0 10.0 #(st"
 #"ruct:text \"c\" 0 1 \"black\" 20 #f swiss normal normal #f))))) #(st"
 #"ruct:translate 73.0 0.0 #(struct:translate 5.5 10.0 #(struct:text \""
 #"o\" 0 1 \"black\" 20 #f swiss normal normal #f))))) #(struct:transla"
 #"te 84.0 0.0 #(struct:translate 3.5 10.0 #(struct:text \"r\" 0 1 \"bl"
 #"ack\" 20 #f swiss normal normal #f))))) #(struct:translate 91.0 0.0 "
 #"#(struct:translate 5.5 10.0 #(struct:text \"e\" 0 1 \"black\" 20 #f "
 #"swiss normal normal #f))))) #(struct:translate 102.0 0.0 #(struct:tr"
 #"anslate 3.0 10.0 #(struct:text \":\" 0 1 \"black\" 20 #f swiss norma"
 #"l normal #f))))) #(struct:translate 108.0 0.0 #(struct:translate 5.5"
 #" 10.0 #(struct:text \"1\" 0 1 \"black\" 20 #f swiss normal normal #f"
 #"))))) #(struct:translate 119.0 0.0 #(struct:translate 5.5 10.0 #(str"
 #"uct:text \"0\" 0 1 \"black\" 20 #f swiss normal normal #f))))) #(str"
 #"uct:translate 130.0 0.0 #(struct:translate 5.5 10.0 #(struct:text \""
 #"0\" 0 1 \"black\" 20 #f swiss normal normal #f))))) #(struct:transla"
 #"te 0 0 #(struct:crop (#(struct:point 0 0) #(struct:point 450 0) #(st"
 #"ruct:point 450 450) #(struct:point 0 450)) #(struct:overlay #(struct"
 #":polygon (#(struct:pulled-point 0 0 0 0 0 0) #(struct:pulled-point 0"
 #" 0 450 0 0 0) #(struct:pulled-point 0 0 450 450 0 0) #(struct:pulled"
 #"-point 0 0 0 450 0 0)) outline #(struct:pen \"black\" 2 solid round "
 #"round)) #(struct:polygon (#(struct:pulled-point 0 0 0 0 0 0) #(struc"
 #"t:pulled-point 0 0 450 0 0 0) #(struct:pulled-point 0 0 450 450 0 0)"
 #" #(struct:pulled-point 0 0 0 450 0 0)) 255 \"white\"))))))) #(struct"
 #":bb 450 450 450.0) #f)"
) 0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 14 #";;;; Signature"
0 0 24 29 1 #"\n"
0 0 17 3 31 #";; nol-draw: NOL Image -> Image"
0 0 24 29 1 #"\n"
0 0 17 3 12 #";;;; Purpose"
0 0 24 29 1 #"\n"
0 0 17 3 29 #";; GIVEN: the number of lives"
0 0 24 29 1 #"\n"
0 0 17 3 64
#";; RETURN: draw it at the bottom right hand cornor of the canvas"
0 0 24 29 1 #"\n"
0 0 17 3 12 #";;;; Example"
0 0 24 29 1 #"\n"
0 0 17 3 29 #";; (nol-draw 3 BACKGROUND) =>"
0 0 24 29 1 #"\n"
0 0 17 3 3 #";; "
0 6           4 17 2637
(
 #"(#(struct:crop (#(struct:point 0 0) #(struct:point 450 0) #(struct:p"
 #"oint 450 450) #(struct:point 0 450)) #(struct:overlay #(struct:overl"
 #"ay #(struct:overlay #(struct:overlay #(struct:overlay #(struct:overl"
 #"ay #(struct:overlay #(struct:overlay #(struct:overlay #(struct:overl"
 #"ay #(struct:overlay #(struct:overlay #(struct:overlay #(struct:overl"
 #"ay #(struct:overlay #(struct:overlay #(struct:overlay #(struct:overl"
 #"ay #(struct:translate 312.0 440.0 #(struct:text \"N\" 0 1 \"black\" "
 #"16 #f swiss normal normal #f)) #(struct:translate 322.5 440.0 #(stru"
 #"ct:text \"u\" 0 1 \"black\" 16 #f swiss normal normal #f))) #(struct"
 #":translate 333.5 440.0 #(struct:text \"m\" 0 1 \"black\" 16 #f swiss"
 #" normal normal #f))) #(struct:translate 344.5 440.0 #(struct:text \""
 #"b\" 0 1 \"black\" 16 #f swiss normal normal #f))) #(struct:translate"
 #" 353.5 440.0 #(struct:text \"e\" 0 1 \"black\" 16 #f swiss normal no"
 #"rmal #f))) #(struct:translate 360.5 440.0 #(struct:text \"r\" 0 1 \""
 #"black\" 16 #f swiss normal normal #f))) #(struct:translate 365.0 440"
 #".0 #(struct:text \" \" 0 1 \"black\" 16 #f swiss normal normal #f)))"
 #" #(struct:translate 371.5 440.0 #(struct:text \"o\" 0 1 \"black\" 16"
 #" #f swiss normal normal #f))) #(struct:translate 378.0 440.0 #(struc"
 #"t:text \"f\" 0 1 \"black\" 16 #f swiss normal normal #f))) #(struct:"
 #"translate 382.0 440.0 #(struct:text \" \" 0 1 \"black\" 16 #f swiss "
 #"normal normal #f))) #(struct:translate 386.0 440.0 #(struct:text \"l"
 #"\" 0 1 \"black\" 16 #f swiss normal normal #f))) #(struct:translate "
 #"390.0 440.0 #(struct:text \"i\" 0 1 \"black\" 16 #f swiss normal nor"
 #"mal #f))) #(struct:translate 396.0 440.0 #(struct:text \"v\" 0 1 \"b"
 #"lack\" 16 #f swiss normal normal #f))) #(struct:translate 404.5 440."
 #"0 #(struct:text \"e\" 0 1 \"black\" 16 #f swiss normal normal #f))) "
 #"#(struct:translate 413.0 440.0 #(struct:text \"s\" 0 1 \"black\" 16 "
 #"#f swiss normal normal #f))) #(struct:translate 419.0 440.0 #(struct"
 #":text \":\" 0 1 \"black\" 16 #f swiss normal normal #f))) #(struct:t"
 #"ranslate 423.0 440.0 #(struct:text \" \" 0 1 \"black\" 16 #f swiss n"
 #"ormal normal #f))) #(struct:trans"
 #"late 429.5 440.0 #(struct:text \"3\" 0 1 \"black\" 16 #f swiss norma"
 #"l normal #f))) #(struct:crop (#(struct:point 0 0) #(struct:point 450"
 #" 0) #(struct:point 450 450) #(struct:point 0 450)) #(struct:overlay "
 #"#(struct:polygon (#(struct:pulled-point 0 0 0 0 0 0) #(struct:pulled"
 #"-point 0 0 450 0 0 0) #(struct:pulled-point 0 0 450 450 0 0) #(struc"
 #"t:pulled-point 0 0 0 450 0 0)) outline #(struct:pen \"black\" 2 soli"
 #"d round round)) #(struct:polygon (#(struct:pulled-point 0 0 0 0 0 0)"
 #" #(struct:pulled-point 0 0 450 0 0 0) #(struct:pulled-point 0 0 450 "
 #"450 0 0) #(struct:pulled-point 0 0 0 450 0 0)) 255 \"white\"))))) #("
 #"struct:bb 450 450 450.0) #f)"
) 0 0 24 29 1 #"\n"
0 0 17 3 24 #";;;; Function Definition"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 8 #"nol-draw"
0 0 24 3 1 #" "
0 0 14 3 3 #"nol"
0 0 24 3 1 #" "
0 0 14 3 3 #"img"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 11 #"place-image"
0 0 24 3 2 #" ("
0 0 14 3 4 #"text"
0 0 24 3 2 #" ("
0 0 14 3 13 #"string-append"
0 0 24 3 1 #" "
0 0 19 3 19 #"\"Number of lives: \""
0 0 24 29 1 #"\n"
0 0 24 3 37 #"                                    ("
0 0 14 3 14 #"number->string"
0 0 24 3 1 #" "
0 0 14 3 3 #"nol"
0 0 24 3 3 #")) "
0 0 21 3 2 #"16"
0 0 24 3 1 #" "
0 0 19 3 7 #"\"black\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"               ("
0 0 14 3 1 #"-"
0 0 24 3 1 #" "
0 0 14 3 5 #"WIDTH"
0 0 24 3 1 #" "
0 0 21 3 2 #"80"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"               ("
0 0 14 3 1 #"-"
0 0 24 3 1 #" "
0 0 14 3 6 #"HEIGHT"
0 0 24 3 1 #" "
0 0 21 3 2 #"10"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"               "
0 0 14 3 3 #"img"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 17 3 9 #";;;; Test"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 8 #"nol-draw"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 1 #" "
0 0 14 3 10 #"BACKGROUND"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"   "
0 6           4 67 2637
(
 #"(#(struct:crop (#(struct:point 0 0) #(struct:point 450 0) #(struct:p"
 #"oint 450 450) #(struct:point 0 450)) #(struct:overlay #(struct:overl"
 #"ay #(struct:overlay #(struct:overlay #(struct:overlay #(struct:overl"
 #"ay #(struct:overlay #(struct:overlay #(struct:overlay #(struct:overl"
 #"ay #(struct:overlay #(struct:overlay #(struct:overlay #(struct:overl"
 #"ay #(struct:overlay #(struct:overlay #(struct:overlay #(struct:overl"
 #"ay #(struct:translate 312.0 440.0 #(struct:text \"N\" 0 1 \"black\" "
 #"16 #f swiss normal normal #f)) #(struct:translate 322.5 440.0 #(stru"
 #"ct:text \"u\" 0 1 \"black\" 16 #f swiss normal normal #f))) #(struct"
 #":translate 333.5 440.0 #(struct:text \"m\" 0 1 \"black\" 16 #f swiss"
 #" normal normal #f))) #(struct:translate 344.5 440.0 #(struct:text \""
 #"b\" 0 1 \"black\" 16 #f swiss normal normal #f))) #(struct:translate"
 #" 353.5 440.0 #(struct:text \"e\" 0 1 \"black\" 16 #f swiss normal no"
 #"rmal #f))) #(struct:translate 360.5 440.0 #(struct:text \"r\" 0 1 \""
 #"black\" 16 #f swiss normal normal #f))) #(struct:translate 365.0 440"
 #".0 #(struct:text \" \" 0 1 \"black\" 16 #f swiss normal normal #f)))"
 #" #(struct:translate 371.5 440.0 #(struct:text \"o\" 0 1 \"black\" 16"
 #" #f swiss normal normal #f))) #(struct:translate 378.0 440.0 #(struc"
 #"t:text \"f\" 0 1 \"black\" 16 #f swiss normal normal #f))) #(struct:"
 #"translate 382.0 440.0 #(struct:text \" \" 0 1 \"black\" 16 #f swiss "
 #"normal normal #f))) #(struct:translate 386.0 440.0 #(struct:text \"l"
 #"\" 0 1 \"black\" 16 #f swiss normal normal #f))) #(struct:translate "
 #"390.0 440.0 #(struct:text \"i\" 0 1 \"black\" 16 #f swiss normal nor"
 #"mal #f))) #(struct:translate 396.0 440.0 #(struct:text \"v\" 0 1 \"b"
 #"lack\" 16 #f swiss normal normal #f))) #(struct:translate 404.5 440."
 #"0 #(struct:text \"e\" 0 1 \"black\" 16 #f swiss normal normal #f))) "
 #"#(struct:translate 413.0 440.0 #(struct:text \"s\" 0 1 \"black\" 16 "
 #"#f swiss normal normal #f))) #(struct:translate 419.0 440.0 #(struct"
 #":text \":\" 0 1 \"black\" 16 #f swiss normal normal #f))) #(struct:t"
 #"ranslate 423.0 440.0 #(struct:text \" \" 0 1 \"black\" 16 #f swiss n"
 #"ormal normal #f))) #(struct:trans"
 #"late 429.5 440.0 #(struct:text \"3\" 0 1 \"black\" 16 #f swiss norma"
 #"l normal #f))) #(struct:crop (#(struct:point 0 0) #(struct:point 450"
 #" 0) #(struct:point 450 450) #(struct:point 0 450)) #(struct:overlay "
 #"#(struct:polygon (#(struct:pulled-point 0 0 0 0 0 0) #(struct:pulled"
 #"-point 0 0 450 0 0 0) #(struct:pulled-point 0 0 450 450 0 0) #(struc"
 #"t:pulled-point 0 0 0 450 0 0)) outline #(struct:pen \"black\" 2 soli"
 #"d round round)) #(struct:polygon (#(struct:pulled-point 0 0 0 0 0 0)"
 #" #(struct:pulled-point 0 0 450 0 0 0) #(struct:pulled-point 0 0 450 "
 #"450 0 0) #(struct:pulled-point 0 0 0 450 0 0)) 255 \"white\"))))) #("
 #"struct:bb 450 450 450.0) #f)"
) 0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 14 #";;;; Signature"
0 0 24 29 1 #"\n"
0 0 17 3 29 #";; world-draw: World -> Image"
0 0 24 29 1 #"\n"
0 0 17 3 12 #";;;; Purpose"
0 0 24 29 1 #"\n"
0 0 17 3 17 #";; GIVEN: a world"
0 0 24 29 1 #"\n"
0 0 17 3 53 #";; RETURN: an image representation of the given world"
0 0 24 29 1 #"\n"
0 0 17 3 12 #";;;; Example"
0 0 24 29 1 #"\n"
0 0 17 3 90
(
 #";; (world-draw (make-world empty All (make-posn 200 420) aib-example"
 #" asb-example 5 3 100))"
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 40 #";;> keep lines at or under 80 characters"
0 0 24 29 1 #"\n"
0 0 17 3 6 #";; => "
0 6           4 17 17854
(
 #"(#(struct:crop (#(struct:point 0 0) #(struct:point 450 0) #(struct:p"
 #"oint 450 450) #(struct:point 0 450)) #(struct:overlay #(struct:polyg"
 #"on (#(struct:pulled-point 0 0 30 60 0 0) #(struct:pulled-point 0 0 5"
 #"0 60 0 0) #(struct:pulled-point 0 0 50 80 0 0) #(struct:pulled-point"
 #" 0 0 30 80 0 0)) 255 \"red\") #(struct:crop (#(struct:point 0 0) #(s"
 #"truct:point 450 0) #(struct:point 450 450) #(struct:point 0 450)) #("
 #"struct:overlay #(struct:polygon (#(struct:pulled-point 0 0 70 60 0 0"
 #") #(struct:pulled-point 0 0 90 60 0 0) #(struct:pulled-point 0 0 90 "
 #"80 0 0) #(struct:pulled-point 0 0 70 80 0 0)) 255 \"red\") #(struct:"
 #"crop (#(struct:point 0 0) #(struct:point 450 0) #(struct:point 450 4"
 #"50) #(struct:point 0 450)) #(struct:overlay #(struct:polygon (#(stru"
 #"ct:pulled-point 0 0 110 60 0 0) #(struct:pulled-point 0 0 130 60 0 0"
 #") #(struct:pulled-point 0 0 130 80 0 0) #(struct:pulled-point 0 0 11"
 #"0 80 0 0)) 255 \"red\") #(struct:crop (#(struct:point 0 0) #(struct:"
 #"point 450 0) #(struct:point 450 450) #(struct:point 0 450)) #(struct"
 #":overlay #(struct:polygon (#(struct:pulled-point 0 0 150 60 0 0) #(s"
 #"truct:pulled-point 0 0 170 60 0 0) #(struct:pulled-point 0 0 170 80 "
 #"0 0) #(struct:pulled-point 0 0 150 80 0 0)) 255 \"red\") #(struct:cr"
 #"op (#(struct:point 0 0) #(struct:point 450 0) #(struct:point 450 450"
 #") #(struct:point 0 450)) #(struct:overlay #(struct:polygon (#(struct"
 #":pulled-point 0 0 190 60 0 0) #(struct:pulled-point 0 0 210 60 0 0) "
 #"#(struct:pulled-point 0 0 210 80 0 0) #(struct:pulled-point 0 0 190 "
 #"80 0 0)) 255 \"red\") #(struct:crop (#(struct:point 0 0) #(struct:po"
 #"int 450 0) #(struct:point 450 450) #(struct:point 0 450)) #(struct:o"
 #"verlay #(struct:polygon (#(struct:pulled-point 0 0 230 60 0 0) #(str"
 #"uct:pulled-point 0 0 250 60 0 0) #(struct:pulled-point 0 0 250 80 0 "
 #"0) #(struct:pulled-point 0 0 230 80 0 0)) 255 \"red\") #(struct:crop"
 #" (#(struct:point 0 0) #(struct:point 450 0) #(struct:point 450 450) "
 #"#(struct:point 0 450)) #(struct:overlay #(struct:polygon (#(struct:p"
 #"ulled-point 0 0 270 60 0 0) #(struct:pulled-point 0 0 290 60 0 0) #("
 #"struct:pulled-point 0 0 290 80 0 0) #(struct:pulled-point 0 0 270 80"
 #" 0 0)) 255 \"red\") #(struct:crop (#(struct:point 0 0) #(struct:poin"
 #"t 450 0) #(struct:point 450 450) #(struct:point 0 450)) #(struct:ove"
 #"rlay #(struct:polygon (#(struct:pulled-point 0 0 310 60 0 0) #(struc"
 #"t:pulled-point 0 0 330 60 0 0) #(struct:pulled-point 0 0 330 80 0 0)"
 #" #(struct:pulled-point 0 0 310 80 0 0)) 255 \"red\") #(struct:crop ("
 #"#(struct:point 0 0) #(struct:point 450 0) #(struct:point 450 450) #("
 #"struct:point 0 450)) #(struct:overlay #(struct:polygon (#(struct:pul"
 #"led-point 0 0 350 60 0 0) #(struct:pulled-point 0 0 370 60 0 0) #(st"
 #"ruct:pulled-point 0 0 370 80 0 0) #(struct:pulled-point 0 0 350 80 0"
 #" 0)) 255 \"red\") #(struct:crop (#(struct:point 0 0) #(struct:point "
 #"450 0) #(struct:point 450 450) #(struct:point 0 450)) #(struct:overl"
 #"ay #(struct:polygon (#(struct:pulled-point 0 0 390 60 0 0) #(struct:"
 #"pulled-point 0 0 410 60 0 0) #(struct:pulled-point 0 0 410 80 0 0) #"
 #"(struct:pulled-point 0 0 390 80 0 0)) 255 \"red\") #(struct:crop (#("
 #"struct:point 0 0) #(struct:point 450 0) #(struct:point 450 450) #(st"
 #"ruct:point 0 450)) #(struct:overlay #(struct:polygon (#(struct:pulle"
 #"d-point 0 0 30 90 0 0) #(struct:pulled-point 0 0 50 90 0 0) #(struct"
 #":pulled-point 0 0 50 110 0 0) #(struct:pulled-point 0 0 30 110 0 0))"
 #" 255 \"red\") #(struct:crop (#(struct:point 0 0) #(struct:point 450 "
 #"0) #(struct:point 450 450) #(struct:point 0 450)) #(struct:overlay #"
 #"(struct:polygon (#(struct:pulled-point 0 0 70 90 0 0) #(struct:pulle"
 #"d-point 0 0 90 90 0 0) #(struct:pulled-point 0 0 90 110 0 0) #(struc"
 #"t:pulled-point 0 0 70 110 0 0)) 255 \"red\") #(struct:crop (#(struct"
 #":point 0 0) #(struct:point 450 0) #(struct:point 450 450) #(struct:p"
 #"oint 0 450)) #(struct:overlay #(struct:polygon (#(struct:pulled-poin"
 #"t 0 0 110 90 0 0) #(struct:pulled-point 0 0 130 90 0 0) #(struct:pul"
 #"led-point 0 0 130 110 0 0) #(struct:pulled-point 0 0 110 110 0 0)) 2"
 #"55 \"red\") #(struct:crop (#(struct:point 0 0) #(struct:point 450 0)"
 #" #(struct:point 450 450) #(struct:point 0 450)) #(struct:overlay #(s"
 #"truct:polygon (#(struct:pulled-point 0 0 150 90 0 0) #(struct:pulled"
 #"-point 0 0 170 90 0 0) #(struct:pulled-point 0 0 170 110 0 0) #(stru"
 #"ct:pulled-point 0 0 150 110 0 0)) 255 \"red\") #(struct:crop (#(stru"
 #"ct:point 0 0) #(struct:point 450 0) #(struct:point 450 450) #(struct"
 #":point 0 450)) #(struct:overlay #(struct:polygon (#(struct:pulled-po"
 #"int 0 0 190 90 0 0) #(struct:pulled-point 0 0 210 90 0 0) #(struct:p"
 #"ulled-point 0 0 210 110 0 0) #(struct:pulled-point 0 0 190 110 0 0))"
 #" 255 \"red\") #(struct:crop (#(struct:point 0 0) #(struct:point 450 "
 #"0) #(struct:point 450 450) #(struct:point 0 450)) #(struct:overlay #"
 #"(struct:polygon (#(struct:pulled-point 0 0 230 90 0 0) #(struct:pull"
 #"ed-point 0 0 250 90 0 0) #(struct:pulled-point 0 0 250 110 0 0) #(st"
 #"ruct:pulled-point 0 0 230 110 0 0)) 255 \"red\") #(struct:crop (#(st"
 #"ruct:point 0 0) #(struct:point 450 0) #(struct:point 450 450) #(stru"
 #"ct:point 0 450)) #(struct:overlay #(struct:polygon (#(struct:pulled-"
 #"point 0 0 270 90 0 0) #(struct:pulled-point 0 0 290 90 0 0) #(struct"
 #":pulled-point 0 0 290 110 0 0) #(struct:pulled-point 0 0 270 110 0 0"
 #")) 255 \"red\") #(struct:crop (#(struct:point 0 0) #(struct:point 45"
 #"0 0) #(struct:point 450 450) #(struct:point 0 450)) #(struct:overlay"
 #" #(struct:polygon (#(struct:pulled-point 0 0 310 90 0 0) #(struct:pu"
 #"lled-point 0 0 330 90 0 0) #(struct:pulled-point 0 0 330 110 0 0) #("
 #"struct:pulled-point 0 0 310 110 0 0)) 255 \"red\") #(struct:crop (#("
 #"struct:point 0 0) #(struct:point 450 0) #(struct:point 450 450) #(st"
 #"ruct:point 0 450)) #(struct:overlay #(struct:polygon (#(struct:pulle"
 #"d-point 0 0 350 90 0 0) #(struct:pulled-point 0 0 370 90 0 0) #(stru"
 #"ct:pulled-point 0 0 370 110 0 0) #(struct:pulled-point 0 0 350 110 0"
 #" 0)) 255 \"red\") #(struct:crop (#(struct:point 0 0) #(struct:point "
 #"450 0) #(struct:point 450 450) #(struct:point 0 450)) #(struct:overl"
 #"ay #(struct:polygon (#(struct:pulled-point 0 0 390 90 0 0) #(struct:"
 #"pulled-point 0 0 410 90 0 0) #(struct:pulled-point 0 0 410 110 0 0) "
 #"#(struct:pulled-point 0 0 390 110 0 0)) 255 \"red\") #(struct:crop ("
 #"#(struct:point 0 0) #(struct:point 450 0) #(struct:point 450 450) #("
 #"struct:point 0 450)) #(struct:overlay #(struct:polygon (#(struct:pul"
 #"led-point 0 0 30 120 0 0) #(struct:pulled-point 0 0 50 120 0 0) #(st"
 #"ruct:pulled-point 0 0 50 140 0 0) #(struct:pulled-point 0 0 30 140 0"
 #" 0)) 255 \"red\") #(struct:crop (#(struct:point 0 0) #(struct:point "
 #"450 0) #(struct:point 450 450) #(struct:point 0 450)) #(struct:overl"
 #"ay #(struct:polygon (#(struct:pulled-point 0 0 70 120 0 0) #(struct:"
 #"pulled-point 0 0 90 120 0 0) #(struct:pulled-point 0 0 90 140 0 0) #"
 #"(struct:pulled-point 0 0 70 140 0 0)) 255 \"red\") #(struct:crop (#("
 #"struct:point 0 0) #(struct:point 450 0) #(struct:point 450 450) #(st"
 #"ruct:point 0 450)) #(struct:overlay #(struct:polygon (#(struct:pulle"
 #"d-point 0 0 110 120 0 0) #(struct:pulled-point 0 0 130 120 0 0) #(st"
 #"ruct:pulled-point 0 0 130 140 0 0) #(struct:pulled-point 0 0 110 140"
 #" 0 0)) 255 \"red\") #(struct:crop (#(struct:point 0 0) #(struct:poin"
 #"t 450 0) #(struct:point 450 450) #(struct:point 0 450)) #(struct:ove"
 #"rlay #(struct:polygon (#(struct:pulled-point 0 0 150 120 0 0) #(stru"
 #"ct:pulled-point 0 0 170 120 0 0) #(struct:pulled-point 0 0 170 140 0"
 #" 0) #(struct:pulled-point 0 0 150 140 0 0)) 255 \"red\") #(struct:cr"
 #"op (#(struct:point 0 0) #(struct:point 450 0) #(struct:point 450 450"
 #") #(struct:point 0 450)) #(struct:overlay #(struct:polygon (#(struct"
 #":pulled-point 0 0 190 120 0 0) #(struct:pulled-point 0 0 210 120 0 0"
 #") #(struct:pulled-point 0 0 210 140 0 0) #(struct:pulled-point 0 0 1"
 #"90 140 0 0)) 255 \"red\") #(struct:crop (#(struct:point 0 0) #(struc"
 #"t:point 450 0) #(struct:point 450 450) #(struct:point 0 450)) #(stru"
 #"ct:overlay #(struct:polygon (#(struct:pulled-point 0 0 230 120 0 0) "
 #"#(struct:pulled-point 0 0 250 120 0 0) #(struct:pulled-point 0 0 250"
 #" 140 0 0) #(struct:pulled-point 0 0 230 140 0 0)) 255 \"red\") #(str"
 #"uct:crop (#(struct:point 0 0) #(struct:point 450 0) #(struct:point 4"
 #"50 450) #(struct:point 0 450)) #(struct:overlay #(struct:polygon (#("
 #"struct:pulled-point 0 0 270 120 0 0) #(struct:pulled-point 0 0 290 1"
 #"20 0 0) #(struct:pulled-point 0 0 290 140 0 0) #(struct:pulled-point"
 #" 0 0 270 140 0 0)) 255 \"red\") #(struct:crop (#(struct:point 0 0) #"
 #"(struct:point 450 0) #(struct:point 450 450) #(struct:point 0 450)) "
 #"#(struct:overlay #(struct:polygon (#(struct:pulled-point 0 0 310 120"
 #" 0 0) #(struct:pulled-point 0 0 330 120 0 0) #(struct:pulled-point 0"
 #" 0 330 140 0 0) #(struct:pulled-point 0 0 310 140 0 0)) 255 \"red\")"
 #" #(struct:crop (#(struct:point 0 0) #(struct:point 450 0) #(struct:p"
 #"oint 450 450) #(struct:point 0 450)) #(struct:overlay #(struct:polyg"
 #"on (#(struct:pulled-point 0 0 350 120 0 0) #(struct:pulled-point 0 0"
 #" 370 120 0 0) #(struct:pulled-point 0 0 370 140 0 0) #(struct:pulled"
 #"-point 0 0 350 140 0 0)) 255 \"red\") #(struct:crop (#(struct:point "
 #"0 0) #(struct:point 450 0) #(struct:point 450 450) #(struct:point 0 "
 #"450)) #(struct:overlay #(struct:polygon (#(struct:pulled-point 0 0 3"
 #"90 120 0 0) #(struct:pulled-point 0 0 410 120 0 0) #(struct:pulled-p"
 #"oint 0 0 410 140 0 0) #(struct:pulled-point 0 0 390 140 0 0)) 255 \""
 #"red\") #(struct:crop (#(struct:point 0 0) #(struct:point 450 0) #(st"
 #"ruct:point 450 450) #(struct:point 0 450)) #(struct:overlay #(struct"
 #":polygon (#(struct:pulled-point 0 0 30 150 0 0) #(struct:pulled-poin"
 #"t 0 0 50 150 0 0) #(struct:pulled-point 0 0 50 170 0 0) #(struct:pul"
 #"led-point 0 0 30 170 0 0)) 255 \"red\") #(struct:crop (#(struct:poin"
 #"t 0 0) #(struct:point 450 0) #(struct:point 450 450) #(struct:point "
 #"0 450)) #(struct:overlay #(struct:polygon (#(struct:pulled-point 0 0"
 #" 70 150 0 0) #(struct:pulled-point 0 0 90 150 0 0) #(struct:pulled-p"
 #"oint 0 0 90 170 0 0) #(struct:pulled-point 0 0 70 170 0 0)) 255 \"re"
 #"d\") #(struct:crop (#(struct:point 0 0) #(struct:point 450 0) #(stru"
 #"ct:point 450 450) #(struct:point 0 450)) #(struct:overlay #(struct:p"
 #"olygon (#(struct:pulled-point 0 0 110 150 0 0) #(struct:pulled-point"
 #" 0 0 130 150 0 0) #(struct:pulled-point 0 0 130 170 0 0) #(struct:pu"
 #"lled-point 0 0 110 170 0 0)) 255 \"red\") #(struct:crop (#(struct:po"
 #"int 0 0) #(struct:point 450 0) #(struct:point 450 450) #(struct:poin"
 #"t 0 450)) #(struct:overlay #(struct:polygon (#(struct:pulled-point 0"
 #" 0 150 150 0 0) #(struct:pulled-point 0 0 170 150 0 0) #(struct:pull"
 #"ed-point 0 0 170 170 0 0) #(struct:pulled-point 0 0 150 170 0 0)) 25"
 #"5 \"red\") #(struct:crop (#(struct:point 0 0) #(struct:point 450 0) "
 #"#(struct:point 450 450) #(struct:point 0 450)) #(struct:overlay #(st"
 #"ruct:polygon (#(struct:pulled-point 0 0 190 150 0 0) #(struct:pulled"
 #"-point 0 0 210 150 0 0) #(struct:pulled-point 0 0 210 170 0 0) #(str"
 #"uct:pulled-point 0 0 190 170 0 0)) 255 \"red\") #(struct:crop (#(str"
 #"uct:point 0 0) #(struct:point 450 0) #(struct:point 450 450) #(struc"
 #"t:point 0 450)) #(struct:overlay #(struct:polygon (#(struct:pulled-p"
 #"oint 0 0 230 150 0 0) #(struct:pulled-point 0 0 250 150 0 0) #(struc"
 #"t:pulled-point 0 0 250 170 0 0) #(struct:pulled-point 0 0 230 170 0 "
 #"0)) 255 \"red\") #(struct:crop (#(struct:point 0 0) #(struct:point 4"
 #"50 0) #(struct:point 450 450) #(struct:point 0 450)) #(struct:overla"
 #"y #(struct:polygon (#(struct:pulled-point 0 0 270 150 0 0) #(struct:"
 #"pulled-point 0 0 290 150 0 0) #(struct:pulled-point 0 0 290 170 0 0)"
 #" #(struct:pulled-point 0 0 270 170 0 0)) 255 \"red\") #(struct:crop "
 #"(#(struct:point 0 0) #(struct:point 450 0) #(struct:point 450 450) #"
 #"(struct:point 0 450)) #(struct:overlay #(struct:polygon (#(struct:pu"
 #"lled-point 0 0 310 150 0 0) #(struct:pulled-point 0 0 330 150 0 0) #"
 #"(struct:pulled-point 0 0 330 170 0 0) #(struct:pulled-point 0 0 310 "
 #"170 0 0)) 255 \"red\") #(struct:crop (#(struct:point 0 0) #(struct:p"
 #"oint 450 0) #(struct:point 450 450) #(struct:point 0 450)) #(struct:"
 #"overlay #(struct:polygon (#(struct:pulled-point 0 0 350 150 0 0) #(s"
 #"truct:pulled-point 0 0 370 150 0 0) #(struct:pulled-point 0 0 370 17"
 #"0 0 0) #(struct:pulled-point 0 0 350 170 0 0)) 255 \"red\") #(struct"
 #":crop (#(struct:point 0 0) #(struct:point 450 0) #(struct:point 450 "
 #"450) #(struct:point 0 450)) #(struct:overlay #(struct:polygon (#(str"
 #"uct:pulled-point 0 0 390 150 0 0) #(struct:pulled-point 0 0 410 150 "
 #"0 0) #(struct:pulled-point 0 0 410 170 0 0) #(struct:pulled-point 0 "
 #"0 390 170 0 0)) 255 \"red\") #(struct:crop (#(struct:point 0 0) #(st"
 #"ruct:point 450 0) #(struct:point 450 450) #(struct:point 0 450)) #(s"
 #"truct:overlay #(struct:polygon (#(struct:pulled-point 0 0 185 412 0 "
 #"0) #(struct:pulled-point 0 0 215 412 0 0) #(struct:pulled-point 0 0 "
 #"215 428 0 0) #(struct:pulled-point 0 0 185 428 0 0)) 255 \"black\") "
 #"#(struct:crop (#(struct:point 0 0) #(struct:point 450 0) #(struct:po"
 #"int 450 450) #(struct:point 0 450)) #(struct:overlay #(struct:transl"
 #"ate 100 100 #(struct:ellipse 4 4 0 255 \"red\")) #(struct:crop (#(st"
 #"ruct:point 0 0) #(struct:point 450 0) #(struct:point 450 450) #(stru"
 #"ct:point 0 450)) #(struct:overlay #(struct:translate 150 120 #(struc"
 #"t:ellipse 4 4 0 255 \"red\")) #(struct:crop (#(struct:point 0 0) #(s"
 #"truct:point 450 0) #(struct:point 450 450) #(struct:point 0 450)) #("
 #"struct:overlay #(struct:translate 180 110 #(struct:ellipse 4 4 0 255"
 #" \"red\")) #(struct:crop (#(struct:point 0 0) #(struct:point 450 0) "
 #"#(struct:point 450 450) #(struct:point 0 450)) #(struct:overlay #(st"
 #"ruct:translate 300 200 #(struct:ellipse 4 4 0 255 \"black\")) #(stru"
 #"ct:crop (#(struct:point 0 0) #(struct:point 450 0) #(struct:point 45"
 #"0 450) #(struct:point 0 450)) #(struct:overlay #(struct:translate 25"
 #"0 170 #(struct:ellipse 4 4 0 255 \"black\")) #(struct:crop (#(struct"
 #":point 0 0) #(struct:point 450 0) #(struct:point 450 450) #(struct:p"
 #"oint 0 450)) #(struct:overlay #(struct:translate 270 180 #(struct:el"
 #"lipse 4 4 0 255 \"black\")) #(struct:crop (#(struct:point 0 0) #(str"
 #"uct:point 450 0) #(struct:point 450 450) #(struct:point 0 450)) #(st"
 #"ruct:overlay #(struct:overlay #(struct:overlay #(struct:overlay #(st"
 #"ruct:overlay #(struct:overlay #(struct:overlay #(struct:overlay #(st"
 #"ruct:overlay #(struct:overlay #(struct:overlay #(struct:overlay #(st"
 #"ruct:overlay #(struct:translate 1"
 #"71.5 12.0 #(struct:text \"T\" 0 1 \"black\" 20 #f swiss normal norma"
 #"l #f)) #(struct:translate 183.0 12.0 #(struct:text \"o\" 0 1 \"black"
 #"\" 20 #f swiss normal normal #f))) #(struct:translate 191.5 12.0 #(s"
 #"truct:text \"t\" 0 1 \"black\" 20 #f swiss normal normal #f))) #(str"
 #"uct:translate 200.0 12.0 #(struct:text \"a\" 0 1 \"black\" 20 #f swi"
 #"ss normal normal #f))) #(struct:tr"
 #"anslate 207.5 12.0 #(struct:text \"l\" 0 1 \"black\" 20 #f swiss nor"
 #"mal normal #f))) #(struct:translate 212.5 12.0 #(struct:text \" \" 0"
 #" 1 \"black\" 20 #f swiss normal normal #f))) #(struct:translate 222."
 #"0 12.0 #(struct:text \"S\" 0 1 \"black\" 20 #f swiss normal normal #"
 #"f))) #(struct:translate 233.5 12.0 #(struct:text \"c\" 0 1 \"black\""
 #" 20 #f swiss normal normal #f))) #(struct:translate 244.0 12.0 #(str"
 #"uct:text \"o\" 0 1 \"black\" 20 #f swiss normal normal #f))) #(struc"
 #"t:translate 253.0 12.0 #(struct:text \"r\" 0 1 \"black\" 20 #f swiss"
 #" normal normal #f))) #(struct:translate 262.0 12.0 #(struct:text \"e"
 #"\" 0 1 \"black\" 20 #f swiss normal normal #f))) #(struct:translate "
 #"270.5 12.0 #(struct:text \":\" 0 1 \"black\" 20 #f swiss normal norm"
 #"al #f))) #(struct:translate 279.0 12.0 #(struct:text \"5\" 0 1 \"bla"
 #"ck\" 20 #f swiss normal normal #f))) #(struct:crop (#(struct:point 0"
 #" 0) #(struct:point 450 0) #(struct:point 450 450) #(struct:point 0 4"
 #"50)) #(struct:overlay #(struct:overlay #(struct:overlay #(struct:ove"
 #"rlay #(struct:overlay #(struct:overlay #(struct:overlay #(struct:ove"
 #"rlay #(struct:overlay #(struct:overlay #(struct:overlay #(struct:ove"
 #"rlay #(struct:overlay #(struct:overlay #(struct:overlay #(struct:ove"
 #"rlay #(struct:overlay #(struct:overlay #(struct:translate 312.0 440."
 #"0 #(struct:text \"N\" 0 1 \"black\" 16 #f swiss normal normal #f)) #"
 #"(struct:translate 322.5 440.0 #(struct:text \"u\" 0 1 \"black\" 16 #"
 #"f swiss normal normal #f))) #(struct:translate 333.5 440.0 #(struct:"
 #"text \"m\" 0 1 \"black\" 16 #f swiss normal normal #f))) #(struct:tr"
 #"anslate 344.5 440.0 #(struct:text \"b\" 0 1 \"black\" 16 #f swiss no"
 #"rmal normal #f))) #(struct:translate 353.5 440.0 #(struct:text \"e\""
 #" 0 1 \"black\" 16 #f swiss normal normal #f))) #(struct:translate 36"
 #"0.5 440.0 #(struct:text \"r\" 0 1 \"black\" 16 #f swiss normal norma"
 #"l #f))) #(struct:translate 365.0 440.0 #(struct:text \" \" 0 1 \"bla"
 #"ck\" 16 #f swiss normal normal #f))) #(struct:translate 371.5 440.0 "
 #"#(struct:text \"o\" 0 1 \"black\" 16 #f swiss normal normal #f))) #("
 #"struct:translate 378.0 440.0 #(struct:text \"f\" 0 1 \"black\" 16 #f"
 #" swiss normal normal #f))) #(struct:translate 382.0 440.0 #(struct:t"
 #"ext \" \" 0 1 \"black\" 16 #f swiss normal normal #f))) #(struct:tra"
 #"nslate 386.0 440.0 #(struct:text \"l\" 0 1 \"black\" 16 #f swiss nor"
 #"mal normal #f))) #(struct:translate 390.0 440.0 #(struct:text \"i\" "
 #"0 1 \"black\" 16 #f swiss normal normal #f))) #(struct:translate 396"
 #".0 440.0 #(struct:text \"v\" 0 1 \"black\" 16 #f swiss normal normal"
 #" #f))) #(struct:translate 404.5 440.0 #(struct:text \"e\" 0 1 \"blac"
 #"k\" 16 #f swiss normal normal #f))) #(struct:translate 413.0 440.0 #"
 #"(struct:text \"s\" 0 1 \"black\" 16 #f swiss normal normal #f))) #(s"
 #"truct:translate 419.0 440.0 #(struct:text \":\" 0 1 \"black\" 16 #f "
 #"swiss normal normal #f))) #(struct:translate 423.0 440.0 #(struct:te"
 #"xt \" \" 0 1 \"black\" 16 #f swiss normal normal #f))) #(struct:tran"
 #"slate 429.5 440.0 #(struct:text \"3\" 0 1 \"black\" 16 #f swiss norm"
 #"al normal #f))) #(struct:crop (#(struct:point 0 0) #(struct:point 45"
 #"0 0) #(struct:point 450 450) #(struct:point 0 450)) #(struct:overlay"
 #" #(struct:polygon (#(struct:pulled-point 0 0 0 0 0 0) #(struct:pulle"
 #"d-point 0 0 450 0 0 0) #(struct:pulled-point 0 0 450 450 0 0) #(stru"
 #"ct:pulled-point 0 0 0 450 0 0)) outline #(struct:pen \"black\" 2 sol"
 #"id round round)) #(struct:polygon (#(struct:pulled-point 0 0 0 0 0 0"
 #") #(struct:pulled-point 0 0 450 0 0 0) #(struct:pulled-point 0 0 450"
 #" 450 0 0) #(struct:pulled-point 0 0 0 450 0 0)) 255 \"white\")))))))"
 #"))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))"
 #")))))))))))))))))))))))))) #(struct:bb 450 450 450.0) #f)"
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 24 #";;;; Function Definition"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 10 #"world-draw"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 14 3 10 #"mship-draw"
0 0 24 3 2 #" ("
0 0 14 3 11 #"world-mship"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 15 #"allinvader-draw"
0 0 24 3 2 #" ("
0 0 14 3 16 #"world-allinvader"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 14 3 14 #"spaceship-draw"
0 0 24 3 2 #" ("
0 0 14 3 15 #"world-spaceship"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 14 3 8 #"aib-draw"
0 0 24 3 2 #" ("
0 0 14 3 9 #"world-aib"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"               ("
0 0 14 3 8 #"asb-draw"
0 0 24 3 2 #" ("
0 0 14 3 9 #"world-asb"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 19 #"                  ("
0 0 14 3 10 #"score-draw"
0 0 24 3 2 #" ("
0 0 14 3 11 #"world-score"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 22 #"                     ("
0 0 14 3 8 #"nol-draw"
0 0 24 3 2 #" ("
0 0 14 3 9 #"world-nol"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 25 #"                         "
0 0 14 3 10 #"BACKGROUND"
0 0 24 3 8 #"))))))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 10 #";;;; Tests"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 10 #"world-draw"
0 0 24 29 1 #"\n"
0 0 24 3 2 #" ("
0 0 14 3 10 #"make-world"
0 0 24 3 1 #" "
0 0 14 3 5 #"empty"
0 0 24 3 1 #" "
0 0 14 3 3 #"All"
0 0 24 3 2 #" ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 21 3 3 #"200"
0 0 24 3 1 #" "
0 0 21 3 3 #"420"
0 0 24 3 2 #") "
0 0 14 3 11 #"aib-example"
0 0 24 3 1 #" "
0 0 14 3 11 #"asb-example"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 1 #" "
0 0 21 3 3 #"100"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 6           4 67 17854
(
 #"(#(struct:crop (#(struct:point 0 0) #(struct:point 450 0) #(struct:p"
 #"oint 450 450) #(struct:point 0 450)) #(struct:overlay #(struct:polyg"
 #"on (#(struct:pulled-point 0 0 30 60 0 0) #(struct:pulled-point 0 0 5"
 #"0 60 0 0) #(struct:pulled-point 0 0 50 80 0 0) #(struct:pulled-point"
 #" 0 0 30 80 0 0)) 255 \"red\") #(struct:crop (#(struct:point 0 0) #(s"
 #"truct:point 450 0) #(struct:point 450 450) #(struct:point 0 450)) #("
 #"struct:overlay #(struct:polygon (#(struct:pulled-point 0 0 70 60 0 0"
 #") #(struct:pulled-point 0 0 90 60 0 0) #(struct:pulled-point 0 0 90 "
 #"80 0 0) #(struct:pulled-point 0 0 70 80 0 0)) 255 \"red\") #(struct:"
 #"crop (#(struct:point 0 0) #(struct:point 450 0) #(struct:point 450 4"
 #"50) #(struct:point 0 450)) #(struct:overlay #(struct:polygon (#(stru"
 #"ct:pulled-point 0 0 110 60 0 0) #(struct:pulled-point 0 0 130 60 0 0"
 #") #(struct:pulled-point 0 0 130 80 0 0) #(struct:pulled-point 0 0 11"
 #"0 80 0 0)) 255 \"red\") #(struct:crop (#(struct:point 0 0) #(struct:"
 #"point 450 0) #(struct:point 450 450) #(struct:point 0 450)) #(struct"
 #":overlay #(struct:polygon (#(struct:pulled-point 0 0 150 60 0 0) #(s"
 #"truct:pulled-point 0 0 170 60 0 0) #(struct:pulled-point 0 0 170 80 "
 #"0 0) #(struct:pulled-point 0 0 150 80 0 0)) 255 \"red\") #(struct:cr"
 #"op (#(struct:point 0 0) #(struct:point 450 0) #(struct:point 450 450"
 #") #(struct:point 0 450)) #(struct:overlay #(struct:polygon (#(struct"
 #":pulled-point 0 0 190 60 0 0) #(struct:pulled-point 0 0 210 60 0 0) "
 #"#(struct:pulled-point 0 0 210 80 0 0) #(struct:pulled-point 0 0 190 "
 #"80 0 0)) 255 \"red\") #(struct:crop (#(struct:point 0 0) #(struct:po"
 #"int 450 0) #(struct:point 450 450) #(struct:point 0 450)) #(struct:o"
 #"verlay #(struct:polygon (#(struct:pulled-point 0 0 230 60 0 0) #(str"
 #"uct:pulled-point 0 0 250 60 0 0) #(struct:pulled-point 0 0 250 80 0 "
 #"0) #(struct:pulled-point 0 0 230 80 0 0)) 255 \"red\") #(struct:crop"
 #" (#(struct:point 0 0) #(struct:point 450 0) #(struct:point 450 450) "
 #"#(struct:point 0 450)) #(struct:overlay #(struct:polygon (#(struct:p"
 #"ulled-point 0 0 270 60 0 0) #(struct:pulled-point 0 0 290 60 0 0) #("
 #"struct:pulled-point 0 0 290 80 0 0) #(struct:pulled-point 0 0 270 80"
 #" 0 0)) 255 \"red\") #(struct:crop (#(struct:point 0 0) #(struct:poin"
 #"t 450 0) #(struct:point 450 450) #(struct:point 0 450)) #(struct:ove"
 #"rlay #(struct:polygon (#(struct:pulled-point 0 0 310 60 0 0) #(struc"
 #"t:pulled-point 0 0 330 60 0 0) #(struct:pulled-point 0 0 330 80 0 0)"
 #" #(struct:pulled-point 0 0 310 80 0 0)) 255 \"red\") #(struct:crop ("
 #"#(struct:point 0 0) #(struct:point 450 0) #(struct:point 450 450) #("
 #"struct:point 0 450)) #(struct:overlay #(struct:polygon (#(struct:pul"
 #"led-point 0 0 350 60 0 0) #(struct:pulled-point 0 0 370 60 0 0) #(st"
 #"ruct:pulled-point 0 0 370 80 0 0) #(struct:pulled-point 0 0 350 80 0"
 #" 0)) 255 \"red\") #(struct:crop (#(struct:point 0 0) #(struct:point "
 #"450 0) #(struct:point 450 450) #(struct:point 0 450)) #(struct:overl"
 #"ay #(struct:polygon (#(struct:pulled-point 0 0 390 60 0 0) #(struct:"
 #"pulled-point 0 0 410 60 0 0) #(struct:pulled-point 0 0 410 80 0 0) #"
 #"(struct:pulled-point 0 0 390 80 0 0)) 255 \"red\") #(struct:crop (#("
 #"struct:point 0 0) #(struct:point 450 0) #(struct:point 450 450) #(st"
 #"ruct:point 0 450)) #(struct:overlay #(struct:polygon (#(struct:pulle"
 #"d-point 0 0 30 90 0 0) #(struct:pulled-point 0 0 50 90 0 0) #(struct"
 #":pulled-point 0 0 50 110 0 0) #(struct:pulled-point 0 0 30 110 0 0))"
 #" 255 \"red\") #(struct:crop (#(struct:point 0 0) #(struct:point 450 "
 #"0) #(struct:point 450 450) #(struct:point 0 450)) #(struct:overlay #"
 #"(struct:polygon (#(struct:pulled-point 0 0 70 90 0 0) #(struct:pulle"
 #"d-point 0 0 90 90 0 0) #(struct:pulled-point 0 0 90 110 0 0) #(struc"
 #"t:pulled-point 0 0 70 110 0 0)) 255 \"red\") #(struct:crop (#(struct"
 #":point 0 0) #(struct:point 450 0) #(struct:point 450 450) #(struct:p"
 #"oint 0 450)) #(struct:overlay #(struct:polygon (#(struct:pulled-poin"
 #"t 0 0 110 90 0 0) #(struct:pulled-point 0 0 130 90 0 0) #(struct:pul"
 #"led-point 0 0 130 110 0 0) #(struct:pulled-point 0 0 110 110 0 0)) 2"
 #"55 \"red\") #(struct:crop (#(struct:point 0 0) #(struct:point 450 0)"
 #" #(struct:point 450 450) #(struct:point 0 450)) #(struct:overlay #(s"
 #"truct:polygon (#(struct:pulled-point 0 0 150 90 0 0) #(struct:pulled"
 #"-point 0 0 170 90 0 0) #(struct:pulled-point 0 0 170 110 0 0) #(stru"
 #"ct:pulled-point 0 0 150 110 0 0)) 255 \"red\") #(struct:crop (#(stru"
 #"ct:point 0 0) #(struct:point 450 0) #(struct:point 450 450) #(struct"
 #":point 0 450)) #(struct:overlay #(struct:polygon (#(struct:pulled-po"
 #"int 0 0 190 90 0 0) #(struct:pulled-point 0 0 210 90 0 0) #(struct:p"
 #"ulled-point 0 0 210 110 0 0) #(struct:pulled-point 0 0 190 110 0 0))"
 #" 255 \"red\") #(struct:crop (#(struct:point 0 0) #(struct:point 450 "
 #"0) #(struct:point 450 450) #(struct:point 0 450)) #(struct:overlay #"
 #"(struct:polygon (#(struct:pulled-point 0 0 230 90 0 0) #(struct:pull"
 #"ed-point 0 0 250 90 0 0) #(struct:pulled-point 0 0 250 110 0 0) #(st"
 #"ruct:pulled-point 0 0 230 110 0 0)) 255 \"red\") #(struct:crop (#(st"
 #"ruct:point 0 0) #(struct:point 450 0) #(struct:point 450 450) #(stru"
 #"ct:point 0 450)) #(struct:overlay #(struct:polygon (#(struct:pulled-"
 #"point 0 0 270 90 0 0) #(struct:pulled-point 0 0 290 90 0 0) #(struct"
 #":pulled-point 0 0 290 110 0 0) #(struct:pulled-point 0 0 270 110 0 0"
 #")) 255 \"red\") #(struct:crop (#(struct:point 0 0) #(struct:point 45"
 #"0 0) #(struct:point 450 450) #(struct:point 0 450)) #(struct:overlay"
 #" #(struct:polygon (#(struct:pulled-point 0 0 310 90 0 0) #(struct:pu"
 #"lled-point 0 0 330 90 0 0) #(struct:pulled-point 0 0 330 110 0 0) #("
 #"struct:pulled-point 0 0 310 110 0 0)) 255 \"red\") #(struct:crop (#("
 #"struct:point 0 0) #(struct:point 450 0) #(struct:point 450 450) #(st"
 #"ruct:point 0 450)) #(struct:overlay #(struct:polygon (#(struct:pulle"
 #"d-point 0 0 350 90 0 0) #(struct:pulled-point 0 0 370 90 0 0) #(stru"
 #"ct:pulled-point 0 0 370 110 0 0) #(struct:pulled-point 0 0 350 110 0"
 #" 0)) 255 \"red\") #(struct:crop (#(struct:point 0 0) #(struct:point "
 #"450 0) #(struct:point 450 450) #(struct:point 0 450)) #(struct:overl"
 #"ay #(struct:polygon (#(struct:pulled-point 0 0 390 90 0 0) #(struct:"
 #"pulled-point 0 0 410 90 0 0) #(struct:pulled-point 0 0 410 110 0 0) "
 #"#(struct:pulled-point 0 0 390 110 0 0)) 255 \"red\") #(struct:crop ("
 #"#(struct:point 0 0) #(struct:point 450 0) #(struct:point 450 450) #("
 #"struct:point 0 450)) #(struct:overlay #(struct:polygon (#(struct:pul"
 #"led-point 0 0 30 120 0 0) #(struct:pulled-point 0 0 50 120 0 0) #(st"
 #"ruct:pulled-point 0 0 50 140 0 0) #(struct:pulled-point 0 0 30 140 0"
 #" 0)) 255 \"red\") #(struct:crop (#(struct:point 0 0) #(struct:point "
 #"450 0) #(struct:point 450 450) #(struct:point 0 450)) #(struct:overl"
 #"ay #(struct:polygon (#(struct:pulled-point 0 0 70 120 0 0) #(struct:"
 #"pulled-point 0 0 90 120 0 0) #(struct:pulled-point 0 0 90 140 0 0) #"
 #"(struct:pulled-point 0 0 70 140 0 0)) 255 \"red\") #(struct:crop (#("
 #"struct:point 0 0) #(struct:point 450 0) #(struct:point 450 450) #(st"
 #"ruct:point 0 450)) #(struct:overlay #(struct:polygon (#(struct:pulle"
 #"d-point 0 0 110 120 0 0) #(struct:pulled-point 0 0 130 120 0 0) #(st"
 #"ruct:pulled-point 0 0 130 140 0 0) #(struct:pulled-point 0 0 110 140"
 #" 0 0)) 255 \"red\") #(struct:crop (#(struct:point 0 0) #(struct:poin"
 #"t 450 0) #(struct:point 450 450) #(struct:point 0 450)) #(struct:ove"
 #"rlay #(struct:polygon (#(struct:pulled-point 0 0 150 120 0 0) #(stru"
 #"ct:pulled-point 0 0 170 120 0 0) #(struct:pulled-point 0 0 170 140 0"
 #" 0) #(struct:pulled-point 0 0 150 140 0 0)) 255 \"red\") #(struct:cr"
 #"op (#(struct:point 0 0) #(struct:point 450 0) #(struct:point 450 450"
 #") #(struct:point 0 450)) #(struct:overlay #(struct:polygon (#(struct"
 #":pulled-point 0 0 190 120 0 0) #(struct:pulled-point 0 0 210 120 0 0"
 #") #(struct:pulled-point 0 0 210 140 0 0) #(struct:pulled-point 0 0 1"
 #"90 140 0 0)) 255 \"red\") #(struct:crop (#(struct:point 0 0) #(struc"
 #"t:point 450 0) #(struct:point 450 450) #(struct:point 0 450)) #(stru"
 #"ct:overlay #(struct:polygon (#(struct:pulled-point 0 0 230 120 0 0) "
 #"#(struct:pulled-point 0 0 250 120 0 0) #(struct:pulled-point 0 0 250"
 #" 140 0 0) #(struct:pulled-point 0 0 230 140 0 0)) 255 \"red\") #(str"
 #"uct:crop (#(struct:point 0 0) #(struct:point 450 0) #(struct:point 4"
 #"50 450) #(struct:point 0 450)) #(struct:overlay #(struct:polygon (#("
 #"struct:pulled-point 0 0 270 120 0 0) #(struct:pulled-point 0 0 290 1"
 #"20 0 0) #(struct:pulled-point 0 0 290 140 0 0) #(struct:pulled-point"
 #" 0 0 270 140 0 0)) 255 \"red\") #(struct:crop (#(struct:point 0 0) #"
 #"(struct:point 450 0) #(struct:point 450 450) #(struct:point 0 450)) "
 #"#(struct:overlay #(struct:polygon (#(struct:pulled-point 0 0 310 120"
 #" 0 0) #(struct:pulled-point 0 0 330 120 0 0) #(struct:pulled-point 0"
 #" 0 330 140 0 0) #(struct:pulled-point 0 0 310 140 0 0)) 255 \"red\")"
 #" #(struct:crop (#(struct:point 0 0) #(struct:point 450 0) #(struct:p"
 #"oint 450 450) #(struct:point 0 450)) #(struct:overlay #(struct:polyg"
 #"on (#(struct:pulled-point 0 0 350 120 0 0) #(struct:pulled-point 0 0"
 #" 370 120 0 0) #(struct:pulled-point 0 0 370 140 0 0) #(struct:pulled"
 #"-point 0 0 350 140 0 0)) 255 \"red\") #(struct:crop (#(struct:point "
 #"0 0) #(struct:point 450 0) #(struct:point 450 450) #(struct:point 0 "
 #"450)) #(struct:overlay #(struct:polygon (#(struct:pulled-point 0 0 3"
 #"90 120 0 0) #(struct:pulled-point 0 0 410 120 0 0) #(struct:pulled-p"
 #"oint 0 0 410 140 0 0) #(struct:pulled-point 0 0 390 140 0 0)) 255 \""
 #"red\") #(struct:crop (#(struct:point 0 0) #(struct:point 450 0) #(st"
 #"ruct:point 450 450) #(struct:point 0 450)) #(struct:overlay #(struct"
 #":polygon (#(struct:pulled-point 0 0 30 150 0 0) #(struct:pulled-poin"
 #"t 0 0 50 150 0 0) #(struct:pulled-point 0 0 50 170 0 0) #(struct:pul"
 #"led-point 0 0 30 170 0 0)) 255 \"red\") #(struct:crop (#(struct:poin"
 #"t 0 0) #(struct:point 450 0) #(struct:point 450 450) #(struct:point "
 #"0 450)) #(struct:overlay #(struct:polygon (#(struct:pulled-point 0 0"
 #" 70 150 0 0) #(struct:pulled-point 0 0 90 150 0 0) #(struct:pulled-p"
 #"oint 0 0 90 170 0 0) #(struct:pulled-point 0 0 70 170 0 0)) 255 \"re"
 #"d\") #(struct:crop (#(struct:point 0 0) #(struct:point 450 0) #(stru"
 #"ct:point 450 450) #(struct:point 0 450)) #(struct:overlay #(struct:p"
 #"olygon (#(struct:pulled-point 0 0 110 150 0 0) #(struct:pulled-point"
 #" 0 0 130 150 0 0) #(struct:pulled-point 0 0 130 170 0 0) #(struct:pu"
 #"lled-point 0 0 110 170 0 0)) 255 \"red\") #(struct:crop (#(struct:po"
 #"int 0 0) #(struct:point 450 0) #(struct:point 450 450) #(struct:poin"
 #"t 0 450)) #(struct:overlay #(struct:polygon (#(struct:pulled-point 0"
 #" 0 150 150 0 0) #(struct:pulled-point 0 0 170 150 0 0) #(struct:pull"
 #"ed-point 0 0 170 170 0 0) #(struct:pulled-point 0 0 150 170 0 0)) 25"
 #"5 \"red\") #(struct:crop (#(struct:point 0 0) #(struct:point 450 0) "
 #"#(struct:point 450 450) #(struct:point 0 450)) #(struct:overlay #(st"
 #"ruct:polygon (#(struct:pulled-point 0 0 190 150 0 0) #(struct:pulled"
 #"-point 0 0 210 150 0 0) #(struct:pulled-point 0 0 210 170 0 0) #(str"
 #"uct:pulled-point 0 0 190 170 0 0)) 255 \"red\") #(struct:crop (#(str"
 #"uct:point 0 0) #(struct:point 450 0) #(struct:point 450 450) #(struc"
 #"t:point 0 450)) #(struct:overlay #(struct:polygon (#(struct:pulled-p"
 #"oint 0 0 230 150 0 0) #(struct:pulled-point 0 0 250 150 0 0) #(struc"
 #"t:pulled-point 0 0 250 170 0 0) #(struct:pulled-point 0 0 230 170 0 "
 #"0)) 255 \"red\") #(struct:crop (#(struct:point 0 0) #(struct:point 4"
 #"50 0) #(struct:point 450 450) #(struct:point 0 450)) #(struct:overla"
 #"y #(struct:polygon (#(struct:pulled-point 0 0 270 150 0 0) #(struct:"
 #"pulled-point 0 0 290 150 0 0) #(struct:pulled-point 0 0 290 170 0 0)"
 #" #(struct:pulled-point 0 0 270 170 0 0)) 255 \"red\") #(struct:crop "
 #"(#(struct:point 0 0) #(struct:point 450 0) #(struct:point 450 450) #"
 #"(struct:point 0 450)) #(struct:overlay #(struct:polygon (#(struct:pu"
 #"lled-point 0 0 310 150 0 0) #(struct:pulled-point 0 0 330 150 0 0) #"
 #"(struct:pulled-point 0 0 330 170 0 0) #(struct:pulled-point 0 0 310 "
 #"170 0 0)) 255 \"red\") #(struct:crop (#(struct:point 0 0) #(struct:p"
 #"oint 450 0) #(struct:point 450 450) #(struct:point 0 450)) #(struct:"
 #"overlay #(struct:polygon (#(struct:pulled-point 0 0 350 150 0 0) #(s"
 #"truct:pulled-point 0 0 370 150 0 0) #(struct:pulled-point 0 0 370 17"
 #"0 0 0) #(struct:pulled-point 0 0 350 170 0 0)) 255 \"red\") #(struct"
 #":crop (#(struct:point 0 0) #(struct:point 450 0) #(struct:point 450 "
 #"450) #(struct:point 0 450)) #(struct:overlay #(struct:polygon (#(str"
 #"uct:pulled-point 0 0 390 150 0 0) #(struct:pulled-point 0 0 410 150 "
 #"0 0) #(struct:pulled-point 0 0 410 170 0 0) #(struct:pulled-point 0 "
 #"0 390 170 0 0)) 255 \"red\") #(struct:crop (#(struct:point 0 0) #(st"
 #"ruct:point 450 0) #(struct:point 450 450) #(struct:point 0 450)) #(s"
 #"truct:overlay #(struct:polygon (#(struct:pulled-point 0 0 185 412 0 "
 #"0) #(struct:pulled-point 0 0 215 412 0 0) #(struct:pulled-point 0 0 "
 #"215 428 0 0) #(struct:pulled-point 0 0 185 428 0 0)) 255 \"black\") "
 #"#(struct:crop (#(struct:point 0 0) #(struct:point 450 0) #(struct:po"
 #"int 450 450) #(struct:point 0 450)) #(struct:overlay #(struct:transl"
 #"ate 100 100 #(struct:ellipse 4 4 0 255 \"red\")) #(struct:crop (#(st"
 #"ruct:point 0 0) #(struct:point 450 0) #(struct:point 450 450) #(stru"
 #"ct:point 0 450)) #(struct:overlay #(struct:translate 150 120 #(struc"
 #"t:ellipse 4 4 0 255 \"red\")) #(struct:crop (#(struct:point 0 0) #(s"
 #"truct:point 450 0) #(struct:point 450 450) #(struct:point 0 450)) #("
 #"struct:overlay #(struct:translate 180 110 #(struct:ellipse 4 4 0 255"
 #" \"red\")) #(struct:crop (#(struct:point 0 0) #(struct:point 450 0) "
 #"#(struct:point 450 450) #(struct:point 0 450)) #(struct:overlay #(st"
 #"ruct:translate 300 200 #(struct:ellipse 4 4 0 255 \"black\")) #(stru"
 #"ct:crop (#(struct:point 0 0) #(struct:point 450 0) #(struct:point 45"
 #"0 450) #(struct:point 0 450)) #(struct:overlay #(struct:translate 25"
 #"0 170 #(struct:ellipse 4 4 0 255 \"black\")) #(struct:crop (#(struct"
 #":point 0 0) #(struct:point 450 0) #(struct:point 450 450) #(struct:p"
 #"oint 0 450)) #(struct:overlay #(struct:translate 270 180 #(struct:el"
 #"lipse 4 4 0 255 \"black\")) #(struct:crop (#(struct:point 0 0) #(str"
 #"uct:point 450 0) #(struct:point 450 450) #(struct:point 0 450)) #(st"
 #"ruct:overlay #(struct:overlay #(struct:overlay #(struct:overlay #(st"
 #"ruct:overlay #(struct:overlay #(struct:overlay #(struct:overlay #(st"
 #"ruct:overlay #(struct:overlay #(struct:overlay #(struct:overlay #(st"
 #"ruct:overlay #(struct:translate 1"
 #"71.5 12.0 #(struct:text \"T\" 0 1 \"black\" 20 #f swiss normal norma"
 #"l #f)) #(struct:translate 183.0 12.0 #(struct:text \"o\" 0 1 \"black"
 #"\" 20 #f swiss normal normal #f))) #(struct:translate 191.5 12.0 #(s"
 #"truct:text \"t\" 0 1 \"black\" 20 #f swiss normal normal #f))) #(str"
 #"uct:translate 200.0 12.0 #(struct:text \"a\" 0 1 \"black\" 20 #f swi"
 #"ss normal normal #f))) #(struct:tr"
 #"anslate 207.5 12.0 #(struct:text \"l\" 0 1 \"black\" 20 #f swiss nor"
 #"mal normal #f))) #(struct:translate 212.5 12.0 #(struct:text \" \" 0"
 #" 1 \"black\" 20 #f swiss normal normal #f))) #(struct:translate 222."
 #"0 12.0 #(struct:text \"S\" 0 1 \"black\" 20 #f swiss normal normal #"
 #"f))) #(struct:translate 233.5 12.0 #(struct:text \"c\" 0 1 \"black\""
 #" 20 #f swiss normal normal #f))) #(struct:translate 244.0 12.0 #(str"
 #"uct:text \"o\" 0 1 \"black\" 20 #f swiss normal normal #f))) #(struc"
 #"t:translate 253.0 12.0 #(struct:text \"r\" 0 1 \"black\" 20 #f swiss"
 #" normal normal #f))) #(struct:translate 262.0 12.0 #(struct:text \"e"
 #"\" 0 1 \"black\" 20 #f swiss normal normal #f))) #(struct:translate "
 #"270.5 12.0 #(struct:text \":\" 0 1 \"black\" 20 #f swiss normal norm"
 #"al #f))) #(struct:translate 279.0 12.0 #(struct:text \"5\" 0 1 \"bla"
 #"ck\" 20 #f swiss normal normal #f))) #(struct:crop (#(struct:point 0"
 #" 0) #(struct:point 450 0) #(struct:point 450 450) #(struct:point 0 4"
 #"50)) #(struct:overlay #(struct:overlay #(struct:overlay #(struct:ove"
 #"rlay #(struct:overlay #(struct:overlay #(struct:overlay #(struct:ove"
 #"rlay #(struct:overlay #(struct:overlay #(struct:overlay #(struct:ove"
 #"rlay #(struct:overlay #(struct:overlay #(struct:overlay #(struct:ove"
 #"rlay #(struct:overlay #(struct:overlay #(struct:translate 312.0 440."
 #"0 #(struct:text \"N\" 0 1 \"black\" 16 #f swiss normal normal #f)) #"
 #"(struct:translate 322.5 440.0 #(struct:text \"u\" 0 1 \"black\" 16 #"
 #"f swiss normal normal #f))) #(struct:translate 333.5 440.0 #(struct:"
 #"text \"m\" 0 1 \"black\" 16 #f swiss normal normal #f))) #(struct:tr"
 #"anslate 344.5 440.0 #(struct:text \"b\" 0 1 \"black\" 16 #f swiss no"
 #"rmal normal #f))) #(struct:translate 353.5 440.0 #(struct:text \"e\""
 #" 0 1 \"black\" 16 #f swiss normal normal #f))) #(struct:translate 36"
 #"0.5 440.0 #(struct:text \"r\" 0 1 \"black\" 16 #f swiss normal norma"
 #"l #f))) #(struct:translate 365.0 440.0 #(struct:text \" \" 0 1 \"bla"
 #"ck\" 16 #f swiss normal normal #f))) #(struct:translate 371.5 440.0 "
 #"#(struct:text \"o\" 0 1 \"black\" 16 #f swiss normal normal #f))) #("
 #"struct:translate 378.0 440.0 #(struct:text \"f\" 0 1 \"black\" 16 #f"
 #" swiss normal normal #f))) #(struct:translate 382.0 440.0 #(struct:t"
 #"ext \" \" 0 1 \"black\" 16 #f swiss normal normal #f))) #(struct:tra"
 #"nslate 386.0 440.0 #(struct:text \"l\" 0 1 \"black\" 16 #f swiss nor"
 #"mal normal #f))) #(struct:translate 390.0 440.0 #(struct:text \"i\" "
 #"0 1 \"black\" 16 #f swiss normal normal #f))) #(struct:translate 396"
 #".0 440.0 #(struct:text \"v\" 0 1 \"black\" 16 #f swiss normal normal"
 #" #f))) #(struct:translate 404.5 440.0 #(struct:text \"e\" 0 1 \"blac"
 #"k\" 16 #f swiss normal normal #f))) #(struct:translate 413.0 440.0 #"
 #"(struct:text \"s\" 0 1 \"black\" 16 #f swiss normal normal #f))) #(s"
 #"truct:translate 419.0 440.0 #(struct:text \":\" 0 1 \"black\" 16 #f "
 #"swiss normal normal #f))) #(struct:translate 423.0 440.0 #(struct:te"
 #"xt \" \" 0 1 \"black\" 16 #f swiss normal normal #f))) #(struct:tran"
 #"slate 429.5 440.0 #(struct:text \"3\" 0 1 \"black\" 16 #f swiss norm"
 #"al normal #f))) #(struct:crop (#(struct:point 0 0) #(struct:point 45"
 #"0 0) #(struct:point 450 450) #(struct:point 0 450)) #(struct:overlay"
 #" #(struct:polygon (#(struct:pulled-point 0 0 0 0 0 0) #(struct:pulle"
 #"d-point 0 0 450 0 0 0) #(struct:pulled-point 0 0 450 450 0 0) #(stru"
 #"ct:pulled-point 0 0 0 450 0 0)) outline #(struct:pen \"black\" 2 sol"
 #"id round round)) #(struct:polygon (#(struct:pulled-point 0 0 0 0 0 0"
 #") #(struct:pulled-point 0 0 450 0 0 0) #(struct:pulled-point 0 0 450"
 #" 450 0 0) #(struct:pulled-point 0 0 0 450 0 0)) 255 \"white\")))))))"
 #"))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))"
 #")))))))))))))))))))))))))) #(struct:bb 450 450 450.0) #f)"
) 0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 14 #";;;; Signature"
0 0 24 29 1 #"\n"
0 0 17 3 47 #";; allinvader-hit: AllInvader ASB -> AllInvader"
0 0 24 29 1 #"\n"
0 0 17 3 12 #";;;; Purpose"
0 0 24 29 1 #"\n"
0 0 17 3 52 #";; GIVEN: all invaders and all the spaceship bullets"
0 0 24 29 1 #"\n"
0 0 17 3 69
(
 #";; RETURN: updated all invaders with those hit by the bullets delete"
 #"d"
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 12 #";;;; Example"
0 0 24 29 1 #"\n"
0 0 17 3 36 #";; (allinvader-hit All empty) => All"
0 0 24 29 1 #"\n"
0 0 17 3 34 #";; (allinvader-hit invader-example"
0 0 24 29 1 #"\n"
0 0 17 3 59
#";;       (list (make-posn 240 110) (make-posn 360 115))) =>"
0 0 24 29 1 #"\n"
0 0 17 3 66
#";; (list (make-posn 40 110) (make-posn 80 110) (make-posn 120 110)"
0 0 24 29 1 #"\n"
0 0 17 3 68
#";;       (make-posn 160 110) (make-posn 200 110) (make-posn 280 110)"
0 0 24 29 1 #"\n"
0 0 17 3 29 #";;       (make-posn 320 110))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 24 #";;;; Function Definition"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 14 #"allinvader-hit"
0 0 24 3 1 #" "
0 0 14 3 10 #"allinvader"
0 0 24 3 1 #" "
0 0 14 3 3 #"asb"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 6 #"filter"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 7 #"invader"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 14 3 3 #"not"
0 0 24 3 2 #" ("
0 0 14 3 19 #"invader-hit-by-asb?"
0 0 24 3 1 #" "
0 0 14 3 7 #"invader"
0 0 24 3 1 #" "
0 0 14 3 3 #"asb"
0 0 24 3 4 #"))) "
0 0 14 3 10 #"allinvader"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 10 #";;;; Tests"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 14 #"allinvader-hit"
0 0 24 3 1 #" "
0 0 14 3 3 #"All"
0 0 24 3 1 #" "
0 0 14 3 5 #"empty"
0 0 24 3 3 #")  "
0 0 14 3 3 #"All"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 14 #"allinvader-hit"
0 0 24 3 1 #" "
0 0 14 3 15 #"invader-example"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 21 3 3 #"240"
0 0 24 3 1 #" "
0 0 21 3 3 #"110"
0 0 24 3 3 #") ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 21 3 3 #"360"
0 0 24 3 1 #" "
0 0 21 3 3 #"115"
0 0 24 3 4 #"))) "
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 21 3 2 #"40"
0 0 24 3 1 #" "
0 0 21 3 3 #"110"
0 0 24 3 3 #") ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 21 3 2 #"80"
0 0 24 3 1 #" "
0 0 21 3 3 #"110"
0 0 24 3 3 #") ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 21 3 3 #"120"
0 0 24 3 1 #" "
0 0 21 3 3 #"110"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 21 3 3 #"160"
0 0 24 3 1 #" "
0 0 21 3 3 #"110"
0 0 24 3 3 #") ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 21 3 3 #"200"
0 0 24 3 1 #" "
0 0 21 3 3 #"110"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 21 3 3 #"280"
0 0 24 3 1 #" "
0 0 21 3 3 #"110"
0 0 24 3 3 #") ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 21 3 3 #"320"
0 0 24 3 1 #" "
0 0 21 3 3 #"110"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 14 #";;;; Signature"
0 0 24 29 1 #"\n"
0 0 17 3 30 #";; invader-hit: World -> World"
0 0 24 29 1 #"\n"
0 0 17 3 12 #";;;; Purpose"
0 0 24 29 1 #"\n"
0 0 17 3 17 #";; GIVEN: a world"
0 0 24 29 1 #"\n"
0 0 17 3 69
(
 #";; RETURN: the updated world, delete the invaders that are hit by th"
 #"e"
) 0 0 24 29 1 #"\n"
0 0 17 3 74
(
 #";;         s-bullets and also delete the s-bullets which hit the inv"
 #"aders,"
) 0 0 24 29 1 #"\n"
0 0 17 3 54 #";;         add 5 to score for each invader that is hit"
0 0 24 29 1 #"\n"
0 0 17 3 24 #";;;; Function Definition"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 11 #"invader-hit"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 10 #"make-world"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 14 3 11 #"world-mship"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 14 3 14 #"allinvader-hit"
0 0 24 3 2 #" ("
0 0 14 3 16 #"world-allinvader"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 3 #") ("
0 0 14 3 9 #"world-asb"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 14 3 15 #"world-spaceship"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 14 3 9 #"world-aib"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 14 3 16 #"s-bullet-hit-all"
0 0 24 3 2 #" ("
0 0 14 3 9 #"world-asb"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 3 #") ("
0 0 14 3 16 #"world-allinvader"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 14 3 1 #"+"
0 0 24 3 2 #" ("
0 0 14 3 11 #"world-score"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 3 #") ("
0 0 14 3 1 #"*"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 2 #" ("
0 0 14 3 1 #"-"
0 0 24 3 2 #" ("
0 0 14 3 10 #"lof-length"
0 0 24 3 2 #" ("
0 0 14 3 16 #"world-allinvader"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 14 3 10 #"lof-length"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"       ("
0 0 14 3 14 #"allinvader-hit"
0 0 24 3 2 #" ("
0 0 14 3 16 #"world-allinvader"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 3 #") ("
0 0 14 3 9 #"world-asb"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 6 #"))))))"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 14 3 9 #"world-nol"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 14 3 10 #"world-time"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 14 #";;;; Signature"
0 0 24 29 1 #"\n"
0 0 17 3 38 #";; i-bullet-move: I-Bullet -> I-Bullet"
0 0 24 29 1 #"\n"
0 0 17 3 12 #";;;; Purpose"
0 0 24 29 1 #"\n"
0 0 17 3 24 #";; GIVEN: invader bullet"
0 0 24 29 1 #"\n"
0 0 17 3 61
#";; RETURN: the updated invader bullet that moves down by 10px"
0 0 24 29 1 #"\n"
0 0 17 3 12 #";;;; Example"
0 0 24 29 1 #"\n"
0 0 17 3 61
#";; (i-bullet-move (make-posn 100 100)) => (make-posn 100 110)"
0 0 24 29 1 #"\n"
0 0 17 3 24 #";;;; Function Definition"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 13 #"i-bullet-move"
0 0 24 3 1 #" "
0 0 14 3 8 #"i-bullet"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 9 #"make-posn"
0 0 24 3 2 #" ("
0 0 14 3 6 #"posn-x"
0 0 24 3 1 #" "
0 0 14 3 8 #"i-bullet"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"             ("
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 21 3 2 #"10"
0 0 24 3 2 #" ("
0 0 14 3 6 #"posn-y"
0 0 24 3 1 #" "
0 0 14 3 8 #"i-bullet"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 17 3 9 #";;;; Test"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 13 #"i-bullet-move"
0 0 24 3 2 #" ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 21 3 3 #"100"
0 0 24 3 1 #" "
0 0 21 3 3 #"100"
0 0 24 3 4 #")) ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 21 3 3 #"100"
0 0 24 3 1 #" "
0 0 21 3 3 #"110"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 14 #";;;; Signature"
0 0 24 29 1 #"\n"
0 0 17 3 38 #";; s-bullet-move: S-Bullet -> S-Bullet"
0 0 24 29 1 #"\n"
0 0 17 3 12 #";;;; Purpose"
0 0 24 29 1 #"\n"
0 0 17 3 26 #";; GIVEN: spaceship bullet"
0 0 24 29 1 #"\n"
0 0 17 3 61
#";; RETURN: the updated spaceship bullet that moves up by 10px"
0 0 24 29 1 #"\n"
0 0 17 3 12 #";;;; Example"
0 0 24 29 1 #"\n"
0 0 17 3 60
#";; (s-bullet-move (make-posn 100 100)) => (make-posn 100 90)"
0 0 24 29 1 #"\n"
0 0 17 3 24 #";;;; Function Definition"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 13 #"s-bullet-move"
0 0 24 3 1 #" "
0 0 14 3 8 #"s-bullet"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 9 #"make-posn"
0 0 24 3 2 #" ("
0 0 14 3 6 #"posn-x"
0 0 24 3 1 #" "
0 0 14 3 8 #"s-bullet"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"             ("
0 0 14 3 1 #"-"
0 0 24 3 2 #" ("
0 0 14 3 6 #"posn-y"
0 0 24 3 1 #" "
0 0 14 3 8 #"s-bullet"
0 0 24 3 2 #") "
0 0 21 3 2 #"10"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 17 3 9 #";;;; Test"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 13 #"s-bullet-move"
0 0 24 3 2 #" ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 21 3 3 #"100"
0 0 24 3 1 #" "
0 0 21 3 3 #"100"
0 0 24 3 4 #")) ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 21 3 3 #"100"
0 0 24 3 1 #" "
0 0 21 3 2 #"90"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 14 #";;;; Signature"
0 0 24 29 1 #"\n"
0 0 17 3 32 #";; aib-hit: AIB Spaceship -> AIB"
0 0 24 29 1 #"\n"
0 0 17 3 12 #";;;; Purpose"
0 0 24 29 1 #"\n"
0 0 17 3 53 #";; GIVEN: a list of invader bullets and the spaceship"
0 0 24 29 1 #"\n"
0 0 17 3 62
#";; RETURN: the updated list of invader bullets with the bullet"
0 0 24 29 1 #"\n"
0 0 17 3 41 #";;         that hit the spaceship deleted"
0 0 24 29 1 #"\n"
0 0 17 3 13 #";;;; Examples"
0 0 24 29 1 #"\n"
0 0 17 3 58
#";; (aib-hit (list (make-posn 100 100) (make-posn 200 200))"
0 0 24 29 1 #"\n"
0 0 17 3 33 #";;           (make-posn 300 400))"
0 0 24 29 1 #"\n"
0 0 17 3 56 #";;     => (list (make-posn 100 010) (make-posn 200 200))"
0 0 24 29 1 #"\n"
0 0 17 3 47 #";; (aib-hit empty (make-posn 300 300)) => empty"
0 0 24 29 1 #"\n"
0 0 17 3 57 #";; (aib-hit (list (make-posn 200 440) (make-posn 200 420)"
0 0 24 29 1 #"\n"
0 0 17 3 54 #";;           (make-posn 200 200)) (make-posn 200 420))"
0 0 24 29 1 #"\n"
0 0 17 3 56 #";;     => (list (make-posn 200 440) (make-posn 200 200))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 24 #";;;; Function Definition"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 7 #"aib-hit"
0 0 24 3 1 #" "
0 0 14 3 3 #"aib"
0 0 24 3 1 #" "
0 0 14 3 9 #"spaceship"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 6 #"filter"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 8 #"i-bullet"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 14 3 3 #"not"
0 0 24 3 2 #" ("
0 0 14 3 25 #"spaceship-hit-by-ibullet?"
0 0 24 3 1 #" "
0 0 14 3 9 #"spaceship"
0 0 24 3 1 #" "
0 0 14 3 8 #"i-bullet"
0 0 24 3 4 #"))) "
0 0 14 3 3 #"aib"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 10 #";;;; Tests"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 7 #"aib-hit"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 21 3 3 #"100"
0 0 24 3 1 #" "
0 0 21 3 3 #"100"
0 0 24 3 3 #") ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 21 3 3 #"200"
0 0 24 3 1 #" "
0 0 21 3 3 #"200"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 21 3 3 #"300"
0 0 24 3 1 #" "
0 0 21 3 3 #"400"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 21 3 3 #"100"
0 0 24 3 1 #" "
0 0 21 3 3 #"100"
0 0 24 3 3 #") ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 21 3 3 #"200"
0 0 24 3 1 #" "
0 0 21 3 3 #"200"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 7 #"aib-hit"
0 0 24 3 1 #" "
0 0 14 3 5 #"empty"
0 0 24 3 2 #" ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 21 3 3 #"300"
0 0 24 3 1 #" "
0 0 21 3 3 #"300"
0 0 24 3 3 #")) "
0 0 14 3 5 #"empty"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 7 #"aib-hit"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 21 3 3 #"200"
0 0 24 3 1 #" "
0 0 21 3 3 #"440"
0 0 24 3 3 #") ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 21 3 3 #"200"
0 0 24 3 1 #" "
0 0 21 3 3 #"420"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 21 3 3 #"200"
0 0 24 3 1 #" "
0 0 21 3 3 #"200"
0 0 24 3 4 #")) ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 21 3 3 #"200"
0 0 24 3 1 #" "
0 0 21 3 3 #"420"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 21 3 3 #"200"
0 0 24 3 1 #" "
0 0 21 3 3 #"440"
0 0 24 3 3 #") ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 21 3 3 #"200"
0 0 24 3 1 #" "
0 0 21 3 3 #"200"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 14 #";;;; Signature"
0 0 24 29 1 #"\n"
0 0 17 3 23 #";; aib-move: AIB -> AIB"
0 0 24 29 1 #"\n"
0 0 17 3 12 #";;;; Purpose"
0 0 24 29 1 #"\n"
0 0 17 3 35 #";; GIVEN: a list of invader bullets"
0 0 24 29 1 #"\n"
0 0 17 3 63
#";; RETURN: the updated list of invader bullets that each bullet"
0 0 24 29 1 #"\n"
0 0 17 3 60
#";;         moves down by 10px, if the bullet hit the bottom,"
0 0 24 29 1 #"\n"
0 0 17 3 20 #";;         delete it"
0 0 24 29 1 #"\n"
0 0 17 3 13 #";;;; Examples"
0 0 24 29 1 #"\n"
0 0 17 3 60
#";; (aib-move (list (make-posn 100 100) (make-posn 200 200)))"
0 0 24 29 1 #"\n"
0 0 17 3 56 #";;     => (list (make-posn 100 110) (make-posn 200 210))"
0 0 24 29 1 #"\n"
0 0 17 3 28 #";; (aib-move empty) => empty"
0 0 24 29 1 #"\n"
0 0 17 3 58
#";; (aib-move (list (make-posn 200 449) (make-posn 200 420)"
0 0 24 29 1 #"\n"
0 0 17 3 34 #";;           (make-posn 200 200)))"
0 0 24 29 1 #"\n"
0 0 17 3 56 #";;     => (list (make-posn 200 430) (make-posn 200 210))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 24 #";;;; Function Definition"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 8 #"aib-move"
0 0 24 3 1 #" "
0 0 14 3 3 #"aib"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 3 #"map"
0 0 24 3 1 #" "
0 0 14 3 13 #"i-bullet-move"
0 0 24 3 2 #" ("
0 0 14 3 6 #"filter"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 8 #"i-bullet"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 14 3 3 #"not"
0 0 24 3 2 #" ("
0 0 14 3 1 #">"
0 0 24 3 2 #" ("
0 0 14 3 6 #"posn-y"
0 0 24 3 1 #" "
0 0 14 3 8 #"i-bullet"
0 0 24 3 3 #") ("
0 0 14 3 1 #"-"
0 0 24 3 1 #" "
0 0 14 3 6 #"HEIGHT"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 5 #")))) "
0 0 14 3 3 #"aib"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 10 #";;;; Tests"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 8 #"aib-move"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 21 3 3 #"100"
0 0 24 3 1 #" "
0 0 21 3 3 #"100"
0 0 24 3 3 #") ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 21 3 3 #"200"
0 0 24 3 1 #" "
0 0 21 3 3 #"200"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 21 3 3 #"100"
0 0 24 3 1 #" "
0 0 21 3 3 #"110"
0 0 24 3 3 #") ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 21 3 3 #"200"
0 0 24 3 1 #" "
0 0 21 3 3 #"210"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 8 #"aib-move"
0 0 24 3 1 #" "
0 0 14 3 5 #"empty"
0 0 24 3 2 #") "
0 0 14 3 5 #"empty"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 8 #"aib-move"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 21 3 3 #"200"
0 0 24 3 1 #" "
0 0 21 3 3 #"449"
0 0 24 3 3 #") ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 21 3 3 #"200"
0 0 24 3 1 #" "
0 0 21 3 3 #"420"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 21 3 3 #"200"
0 0 24 3 1 #" "
0 0 21 3 3 #"200"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 21 3 3 #"200"
0 0 24 3 1 #" "
0 0 21 3 3 #"430"
0 0 24 3 2 #")("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 21 3 3 #"200"
0 0 24 3 1 #" "
0 0 21 3 3 #"210"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 14 #";;;; Signature"
0 0 24 29 1 #"\n"
0 0 17 3 23 #";; asb-move: ASB -> ASB"
0 0 24 29 1 #"\n"
0 0 17 3 12 #";;;; Purpose"
0 0 24 29 1 #"\n"
0 0 17 3 37 #";; GIVEN: a list of spaceship bullets"
0 0 24 29 1 #"\n"
0 0 17 3 65
#";; RETURN: the updated list of spaceship bullets that each bullet"
0 0 24 29 1 #"\n"
0 0 17 3 73
(
 #";;         moves up by 10px, if the bullets hit the top before this "
 #"move,"
) 0 0 24 29 1 #"\n"
0 0 17 3 20 #";;         delete it"
0 0 24 29 1 #"\n"
0 0 17 3 12 #";;;; Example"
0 0 24 29 1 #"\n"
0 0 17 3 60
#";; (asb-move (list (make-posn 100 100) (make-posn 200 200)))"
0 0 24 29 1 #"\n"
0 0 17 3 55 #";;     => (list (make-posn 100 90) (make-posn 200 190))"
0 0 24 29 1 #"\n"
0 0 17 3 28 #";; (asb-move empty) => empty"
0 0 24 29 1 #"\n"
0 0 17 3 78
(
 #";; (asb-move (list (make-posn 100 100) (make-posn 200 1) (make-posn "
 #"200 200)))"
) 0 0 24 29 1 #"\n"
0 0 17 3 54 #";;     => (list (make-posn 100 90) (make-posn 200 190)"
0 0 24 29 1 #"\n"
0 0 17 3 24 #";;;; Function Definition"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 8 #"asb-move"
0 0 24 3 1 #" "
0 0 14 3 3 #"asb"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 3 #"map"
0 0 24 3 1 #" "
0 0 14 3 13 #"s-bullet-move"
0 0 24 3 2 #" ("
0 0 14 3 6 #"filter"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 8 #"s-bullet"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 14 3 3 #"not"
0 0 24 3 2 #" ("
0 0 14 3 1 #"<"
0 0 24 3 2 #" ("
0 0 14 3 6 #"posn-y"
0 0 24 3 1 #" "
0 0 14 3 8 #"s-bullet"
0 0 24 3 2 #") "
0 0 21 3 1 #"2"
0 0 24 3 4 #"))) "
0 0 14 3 3 #"asb"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 17 3 10 #";;;; Tests"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 8 #"asb-move"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 21 3 3 #"100"
0 0 24 3 1 #" "
0 0 21 3 3 #"100"
0 0 24 3 3 #") ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 21 3 3 #"200"
0 0 24 3 1 #" "
0 0 21 3 3 #"200"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 21 3 3 #"100"
0 0 24 3 1 #" "
0 0 21 3 2 #"90"
0 0 24 3 3 #") ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 21 3 3 #"200"
0 0 24 3 1 #" "
0 0 21 3 3 #"190"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 8 #"asb-move"
0 0 24 3 1 #" "
0 0 14 3 5 #"empty"
0 0 24 3 2 #") "
0 0 14 3 5 #"empty"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 14 3 8 #"asb-move"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 21 3 3 #"100"
0 0 24 3 1 #" "
0 0 21 3 3 #"100"
0 0 24 3 3 #") ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 21 3 3 #"200"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 3 #") ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 21 3 3 #"200"
0 0 24 3 1 #" "
0 0 21 3 3 #"200"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 21 3 3 #"100"
0 0 24 3 1 #" "
0 0 21 3 2 #"90"
0 0 24 3 3 #") ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 21 3 3 #"200"
0 0 24 3 1 #" "
0 0 21 3 3 #"190"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 14 #";;;; Signature"
0 0 24 29 1 #"\n"
0 0 17 3 51 #";; allinvader-fire: AllInvader NonNegInt AIB -> AIB"
0 0 24 29 1 #"\n"
0 0 17 3 12 #";;;; Purpose"
0 0 24 29 1 #"\n"
0 0 17 3 48 #";; GIVEN: all invaders, the index of the invader"
0 0 24 29 1 #"\n"
0 0 17 3 51 #";;        that will fire, a list of invader bullets"
0 0 24 29 1 #"\n"
0 0 17 3 78
(
 #";; RETURN: the updated list of invader bullets with the new bullet a"
 #"dded in it"
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 13 #";;;; Examples"
0 0 24 29 1 #"\n"
0 0 17 3 73
(
 #";; (allinvader-fire invader-example 1 empty) => (list (make-posn 40 "
 #"120))"
) 0 0 24 29 1 #"\n"
0 0 17 3 73
(
 #";; (allinvader-fire invader-example 2 empty) => (list (make-posn 80 "
 #"120))"
) 0 0 24 29 1 #"\n"
0 0 17 3 53 #";; (allinvader-fire invader-example 4 aib-example) =>"
0 0 24 29 1 #"\n"
0 0 17 3 52 #";;            (cons (make-posn 160 120) aib-example)"
0 0 24 29 1 #"\n"
0 0 17 3 24 #";;;; Function Definition"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 15 #"allinvader-fire"
0 0 24 3 1 #" "
0 0 14 3 3 #"all"
0 0 24 3 1 #" "
0 0 14 3 5 #"index"
0 0 24 3 1 #" "
0 0 14 3 3 #"aib"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [("
0 0 14 3 1 #"="
0 0 24 3 1 #" "
0 0 14 3 5 #"index"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 3 #") ("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 9 #"make-posn"
0 0 24 3 2 #" ("
0 0 14 3 6 #"posn-x"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 3 #"all"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 33 #"                                ("
0 0 14 3 1 #"+"
0 0 24 3 2 #" ("
0 0 14 3 6 #"posn-y"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 3 #"all"
0 0 24 3 3 #")) "
0 0 21 3 2 #"10"
0 0 24 3 3 #")) "
0 0 14 3 3 #"aib"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [("
0 0 14 3 1 #">"
0 0 24 3 1 #" "
0 0 14 3 5 #"index"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 3 #") ("
0 0 14 3 15 #"allinvader-fire"
0 0 24 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 24 3 1 #" "
0 0 14 3 3 #"all"
0 0 24 3 3 #") ("
0 0 14 3 1 #"-"
0 0 24 3 1 #" "
0 0 14 3 5 #"index"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 2 #") "
0 0 14 3 3 #"aib"
0 0 24 3 4 #")]))"
0 0 24 29 1 #"\n"
0 0 17 3 10 #";;;; Tests"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 29 1 #"\n"
0 0 24 3 2 #" ("
0 0 14 3 15 #"allinvader-fire"
0 0 24 3 1 #" "
0 0 14 3 15 #"invader-example"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 14 3 5 #"empty"
0 0 24 3 3 #") ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 21 3 2 #"40"
0 0 24 3 1 #" "
0 0 21 3 3 #"120"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 29 1 #"\n"
0 0 24 3 2 #" ("
0 0 14 3 15 #"allinvader-fire"
0 0 24 3 1 #" "
0 0 14 3 15 #"invader-example"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 1 #" "
0 0 14 3 5 #"empty"
0 0 24 3 3 #") ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 21 3 2 #"80"
0 0 24 3 1 #" "
0 0 21 3 3 #"120"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 15 #"allinvader-fire"
0 0 24 3 1 #" "
0 0 14 3 15 #"invader-example"
0 0 24 3 1 #" "
0 0 21 3 1 #"4"
0 0 24 3 1 #" "
0 0 14 3 11 #"aib-example"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 21 3 3 #"160"
0 0 24 3 1 #" "
0 0 21 3 3 #"120"
0 0 24 3 2 #") "
0 0 14 3 11 #"aib-example"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 14 #";;;; Signature"
0 0 24 29 1 #"\n"
0 0 17 3 48 #";; allinvader-fire-random: AllInvader AIB -> AIB"
0 0 24 29 1 #"\n"
0 0 17 3 12 #";;;; Purpose"
0 0 24 29 1 #"\n"
0 0 17 3 52 #";; GIVEN: all invaders and a list of invader bullets"
0 0 24 29 1 #"\n"
0 0 17 3 72
(
 #";; RETURN: the updated list of invader bullets with the new bullet(f"
 #"ired"
) 0 0 24 29 1 #"\n"
0 0 17 3 47 #";;         by the random invader) added into it"
0 0 24 29 1 #"\n"
0 0 17 3 24 #";;;; Funciton Definition"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 22 #"allinvader-fire-random"
0 0 24 3 1 #" "
0 0 14 3 3 #"all"
0 0 24 3 1 #" "
0 0 14 3 3 #"aib"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 15 #"allinvader-fire"
0 0 24 3 1 #" "
0 0 14 3 3 #"all"
0 0 24 3 2 #" ("
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 2 #" ("
0 0 14 3 6 #"random"
0 0 24 3 2 #" ("
0 0 14 3 10 #"lof-length"
0 0 24 3 1 #" "
0 0 14 3 3 #"all"
0 0 24 3 4 #"))) "
0 0 14 3 3 #"aib"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 14 #";;;; Signature"
0 0 24 29 1 #"\n"
0 0 17 3 33 #";; aib-add: AIB AllInvader -> AIB"
0 0 24 29 1 #"\n"
0 0 17 3 12 #";;;; Purpose"
0 0 24 29 1 #"\n"
0 0 17 3 52 #";; GIVEN: a list of invader bullets and all invaders"
0 0 24 29 1 #"\n"
0 0 17 3 75
(
 #";; RETURN: if the current number of bullets in the list is smaller t"
 #"han 10,"
) 0 0 24 29 1 #"\n"
0 0 17 3 74
(
 #";;         generate one more bullets randomly from one of the invade"
 #"rs and"
) 0 0 24 29 1 #"\n"
0 0 17 3 64
#";;         add it to the list, otherwise, do not change anything"
0 0 24 29 1 #"\n"
0 0 17 3 12 #";;;; Example"
0 0 24 29 1 #"\n"
0 0 17 3 77
(
 #";; (aib-add (list (make-posn 100 100) (make-posn 110 110) (make-posn"
 #" 120 120)"
) 0 0 24 29 1 #"\n"
0 0 17 3 72
(
 #";;           (make-posn 130 130) (make-posn 140 140) (make-posn 150 "
 #"150)"
) 0 0 24 29 1 #"\n"
0 0 17 3 72
(
 #";;           (make-posn 160 160) (make-posn 170 170) (make-posn 180 "
 #"180)"
) 0 0 24 29 1 #"\n"
0 0 17 3 38 #";;           (make-posn 190 190)) All)"
0 0 24 29 1 #"\n"
0 0 17 3 78
(
 #";; =>        (list (make-posn 100 100) (make-posn 110 110) (make-pos"
 #"n 120 120)"
) 0 0 24 29 1 #"\n"
0 0 17 3 72
(
 #";;           (make-posn 130 130) (make-posn 140 140) (make-posn 150 "
 #"150)"
) 0 0 24 29 1 #"\n"
0 0 17 3 72
(
 #";;           (make-posn 160 160) (make-posn 170 170) (make-posn 180 "
 #"180)"
) 0 0 24 29 1 #"\n"
0 0 17 3 32 #";;           (make-posn 190 190)"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 24 #";;;; Function Definition"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 7 #"aib-add"
0 0 24 3 1 #" "
0 0 14 3 3 #"aib"
0 0 24 3 1 #" "
0 0 14 3 11 #"allinvaders"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [("
0 0 14 3 1 #"<"
0 0 24 3 2 #" ("
0 0 14 3 10 #"lof-length"
0 0 24 3 1 #" "
0 0 14 3 3 #"aib"
0 0 24 3 2 #") "
0 0 21 3 2 #"10"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 14 3 22 #"allinvader-fire-random"
0 0 24 3 1 #" "
0 0 14 3 11 #"allinvaders"
0 0 24 3 1 #" "
0 0 14 3 3 #"aib"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ["
0 0 14 3 4 #"else"
0 0 24 3 1 #" "
0 0 14 3 3 #"aib"
0 0 24 3 3 #"]))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 10 #";;;; Tests"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 7 #"aib-add"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 21 3 3 #"100"
0 0 24 3 1 #" "
0 0 21 3 3 #"100"
0 0 24 3 3 #") ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 21 3 3 #"110"
0 0 24 3 1 #" "
0 0 21 3 3 #"110"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"             ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 21 3 3 #"120"
0 0 24 3 1 #" "
0 0 21 3 3 #"120"
0 0 24 3 3 #") ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 21 3 3 #"130"
0 0 24 3 1 #" "
0 0 21 3 3 #"130"
0 0 24 3 3 #") ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 21 3 3 #"140"
0 0 24 3 1 #" "
0 0 21 3 3 #"140"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"             ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 21 3 3 #"150"
0 0 24 3 1 #" "
0 0 21 3 3 #"150"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"             ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 21 3 3 #"160"
0 0 24 3 1 #" "
0 0 21 3 3 #"160"
0 0 24 3 3 #") ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 21 3 3 #"170"
0 0 24 3 1 #" "
0 0 21 3 3 #"170"
0 0 24 3 3 #") ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 21 3 3 #"180"
0 0 24 3 1 #" "
0 0 21 3 3 #"180"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 21 3 3 #"190"
0 0 24 3 1 #" "
0 0 21 3 3 #"190"
0 0 24 3 3 #")) "
0 0 14 3 3 #"All"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"             ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 21 3 3 #"100"
0 0 24 3 1 #" "
0 0 21 3 3 #"100"
0 0 24 3 3 #") ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 21 3 3 #"110"
0 0 24 3 1 #" "
0 0 21 3 3 #"110"
0 0 24 3 3 #") ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 21 3 3 #"120"
0 0 24 3 1 #" "
0 0 21 3 3 #"120"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"             ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 21 3 3 #"130"
0 0 24 3 1 #" "
0 0 21 3 3 #"130"
0 0 24 3 3 #") ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 21 3 3 #"140"
0 0 24 3 1 #" "
0 0 21 3 3 #"140"
0 0 24 3 3 #") ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 21 3 3 #"150"
0 0 24 3 1 #" "
0 0 21 3 3 #"150"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"             ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 21 3 3 #"160"
0 0 24 3 1 #" "
0 0 21 3 3 #"160"
0 0 24 3 3 #") ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 21 3 3 #"170"
0 0 24 3 1 #" "
0 0 21 3 3 #"170"
0 0 24 3 3 #") ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 21 3 3 #"180"
0 0 24 3 1 #" "
0 0 21 3 3 #"180"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"             ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 21 3 3 #"190"
0 0 24 3 1 #" "
0 0 21 3 3 #"190"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-random"
0 0 24 3 2 #" ("
0 0 14 3 7 #"aib-add"
0 0 24 3 1 #" "
0 0 14 3 5 #"empty"
0 0 24 3 1 #" "
0 0 14 3 3 #"All"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 22 #"allinvader-fire-random"
0 0 24 3 1 #" "
0 0 14 3 3 #"All"
0 0 24 3 1 #" "
0 0 14 3 5 #"empty"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 14 #";;;; Signature"
0 0 24 29 1 #"\n"
0 0 17 3 35 #";; invader-move: Invader -> Invader"
0 0 24 29 1 #"\n"
0 0 17 3 12 #";;;; Purpose"
0 0 24 29 1 #"\n"
0 0 17 3 20 #";; GIVEN: an invader"
0 0 24 29 1 #"\n"
0 0 17 3 72
(
 #";; RETURN: an updated invader that the original invader move down by"
 #" the"
) 0 0 24 29 1 #"\n"
0 0 17 3 45 #";;         same amount of units as its height"
0 0 24 29 1 #"\n"
0 0 17 3 13 #";;;; Examples"
0 0 24 29 1 #"\n"
0 0 17 3 60
#";; (invader-move (make-posn 100 100)) => (make-posn 100 120)"
0 0 24 29 1 #"\n"
0 0 17 3 60
#";; (invader-move (make-posn 110 110)) => (make-posn 110 130)"
0 0 24 29 1 #"\n"
0 0 17 3 24 #";;;; Function Definition"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 12 #"invader-move"
0 0 24 3 1 #" "
0 0 14 3 7 #"invader"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 9 #"make-posn"
0 0 24 3 2 #" ("
0 0 14 3 6 #"posn-x"
0 0 24 3 1 #" "
0 0 14 3 7 #"invader"
0 0 24 3 3 #") ("
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 14 3 12 #"INVADER-SIDE"
0 0 24 3 2 #" ("
0 0 14 3 6 #"posn-y"
0 0 24 3 1 #" "
0 0 14 3 7 #"invader"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 17 3 10 #";;;; Tests"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 12 #"invader-move"
0 0 24 3 2 #" ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 21 3 3 #"100"
0 0 24 3 1 #" "
0 0 21 3 3 #"100"
0 0 24 3 4 #")) ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 21 3 3 #"100"
0 0 24 3 1 #" "
0 0 21 3 3 #"120"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 12 #"invader-move"
0 0 24 3 2 #" ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 21 3 3 #"110"
0 0 24 3 1 #" "
0 0 21 3 3 #"110"
0 0 24 3 4 #")) ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 21 3 3 #"110"
0 0 24 3 1 #" "
0 0 21 3 3 #"130"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 14 #";;;; Signature"
0 0 24 29 1 #"\n"
0 0 17 3 44 #";; allinvader-move: AllInvader -> AllInvader"
0 0 24 29 1 #"\n"
0 0 17 3 12 #";;;; Purpose"
0 0 24 29 1 #"\n"
0 0 17 3 22 #";; GIVEN: all invaders"
0 0 24 29 1 #"\n"
0 0 17 3 61
#";; RETURN update all invaders that each one move down by  the"
0 0 24 29 1 #"\n"
0 0 17 3 45 #";;         same amount of units as its height"
0 0 24 29 1 #"\n"
0 0 17 3 13 #";;;; Examples"
0 0 24 29 1 #"\n"
0 0 17 3 35 #";; (allinvader-move empty) => empty"
0 0 24 29 1 #"\n"
0 0 17 3 67
#";; (allinvader-move (list (make-posn 100 100) (make-posn 200 200)))"
0 0 24 29 1 #"\n"
0 0 17 3 55 #";;    => (list (make-posn 100 120) (make-posn 200 220))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 24 #";;;; Function Definition"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 15 #"allinvader-move"
0 0 24 3 1 #" "
0 0 14 3 10 #"allinvader"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 3 #"map"
0 0 24 3 1 #" "
0 0 14 3 12 #"invader-move"
0 0 24 3 1 #" "
0 0 14 3 10 #"allinvader"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 10 #";;;; Tests"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 15 #"allinvader-move"
0 0 24 3 1 #" "
0 0 14 3 5 #"empty"
0 0 24 3 2 #") "
0 0 14 3 5 #"empty"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 15 #"allinvader-move"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 21 3 3 #"100"
0 0 24 3 1 #" "
0 0 21 3 3 #"100"
0 0 24 3 3 #") ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 21 3 3 #"200"
0 0 24 3 1 #" "
0 0 21 3 3 #"200"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 21 3 3 #"100"
0 0 24 3 1 #" "
0 0 21 3 3 #"120"
0 0 24 3 3 #") ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 21 3 3 #"200"
0 0 24 3 1 #" "
0 0 21 3 3 #"220"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 14 #";;;; Signature"
0 0 24 29 1 #"\n"
0 0 17 3 29 #";; mship-move: MShip -> MShip"
0 0 24 29 1 #"\n"
0 0 17 3 12 #";;;; Purpose"
0 0 24 29 1 #"\n"
0 0 17 3 23 #";; GIVEN: a mother ship"
0 0 24 29 1 #"\n"
0 0 17 3 75
(
 #";; RETURN: the updated mother ship that moves right for 15px, if it "
 #"hit the"
) 0 0 24 29 1 #"\n"
0 0 17 3 36 #";;         right side, make it empty"
0 0 24 29 1 #"\n"
0 0 17 3 12 #";;;; Example"
0 0 24 29 1 #"\n"
0 0 17 3 59
#";; (mship-move (make-posn 100 100)) => (make-posn 115 100))"
0 0 24 29 1 #"\n"
0 0 17 3 30 #";; (mship-move empty) => empty"
0 0 24 29 1 #"\n"
0 0 17 3 44 #";; (mship-move (make-posn 445 100)) => empty"
0 0 24 29 1 #"\n"
0 0 17 3 24 #";;;; Function Definition"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 10 #"mship-move"
0 0 24 3 1 #" "
0 0 14 3 5 #"mship"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ["
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [("
0 0 14 3 6 #"empty?"
0 0 24 3 1 #" "
0 0 14 3 5 #"mship"
0 0 24 3 2 #") "
0 0 14 3 5 #"empty"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [("
0 0 14 3 1 #">"
0 0 24 3 2 #" ("
0 0 14 3 6 #"posn-x"
0 0 24 3 1 #" "
0 0 14 3 5 #"mship"
0 0 24 3 3 #") ("
0 0 14 3 1 #"-"
0 0 24 3 1 #" "
0 0 14 3 5 #"WIDTH"
0 0 24 3 2 #" ("
0 0 14 3 1 #"/"
0 0 24 3 1 #" "
0 0 14 3 12 #"INVADER-SIDE"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 4 #"))) "
0 0 14 3 5 #"empty"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ["
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 9 #"make-posn"
0 0 24 3 2 #" ("
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 21 3 2 #"15"
0 0 24 3 2 #" ("
0 0 14 3 6 #"posn-x"
0 0 24 3 1 #" "
0 0 14 3 5 #"mship"
0 0 24 3 4 #")) ("
0 0 14 3 6 #"posn-y"
0 0 24 3 1 #" "
0 0 14 3 5 #"mship"
0 0 24 3 5 #"))]])"
0 0 24 29 1 #"\n"
0 0 17 3 10 #";;;; Tests"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 10 #"mship-move"
0 0 24 3 2 #" ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 21 3 3 #"100"
0 0 24 3 1 #" "
0 0 21 3 3 #"100"
0 0 24 3 4 #")) ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 21 3 3 #"115"
0 0 24 3 1 #" "
0 0 21 3 3 #"100"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 10 #"mship-move"
0 0 24 3 1 #" "
0 0 14 3 5 #"empty"
0 0 24 3 2 #") "
0 0 14 3 5 #"empty"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 10 #"mship-move"
0 0 24 3 2 #" ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 21 3 3 #"445"
0 0 24 3 1 #" "
0 0 21 3 3 #"100"
0 0 24 3 3 #")) "
0 0 14 3 5 #"empty"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 14 #";;;; Signature"
0 0 24 29 1 #"\n"
0 0 17 3 28 #";; mship-hit: World -> World"
0 0 24 29 1 #"\n"
0 0 17 3 12 #";;;; Purpose"
0 0 24 29 1 #"\n"
0 0 17 3 27 #";; GIVEN: the current world"
0 0 24 29 1 #"\n"
0 0 17 3 73
(
 #";; RETURN: update the world if the mother ship is hit(add 20 to scor"
 #"e and"
) 0 0 24 29 1 #"\n"
0 0 17 3 73
(
 #";;         add 1 to number of lives and delete the mother ship and d"
 #"elete"
) 0 0 24 29 1 #"\n"
0 0 17 3 49 #";;         the s-bullet that hit the mother ship)"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 23 #";;;; Function Definiton"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 9 #"mship-hit"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [("
0 0 14 3 6 #"empty?"
0 0 24 3 2 #" ("
0 0 14 3 11 #"world-mship"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 3 #")) "
0 0 14 3 1 #"w"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [("
0 0 14 3 19 #"invader-hit-by-asb?"
0 0 24 3 2 #" ("
0 0 14 3 11 #"world-mship"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 3 #") ("
0 0 14 3 9 #"world-asb"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 14 3 10 #"make-world"
0 0 24 3 1 #" "
0 0 14 3 5 #"empty"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                 ("
0 0 14 3 16 #"world-allinvader"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                 ("
0 0 14 3 15 #"world-spaceship"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                 ("
0 0 14 3 9 #"world-aib"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                 ("
0 0 14 3 12 #"s-bullet-hit"
0 0 24 3 2 #" ("
0 0 14 3 9 #"world-asb"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 3 #") ("
0 0 14 3 11 #"world-mship"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                 ("
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 21 3 2 #"20"
0 0 24 3 2 #" ("
0 0 14 3 11 #"world-score"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                 ("
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 2 #" ("
0 0 14 3 9 #"world-nol"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                 ("
0 0 14 3 10 #"world-time"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ["
0 0 14 3 4 #"else"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 3 #"]))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 14 #";;;; Signature"
0 0 24 29 1 #"\n"
0 0 17 3 41 #";; invader-front: AllInvader -> NonNegInt"
0 0 24 29 1 #"\n"
0 0 17 3 12 #";;;; Purpose"
0 0 24 29 1 #"\n"
0 0 17 3 22 #";; GIVEN: all invaders"
0 0 24 29 1 #"\n"
0 0 17 3 42 #";; RETURN: the posn-y of the front invader"
0 0 24 29 1 #"\n"
0 0 17 3 24 #";;;; Function Definition"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 13 #"invader-front"
0 0 24 3 1 #" "
0 0 14 3 3 #"all"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [("
0 0 14 3 6 #"empty?"
0 0 24 3 1 #" "
0 0 14 3 3 #"all"
0 0 24 3 2 #") "
0 0 21 3 1 #"0"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ["
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 3 #"max"
0 0 24 3 2 #" ("
0 0 14 3 6 #"posn-y"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 3 #"all"
0 0 24 3 4 #")) ("
0 0 14 3 13 #"invader-front"
0 0 24 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 24 3 1 #" "
0 0 14 3 3 #"all"
0 0 24 3 6 #")))]))"
0 0 24 29 1 #"\n"
0 0 17 3 10 #";;;; Tests"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 13 #"invader-front"
0 0 24 3 1 #" "
0 0 14 3 3 #"All"
0 0 24 3 2 #") "
0 0 21 3 3 #"160"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 14 #";;;; Signature"
0 0 24 29 1 #"\n"
0 0 17 3 29 #";; you-win?: World -> Boolean"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 14 #";;;; Signature"
0 0 24 29 1 #"\n"
0 0 17 3 27 #";; GIVEN: the current world"
0 0 24 29 1 #"\n"
0 0 17 3 76
(
 #";; RETURN: true if all the invaders are destroyed and the spaceship "
 #"survives"
) 0 0 24 29 1 #"\n"
0 0 17 3 30 #";;         and false otherwise"
0 0 24 29 1 #"\n"
0 0 17 3 13 #";;;; Examples"
0 0 24 29 1 #"\n"
0 0 17 3 43 #";; (you-win? (make-world (make-posn 200 40)"
0 0 24 29 1 #"\n"
0 0 17 3 72
(
 #";;           All (make-posn 200 380) aib-example asb-example 100 1 1"
 #"00))"
) 0 0 24 29 1 #"\n"
0 0 17 3 17 #";;      => #false"
0 0 24 29 1 #"\n"
0 0 17 3 36 #";; (you-win? (make-world empty empty"
0 0 24 29 1 #"\n"
0 0 17 3 71
(
 #";;     (make-posn 200 380) aib-example asb-example 100 1 100)) => #t"
 #"rue"
) 0 0 24 29 1 #"\n"
0 0 17 3 24 #";;;; Function Definition"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 8 #"you-win?"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [("
0 0 14 3 3 #"and"
0 0 24 3 2 #" ("
0 0 14 3 6 #"empty?"
0 0 24 3 2 #" ("
0 0 14 3 11 #"world-mship"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 6 #"empty?"
0 0 24 3 2 #" ("
0 0 14 3 16 #"world-allinvader"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 4 #"))) "
0 0 21 3 5 #"#true"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ["
0 0 14 3 4 #"else"
0 0 24 3 1 #" "
0 0 21 3 6 #"#false"
0 0 24 3 3 #"]))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 10 #";;;; Tests"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 29 1 #"\n"
0 0 24 3 2 #" ("
0 0 14 3 8 #"you-win?"
0 0 24 3 2 #" ("
0 0 14 3 10 #"make-world"
0 0 24 3 2 #" ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 21 3 3 #"200"
0 0 24 3 1 #" "
0 0 21 3 2 #"40"
0 0 24 3 2 #") "
0 0 14 3 3 #"All"
0 0 24 29 1 #"\n"
0 0 24 3 24 #"                       ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 21 3 3 #"200"
0 0 24 3 1 #" "
0 0 21 3 3 #"380"
0 0 24 3 2 #") "
0 0 14 3 11 #"aib-example"
0 0 24 3 1 #" "
0 0 14 3 11 #"asb-example"
0 0 24 3 1 #" "
0 0 21 3 3 #"100"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 3 #"100"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"       "
0 0 21 3 6 #"#false"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 29 1 #"\n"
0 0 24 3 2 #" ("
0 0 14 3 8 #"you-win?"
0 0 24 3 2 #" ("
0 0 14 3 10 #"make-world"
0 0 24 3 1 #" "
0 0 14 3 5 #"empty"
0 0 24 3 1 #" "
0 0 14 3 5 #"empty"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 21 3 3 #"200"
0 0 24 3 1 #" "
0 0 21 3 3 #"380"
0 0 24 3 2 #") "
0 0 14 3 11 #"aib-example"
0 0 24 3 1 #" "
0 0 14 3 11 #"asb-example"
0 0 24 3 1 #" "
0 0 21 3 3 #"100"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 3 #"100"
0 0 24 3 4 #"))  "
0 0 21 3 5 #"#true"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 14 #";;;; Signature"
0 0 24 29 1 #"\n"
0 0 17 3 30 #";; you-lose?: World -> Boolean"
0 0 24 29 1 #"\n"
0 0 17 3 12 #";;;; Purpose"
0 0 24 29 1 #"\n"
0 0 17 3 27 #";; GIVEN: the current world"
0 0 24 29 1 #"\n"
0 0 17 3 74
(
 #";; RETURN: true if number of lives becomes 0 or the invader hit the "
 #"bottom"
) 0 0 24 29 1 #"\n"
0 0 17 3 30 #";;         and false otherwise"
0 0 24 29 1 #"\n"
0 0 17 3 13 #";;;; Examples"
0 0 24 29 1 #"\n"
0 0 17 3 44 #";; (you-lose? (make-world (make-posn 200 40)"
0 0 24 29 1 #"\n"
0 0 17 3 72
(
 #";;           All (make-posn 200 380) aib-example asb-example 100 1 1"
 #"00))"
) 0 0 24 29 1 #"\n"
0 0 17 3 17 #";;      => #false"
0 0 24 29 1 #"\n"
0 0 17 3 37 #";; (you-lose? (make-world empty empty"
0 0 24 29 1 #"\n"
0 0 17 3 71
(
 #";;     (make-posn 200 380) aib-example asb-example 100 0 100)) => #t"
 #"rue"
) 0 0 24 29 1 #"\n"
0 0 17 3 58
#";; (you-lose? (make-world empty (list (make-posn 100 406))"
0 0 24 29 1 #"\n"
0 0 17 3 71
(
 #";;     (make-posn 200 380) aib-example asb-example 100 1 100)) => #t"
 #"rue"
) 0 0 24 29 1 #"\n"
0 0 17 3 24 #";;;; Function Definition"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 9 #"you-lose?"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [("
0 0 14 3 2 #"or"
0 0 24 3 2 #" ("
0 0 14 3 1 #"="
0 0 24 3 2 #" ("
0 0 14 3 9 #"world-nol"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 2 #") "
0 0 21 3 1 #"0"
0 0 24 3 3 #") ("
0 0 14 3 2 #">="
0 0 24 3 2 #" ("
0 0 14 3 13 #"invader-front"
0 0 24 3 2 #" ("
0 0 14 3 16 #"world-allinvader"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 33 #"                                ("
0 0 14 3 1 #"-"
0 0 24 3 1 #" "
0 0 14 3 8 #"S-POSN-Y"
0 0 24 3 2 #" ("
0 0 14 3 1 #"/"
0 0 24 3 1 #" "
0 0 14 3 7 #"S-WIDTH"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 5 #")))) "
0 0 21 3 5 #"#true"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ["
0 0 14 3 4 #"else"
0 0 24 3 1 #" "
0 0 21 3 6 #"#false"
0 0 24 3 3 #"]))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 10 #";;;; Tests"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 29 1 #"\n"
0 0 24 3 2 #" ("
0 0 14 3 9 #"you-lose?"
0 0 24 3 2 #" ("
0 0 14 3 10 #"make-world"
0 0 24 3 2 #" ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 21 3 3 #"200"
0 0 24 3 1 #" "
0 0 21 3 2 #"40"
0 0 24 3 2 #") "
0 0 14 3 3 #"All"
0 0 24 29 1 #"\n"
0 0 24 3 24 #"                       ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 21 3 3 #"200"
0 0 24 3 1 #" "
0 0 21 3 3 #"380"
0 0 24 3 2 #") "
0 0 14 3 11 #"aib-example"
0 0 24 3 1 #" "
0 0 14 3 11 #"asb-example"
0 0 24 3 1 #" "
0 0 21 3 3 #"100"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 3 #"100"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"       "
0 0 21 3 6 #"#false"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 29 1 #"\n"
0 0 24 3 2 #" ("
0 0 14 3 9 #"you-lose?"
0 0 24 3 2 #" ("
0 0 14 3 10 #"make-world"
0 0 24 3 1 #" "
0 0 14 3 5 #"empty"
0 0 24 3 1 #" "
0 0 14 3 3 #"All"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 21 3 3 #"200"
0 0 24 3 1 #" "
0 0 21 3 3 #"380"
0 0 24 3 2 #") "
0 0 14 3 11 #"aib-example"
0 0 24 3 1 #" "
0 0 14 3 11 #"asb-example"
0 0 24 3 1 #" "
0 0 21 3 3 #"100"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 3 #"100"
0 0 24 3 4 #"))  "
0 0 21 3 5 #"#true"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 9 #"you-lose?"
0 0 24 3 2 #" ("
0 0 14 3 10 #"make-world"
0 0 24 3 1 #" "
0 0 14 3 5 #"empty"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 21 3 3 #"100"
0 0 24 3 1 #" "
0 0 21 3 3 #"406"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 21 3 3 #"200"
0 0 24 3 1 #" "
0 0 21 3 3 #"380"
0 0 24 3 2 #") "
0 0 14 3 11 #"aib-example"
0 0 24 3 1 #" "
0 0 14 3 11 #"asb-example"
0 0 24 3 1 #" "
0 0 21 3 3 #"100"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 3 #"100"
0 0 24 3 3 #")) "
0 0 21 3 5 #"#true"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 14 #";;;; Signature"
0 0 24 29 1 #"\n"
0 0 17 3 30 #";; end-game?: World -> Boolean"
0 0 24 29 1 #"\n"
0 0 17 3 12 #";;;; Purpose"
0 0 24 29 1 #"\n"
0 0 17 3 19 #";; GIVEN: the world"
0 0 24 29 1 #"\n"
0 0 17 3 53 #";; RETURN: #true if the game end and #false otherwise"
0 0 24 29 1 #"\n"
0 0 17 3 24 #";;;; Function Definition"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 9 #"end-game?"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 2 #"or"
0 0 24 3 2 #" ("
0 0 14 3 8 #"you-win?"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 3 #") ("
0 0 14 3 9 #"you-lose?"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 17 3 10 #";;;; Tests"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 29 1 #"\n"
0 0 24 3 2 #" ("
0 0 14 3 9 #"end-game?"
0 0 24 3 2 #" ("
0 0 14 3 10 #"make-world"
0 0 24 3 1 #" "
0 0 14 3 5 #"empty"
0 0 24 3 1 #" "
0 0 14 3 5 #"empty"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 21 3 3 #"200"
0 0 24 3 1 #" "
0 0 21 3 3 #"380"
0 0 24 3 2 #") "
0 0 14 3 11 #"aib-example"
0 0 24 3 1 #" "
0 0 14 3 11 #"asb-example"
0 0 24 3 1 #" "
0 0 21 3 3 #"100"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 3 #"100"
0 0 24 3 4 #"))  "
0 0 21 3 5 #"#true"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 29 1 #"\n"
0 0 24 3 2 #" ("
0 0 14 3 9 #"end-game?"
0 0 24 3 2 #" ("
0 0 14 3 10 #"make-world"
0 0 24 3 2 #" ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 21 3 3 #"200"
0 0 24 3 1 #" "
0 0 21 3 2 #"40"
0 0 24 3 2 #") "
0 0 14 3 3 #"All"
0 0 24 29 1 #"\n"
0 0 24 3 24 #"                       ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 21 3 3 #"200"
0 0 24 3 1 #" "
0 0 21 3 3 #"380"
0 0 24 3 2 #") "
0 0 14 3 11 #"aib-example"
0 0 24 3 1 #" "
0 0 14 3 11 #"asb-example"
0 0 24 3 1 #" "
0 0 21 3 3 #"100"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 3 #"100"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"       "
0 0 21 3 6 #"#false"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 15 #";;;; Signature "
0 0 24 29 1 #"\n"
0 0 17 3 40 #";; key-handler: World Key-Event -> World"
0 0 24 29 1 #"\n"
0 0 17 3 12 #";;;; Purpose"
0 0 24 29 1 #"\n"
0 0 17 3 43 #";; GIVEN: the current world and a key event"
0 0 24 29 1 #"\n"
0 0 17 3 74
(
 #";; RETURNS: a new world with direction updated according to the key "
 #"event."
) 0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 11 #"key-handler"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 1 #" "
0 0 14 3 2 #"ke"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [("
0 0 14 3 5 #"key=?"
0 0 24 3 1 #" "
0 0 14 3 2 #"ke"
0 0 24 3 1 #" "
0 0 19 3 6 #"\"left\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 14 3 10 #"make-world"
0 0 24 3 2 #" ("
0 0 14 3 11 #"world-mship"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"       ("
0 0 14 3 16 #"world-allinvader"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 3 #") ("
0 0 14 3 14 #"spaceship-move"
0 0 24 3 2 #" ("
0 0 14 3 15 #"world-spaceship"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 2 #") "
0 0 14 3 4 #"LEFT"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                 ("
0 0 14 3 9 #"world-aib"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 3 #") ("
0 0 14 3 9 #"world-asb"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 3 #") ("
0 0 14 3 11 #"world-score"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 3 #") ("
0 0 14 3 9 #"world-nol"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                 ("
0 0 14 3 10 #"world-time"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [("
0 0 14 3 5 #"key=?"
0 0 24 3 1 #" "
0 0 14 3 2 #"ke"
0 0 24 3 1 #" "
0 0 19 3 7 #"\"right\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 14 3 10 #"make-world"
0 0 24 3 2 #" ("
0 0 14 3 11 #"world-mship"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 16 #"world-allinvader"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 3 #") ("
0 0 14 3 14 #"spaceship-move"
0 0 24 3 2 #" ("
0 0 14 3 15 #"world-spaceship"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 2 #") "
0 0 14 3 5 #"RIGHT"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                 ("
0 0 14 3 9 #"world-aib"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 3 #") ("
0 0 14 3 9 #"world-asb"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 2 #")("
0 0 14 3 11 #"world-score"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 3 #") ("
0 0 14 3 9 #"world-nol"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                 ("
0 0 14 3 10 #"world-time"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [("
0 0 14 3 5 #"key=?"
0 0 24 3 1 #" "
0 0 14 3 2 #"ke"
0 0 24 3 1 #" "
0 0 19 3 3 #"\" \""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 14 3 10 #"make-world"
0 0 24 3 2 #" ("
0 0 14 3 11 #"world-mship"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 16 #"world-allinvader"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 3 #") ("
0 0 14 3 15 #"world-spaceship"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 3 #") ("
0 0 14 3 9 #"world-aib"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                 ("
0 0 14 3 14 #"spaceship-fire"
0 0 24 3 2 #" ("
0 0 14 3 15 #"world-spaceship"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 3 #") ("
0 0 14 3 9 #"world-asb"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                 ("
0 0 14 3 11 #"world-score"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 3 #") ("
0 0 14 3 9 #"world-nol"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                 ("
0 0 14 3 10 #"world-time"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ["
0 0 14 3 4 #"else"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 3 #"]))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 14 #";;;; Signature"
0 0 24 29 1 #"\n"
0 0 17 3 38 #";; world-every-10-tick: World -> World"
0 0 24 29 1 #"\n"
0 0 17 3 12 #";;;; Purpose"
0 0 24 29 1 #"\n"
0 0 17 3 27 #";; GIVEN: the current world"
0 0 24 29 1 #"\n"
0 0 17 3 41 #";; RETURN: if the time is a multiple of 1"
0 0 17 3 33 #"0, move all visible invaders down"
0 0 24 29 1 #"\n"
0 0 17 3 76
(
 #";;         by the same amount of units as their height and update th"
 #"e world,"
) 0 0 24 29 1 #"\n"
0 0 17 3 37 #";;         otherwise, remain the same"
0 0 24 29 1 #"\n"
0 0 17 3 13 #";;;; Examples"
0 0 24 29 1 #"\n"
0 0 17 3 67
#";; (world-every-10-tick (make-world empty (list (make-posn 100 300)"
0 0 24 29 1 #"\n"
0 0 17 3 27 #";;     (make-posn 200 200))"
0 0 24 29 1 #"\n"
0 0 17 3 65
#";;     (make-posn 200 380) aib-example asb-example 100 1 100)) =>"
0 0 24 29 1 #"\n"
0 0 17 3 71
(
 #";;     (make-world empty (list (make-posn 100 320) (make-posn 200 22"
 #"0))"
) 0 0 24 29 1 #"\n"
0 0 17 3 62
#";;     (make-posn 200 380) aib-example asb-example 100 1 100))"
0 0 24 29 1 #"\n"
0 0 17 3 67
#";; (world-every-10-tick (make-world empty (list (make-posn 100 300)"
0 0 24 29 1 #"\n"
0 0 17 3 27 #";;     (make-posn 200 200))"
0 0 24 29 1 #"\n"
0 0 17 3 64
#";;     (make-posn 200 380) aib-example asb-example 100 1 99)) =>"
0 0 24 29 1 #"\n"
0 0 17 3 71
(
 #";;     (make-world empty (list (make-posn 100 300) (make-posn 200 20"
 #"0))"
) 0 0 24 29 1 #"\n"
0 0 17 3 61
#";;     (make-posn 200 380) aib-example asb-example 100 1 99))"
0 0 24 29 1 #"\n"
0 0 17 3 24 #";;;; Function Definition"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 19 #"world-every-10-tick"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [("
0 0 14 3 1 #"="
0 0 24 3 2 #" ("
0 0 14 3 9 #"remainder"
0 0 24 3 2 #" ("
0 0 14 3 10 #"world-time"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 2 #") "
0 0 21 3 2 #"10"
0 0 24 3 2 #") "
0 0 21 3 1 #"0"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 14 3 10 #"make-world"
0 0 24 3 2 #" ("
0 0 14 3 11 #"world-mship"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 15 #"allinvader-move"
0 0 24 3 2 #" ("
0 0 14 3 16 #"world-allinvader"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 4 #")) ("
0 0 14 3 15 #"world-spaceship"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 3 #") ("
0 0 14 3 9 #"world-aib"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                 ("
0 0 14 3 9 #"world-asb"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 3 #") ("
0 0 14 3 11 #"world-score"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 3 #") ("
0 0 14 3 9 #"world-nol"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                 ("
0 0 14 3 10 #"world-time"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ["
0 0 14 3 4 #"else"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 3 #"]))"
0 0 24 29 1 #"\n"
0 0 17 3 10 #";;;; Tests"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 19 #"world-every-10-tick"
0 0 24 3 2 #" ("
0 0 14 3 10 #"make-world"
0 0 24 3 1 #" "
0 0 14 3 5 #"empty"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 21 3 3 #"100"
0 0 24 3 1 #" "
0 0 21 3 3 #"300"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 21 3 3 #"200"
0 0 24 3 1 #" "
0 0 21 3 3 #"200"
0 0 24 3 4 #")) ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 21 3 3 #"200"
0 0 24 3 1 #" "
0 0 21 3 3 #"380"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 25 #"                         "
0 0 14 3 11 #"aib-example"
0 0 24 3 1 #" "
0 0 14 3 11 #"asb-example"
0 0 24 3 1 #" "
0 0 21 3 3 #"100"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 3 #"100"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 10 #"make-world"
0 0 24 3 1 #" "
0 0 14 3 5 #"empty"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 21 3 3 #"100"
0 0 24 3 1 #" "
0 0 21 3 3 #"320"
0 0 24 3 3 #") ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 21 3 3 #"200"
0 0 24 3 1 #" "
0 0 21 3 3 #"220"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 21 3 3 #"200"
0 0 24 3 1 #" "
0 0 21 3 3 #"380"
0 0 24 3 2 #") "
0 0 14 3 11 #"aib-example"
0 0 24 3 1 #" "
0 0 14 3 11 #"asb-example"
0 0 24 3 1 #" "
0 0 21 3 3 #"100"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 3 #"100"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 19 #"world-every-10-tick"
0 0 24 3 2 #" ("
0 0 14 3 10 #"make-world"
0 0 24 3 1 #" "
0 0 14 3 5 #"empty"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 21 3 3 #"100"
0 0 24 3 1 #" "
0 0 21 3 3 #"300"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 21 3 3 #"200"
0 0 24 3 1 #" "
0 0 21 3 3 #"200"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 21 3 3 #"200"
0 0 24 3 1 #" "
0 0 21 3 3 #"380"
0 0 24 3 2 #") "
0 0 14 3 11 #"aib-example"
0 0 24 3 1 #" "
0 0 14 3 11 #"asb-example"
0 0 24 3 1 #" "
0 0 21 3 3 #"100"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 2 #"99"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 10 #"make-world"
0 0 24 3 1 #" "
0 0 14 3 5 #"empty"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 21 3 3 #"100"
0 0 24 3 1 #" "
0 0 21 3 3 #"300"
0 0 24 3 3 #") ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 21 3 3 #"200"
0 0 24 3 1 #" "
0 0 21 3 3 #"200"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 21 3 3 #"200"
0 0 24 3 1 #" "
0 0 21 3 3 #"380"
0 0 24 3 2 #") "
0 0 14 3 11 #"aib-example"
0 0 24 3 1 #" "
0 0 14 3 11 #"asb-example"
0 0 24 3 1 #" "
0 0 21 3 3 #"100"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 2 #"99"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 14 #";;;; Signature"
0 0 24 29 1 #"\n"
0 0 17 3 38 #";; world-every-30-tick: World -> World"
0 0 24 29 1 #"\n"
0 0 17 3 12 #";;;; Purpose"
0 0 24 29 1 #"\n"
0 0 17 3 27 #";; GIVEN: the current world"
0 0 24 29 1 #"\n"
0 0 17 3 73
(
 #";; RETURN: if the time is a multiple of 30, add a mother ship at the"
 #" top "
) 0 0 24 29 1 #"\n"
0 0 17 3 51 #";;         left in the canvas and update the world,"
0 0 24 29 1 #"\n"
0 0 17 3 37 #";;         otherwise, remain the same"
0 0 24 29 1 #"\n"
0 0 17 3 13 #";;;; Examples"
0 0 24 29 1 #"\n"
0 0 17 3 67
#";; (world-every-30-tick (make-world empty (list (make-posn 100 300)"
0 0 24 29 1 #"\n"
0 0 17 3 27 #";;     (make-posn 200 200))"
0 0 24 29 1 #"\n"
0 0 17 3 65
#";;     (make-posn 200 380) aib-example asb-example 100 1 100)) =>"
0 0 24 29 1 #"\n"
0 0 17 3 71
(
 #";;     (make-world empty (list (make-posn 100 300) (make-posn 200 20"
 #"0))"
) 0 0 24 29 1 #"\n"
0 0 17 3 62
#";;     (make-posn 200 380) aib-example asb-example 100 1 100))"
0 0 24 29 1 #"\n"
0 0 17 3 67
#";; (world-every-30-tick (make-world empty (list (make-posn 100 300)"
0 0 24 29 1 #"\n"
0 0 17 3 27 #";;     (make-posn 200 200))"
0 0 24 29 1 #"\n"
0 0 17 3 64
#";;     (make-posn 200 380) aib-example asb-example 100 1 90)) =>"
0 0 24 29 1 #"\n"
0 0 17 3 76
(
 #";;     (make-world MSHIP-INIT (list (make-posn 100 300) (make-posn 2"
 #"00 200))"
) 0 0 24 29 1 #"\n"
0 0 17 3 61
#";;     (make-posn 200 380) aib-example asb-example 100 1 90))"
0 0 24 29 1 #"\n"
0 0 17 3 24 #";;;; Function Definition"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 19 #"world-every-30-tick"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [("
0 0 14 3 1 #"="
0 0 24 3 2 #" ("
0 0 14 3 9 #"remainder"
0 0 24 3 2 #" ("
0 0 14 3 10 #"world-time"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 2 #") "
0 0 21 3 2 #"30"
0 0 24 3 2 #") "
0 0 21 3 1 #"0"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 14 3 10 #"make-world"
0 0 24 3 1 #" "
0 0 14 3 10 #"MSHIP-INIT"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 16 #"world-allinvader"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 3 #") ("
0 0 14 3 15 #"world-spaceship"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 3 #") ("
0 0 14 3 9 #"world-aib"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                 ("
0 0 14 3 9 #"world-asb"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 3 #") ("
0 0 14 3 11 #"world-score"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 3 #") ("
0 0 14 3 9 #"world-nol"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                 ("
0 0 14 3 10 #"world-time"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ["
0 0 14 3 4 #"else"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 3 #"]))"
0 0 24 29 1 #"\n"
0 0 17 3 10 #";;;; Tests"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 19 #"world-every-30-tick"
0 0 24 3 2 #" ("
0 0 14 3 10 #"make-world"
0 0 24 3 1 #" "
0 0 14 3 5 #"empty"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 21 3 3 #"100"
0 0 24 3 1 #" "
0 0 21 3 3 #"300"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 21 3 3 #"200"
0 0 24 3 1 #" "
0 0 21 3 3 #"200"
0 0 24 3 4 #")) ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 21 3 3 #"200"
0 0 24 3 1 #" "
0 0 21 3 3 #"380"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 25 #"                         "
0 0 14 3 11 #"aib-example"
0 0 24 3 1 #" "
0 0 14 3 11 #"asb-example"
0 0 24 3 1 #" "
0 0 21 3 3 #"100"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 3 #"100"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 10 #"make-world"
0 0 24 3 1 #" "
0 0 14 3 5 #"empty"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 21 3 3 #"100"
0 0 24 3 1 #" "
0 0 21 3 3 #"300"
0 0 24 3 3 #") ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 21 3 3 #"200"
0 0 24 3 1 #" "
0 0 21 3 3 #"200"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 21 3 3 #"200"
0 0 24 3 1 #" "
0 0 21 3 3 #"380"
0 0 24 3 2 #") "
0 0 14 3 11 #"aib-example"
0 0 24 3 1 #" "
0 0 14 3 11 #"asb-example"
0 0 24 3 1 #" "
0 0 21 3 3 #"100"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 3 #"100"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 19 #"world-every-30-tick"
0 0 24 3 2 #" ("
0 0 14 3 10 #"make-world"
0 0 24 3 1 #" "
0 0 14 3 5 #"empty"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 21 3 3 #"100"
0 0 24 3 1 #" "
0 0 21 3 3 #"300"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 21 3 3 #"200"
0 0 24 3 1 #" "
0 0 21 3 3 #"200"
0 0 24 3 4 #")) ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 21 3 3 #"200"
0 0 24 3 1 #" "
0 0 21 3 3 #"380"
0 0 24 3 2 #") "
0 0 14 3 11 #"aib-example"
0 0 24 3 1 #" "
0 0 14 3 11 #"asb-example"
0 0 24 3 1 #" "
0 0 21 3 3 #"100"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 2 #"90"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 10 #"make-world"
0 0 24 3 1 #" "
0 0 14 3 10 #"MSHIP-INIT"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 21 3 3 #"100"
0 0 24 3 1 #" "
0 0 21 3 3 #"300"
0 0 24 3 3 #") ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 21 3 3 #"200"
0 0 24 3 1 #" "
0 0 21 3 3 #"200"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 21 3 3 #"200"
0 0 24 3 1 #" "
0 0 21 3 3 #"380"
0 0 24 3 2 #") "
0 0 14 3 11 #"aib-example"
0 0 24 3 1 #" "
0 0 14 3 11 #"asb-example"
0 0 24 3 1 #" "
0 0 21 3 3 #"100"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 2 #"90"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 14 #";;;; Signature"
0 0 24 29 1 #"\n"
0 0 17 3 32 #";; spaceship-hit: World -> World"
0 0 24 29 1 #"\n"
0 0 17 3 12 #";;;; Purpose"
0 0 24 29 1 #"\n"
0 0 17 3 27 #";; GIVEN: the current world"
0 0 24 29 1 #"\n"
0 0 17 3 79
(
 #";; RETURN: if the spaceship is hit by the invader bullet, number of "
 #"lives minus"
) 0 0 24 29 1 #"\n"
0 0 17 3 78
(
 #";;         1, delete the bullet that hit the spaceship and put a new"
 #" spaceship"
) 0 0 24 29 1 #"\n"
0 0 17 3 76
(
 #";;         at the bottom, center of the screen, else do not change t"
 #"he world"
) 0 0 24 29 1 #"\n"
0 0 17 3 23 #";;;; Function Definiton"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 13 #"spaceship-hit"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [("
0 0 14 3 21 #"spaceship-hit-by-aib?"
0 0 24 3 2 #" ("
0 0 14 3 15 #"world-spaceship"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 3 #") ("
0 0 14 3 9 #"world-aib"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 14 3 10 #"make-world"
0 0 24 3 2 #" ("
0 0 14 3 11 #"world-mship"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                 ("
0 0 14 3 16 #"world-allinvader"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                 "
0 0 14 3 14 #"SPACESHIP-INIT"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                 ("
0 0 14 3 7 #"aib-hit"
0 0 24 3 2 #" ("
0 0 14 3 9 #"world-aib"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 3 #") ("
0 0 14 3 15 #"world-spaceship"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                 ("
0 0 14 3 9 #"world-asb"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                 ("
0 0 14 3 11 #"world-score"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                 ("
0 0 14 3 1 #"-"
0 0 24 3 2 #" ("
0 0 14 3 9 #"world-nol"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 2 #") "
0 0 21 3 1 #"1"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                 ("
0 0 14 3 10 #"world-time"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ["
0 0 14 3 4 #"else"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 4 #"])) "
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 14 #";;;; Signature"
0 0 24 29 1 #"\n"
0 0 17 3 29 #";; world-step: World -> World"
0 0 24 29 1 #"\n"
0 0 17 3 12 #";;;; Purpose"
0 0 24 29 1 #"\n"
0 0 17 3 27 #";; GIVEN: the current world"
0 0 24 29 1 #"\n"
0 0 17 3 46 #";; RETURN: the next world after one clock tick"
0 0 24 29 1 #"\n"
0 0 17 3 24 #";;;; Function Definition"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 10 #"world-step"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 19 #"world-every-30-tick"
0 0 24 3 2 #" ("
0 0 14 3 19 #"world-every-10-tick"
0 0 24 3 2 #" ("
0 0 14 3 13 #"spaceship-hit"
0 0 24 29 1 #"\n"
0 0 24 3 25 #"                        ("
0 0 14 3 9 #"mship-hit"
0 0 24 3 2 #" ("
0 0 14 3 11 #"invader-hit"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 10 #"make-world"
0 0 24 3 2 #" ("
0 0 14 3 10 #"mship-move"
0 0 24 3 2 #" ("
0 0 14 3 11 #"world-mship"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 16 #"world-allinvader"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 15 #"world-spaceship"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 7 #"aib-add"
0 0 24 3 2 #" ("
0 0 14 3 8 #"aib-move"
0 0 24 3 2 #" ("
0 0 14 3 9 #"world-aib"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 4 #")) ("
0 0 14 3 16 #"world-allinvader"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 8 #"asb-move"
0 0 24 3 2 #" ("
0 0 14 3 9 #"world-asb"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 11 #"world-score"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 9 #"world-nol"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 2 #" ("
0 0 14 3 10 #"world-time"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 9 #")))))))))"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 8 #"big-bang"
0 0 24 3 2 #" ("
0 0 14 3 10 #"make-world"
0 0 24 3 1 #" "
0 0 14 3 5 #"empty"
0 0 24 3 1 #" "
0 0 14 3 3 #"All"
0 0 24 3 1 #" "
0 0 14 3 14 #"SPACESHIP-INIT"
0 0 24 3 1 #" "
0 0 14 3 5 #"empty"
0 0 24 3 1 #" "
0 0 14 3 5 #"empty"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 9 #"stop-when"
0 0 24 3 1 #" "
0 0 14 3 9 #"end-game?"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 7 #"to-draw"
0 0 24 3 1 #" "
0 0 14 3 10 #"world-draw"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 7 #"on-tick"
0 0 24 3 1 #" "
0 0 14 3 10 #"world-step"
0 0 24 3 1 #" "
0 0 21 3 3 #"0.1"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 6 #"on-key"
0 0 24 3 1 #" "
0 0 14 3 11 #"key-handler"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                  "
0           0
